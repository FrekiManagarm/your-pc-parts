import { z } from "zod";
import type { Prisma } from "@prisma/client";

/////////////////////////////////////////
// HELPER FUNCTIONS
/////////////////////////////////////////

/////////////////////////////////////////
// ENUMS
/////////////////////////////////////////

export const TransactionIsolationLevelSchema = z.enum([
  "ReadUncommitted",
  "ReadCommitted",
  "RepeatableRead",
  "Serializable",
]);

export const AccountScalarFieldEnumSchema = z.enum([
  "id",
  "userId",
  "type",
  "provider",
  "providerAccountId",
  "refresh_token",
  "access_token",
  "expires_at",
  "token_type",
  "scope",
  "id_token",
  "session_state",
]);

export const SessionScalarFieldEnumSchema = z.enum([
  "id",
  "sessionToken",
  "userId",
  "expires",
]);

export const UserScalarFieldEnumSchema = z.enum([
  "id",
  "name",
  "email",
  "emailVerified",
  "image",
  "role",
]);

export const VerificationTokenScalarFieldEnumSchema = z.enum([
  "identifier",
  "token",
  "expires",
]);

export const CPUCoolerScalarFieldEnumSchema = z.enum([
  "id",
  "rpm",
  "name",
  "imageUrl",
  "amazonLink",
  "noise_level",
  "color",
  "size",
]);

export const MotherboardScalarFieldEnumSchema = z.enum([
  "id",
  "socket",
  "form_factor",
  "max_memory",
  "memory_slots",
  "name",
  "imageUrl",
  "amazonLink",
  "color",
]);

export const RAMScalarFieldEnumSchema = z.enum([
  "id",
  "speed",
  "modules",
  "price_per_gb",
  "color",
  "imageUrl",
  "amazonLink",
  "name",
  "first_word_latency",
  "cas_latency",
]);

export const CPUScalarFieldEnumSchema = z.enum([
  "id",
  "core_count",
  "threads_count",
  "name",
  "imageUrl",
  "core_clock",
  "boost_clock",
  "amazonLink",
  "tdp",
  "graphics",
  "smt",
]);

export const HDDScalarFieldEnumSchema = z.enum([
  "id",
  "capacity",
  "price_per_gb",
  "amazonLink",
  "name",
  "imageUrl",
  "type",
  "cache",
  "form_factor",
  "interface",
]);

export const SSDScalarFieldEnumSchema = z.enum([
  "id",
  "capacity",
  "price_per_gb",
  "name",
  "imageUrl",
  "amazonLink",
  "type",
  "cache",
  "form_factor",
  "interface",
]);

export const GPUScalarFieldEnumSchema = z.enum([
  "id",
  "chipset",
  "memory",
  "name",
  "imageUrl",
  "amazonLink",
  "core_clock",
  "boost_clock",
  "color",
  "length",
]);

export const CaseScalarFieldEnumSchema = z.enum([
  "id",
  "type",
  "color",
  "name",
  "imageUrl",
  "included_PSU_W",
  "amazonLink",
  "side_panel",
  "external_volume",
  "internal_35_bays",
]);

export const PSUScalarFieldEnumSchema = z.enum([
  "id",
  "type",
  "name",
  "imageUrl",
  "efficiency",
  "amazonLink",
  "wattage",
  "modular",
  "color",
]);

export const SetupScalarFieldEnumSchema = z.enum([
  "id",
  "cpu_id",
  "gpu_id",
  "hdd_id",
  "case_id",
  "psu_id",
  "ram_id",
  "name",
  "sound_card_id",
  "cpu_cooler_id",
  "motherboard_id",
  "headphones_id",
  "keyboard_id",
  "mouse_id",
  "webcam_id",
  "user_id",
]);

export const SSDOfSetupScalarFieldEnumSchema = z.enum(["ssd_id", "setup_id"]);

export const CaseFanOfSetupScalarFieldEnumSchema = z.enum([
  "case_fan_id",
  "setup_id",
  "quantity",
]);

export const SpeakersOfSetupScalarFieldEnumSchema = z.enum([
  "speakers_id",
  "setup_id",
  "quantity",
]);

export const MonitorsOfSetupScalarFieldEnumSchema = z.enum([
  "monitor_id",
  "setup_id",
  "quantity",
]);

export const MonitorScalarFieldEnumSchema = z.enum([
  "id",
  "screen_size",
  "resolution",
  "amazonLink",
  "name",
  "imageUrl",
  "refresh_rate",
  "response_time",
  "panel_type",
  "aspect_ratio",
]);

export const SoundCardScalarFieldEnumSchema = z.enum([
  "id",
  "channels",
  "digital_audio",
  "name",
  "imageUrl",
  "amazonLink",
  "snr",
  "sample_rate",
  "chipset",
  "interface",
]);

export const HeadphonesScalarFieldEnumSchema = z.enum([
  "id",
  "type",
  "frequency_response",
  "microphone",
  "wireless",
  "amazonLink",
  "name",
  "imageUrl",
  "noise_cancellation",
  "enclosure_type",
  "color",
]);

export const KeyboardScalarFieldEnumSchema = z.enum([
  "id",
  "style",
  "switches",
  "backlit",
  "name",
  "amazonLink",
  "imageUrl",
  "tenkeyless",
  "connection_type",
  "color",
]);

export const MouseScalarFieldEnumSchema = z.enum([
  "id",
  "tracking_method",
  "connection_type",
  "max_dpi",
  "amazonLink",
  "name",
  "imageUrl",
  "hand_orientation",
  "color",
]);

export const SpeakersScalarFieldEnumSchema = z.enum([
  "id",
  "configuration",
  "name",
  "imageUrl",
  "wattage",
  "frequency_response",
  "amazonLink",
  "color",
]);

export const WebcamScalarFieldEnumSchema = z.enum([
  "id",
  "resolutions",
  "name",
  "imageUrl",
  "connection",
  "focus_type",
  "os",
  "amazonLink",
  "fov",
]);

export const CaseFanScalarFieldEnumSchema = z.enum([
  "id",
  "size",
  "name",
  "imageUrl",
  "color",
  "amazonLink",
  "rpm",
  "airflow",
]);

export const SortOrderSchema = z.enum(["asc", "desc"]);

export const QueryModeSchema = z.enum(["default", "insensitive"]);

export const NullsOrderSchema = z.enum(["first", "last"]);

export const UserRoleSchema = z.enum(["ADMINISTRATOR", "CLIENT", "MODERATOR"]);

export type UserRoleType = `${z.infer<typeof UserRoleSchema>}`;

export const PSUModulSchema = z.enum(["Full", "Semi", "none"]);

export type PSUModulType = `${z.infer<typeof PSUModulSchema>}`;

export const PSUEffSchema = z.enum([
  "bronze",
  "silver",
  "gold",
  "platinium",
  "titanium",
]);

export type PSUEffType = `${z.infer<typeof PSUEffSchema>}`;

export const PSUTypeSchema = z.enum(["ATX", "mATX", "SFX"]);

export type PSUTypeType = `${z.infer<typeof PSUTypeSchema>}`;

export const CaseTypeSchema = z.enum(["EATX", "ATX", "mATX", "mITX"]);

export type CaseTypeType = `${z.infer<typeof CaseTypeSchema>}`;

export const FocusTypeSchema = z.enum(["Auto", "Manual", "Fixed"]);

export type FocusTypeType = `${z.infer<typeof FocusTypeSchema>}`;

export const MouseOrientationSchema = z.enum(["Right", "Left", "Both"]);

export type MouseOrientationType = `${z.infer<typeof MouseOrientationSchema>}`;

export const MouseTrackMethodSchema = z.enum(["Optical", "Laser"]);

export type MouseTrackMethodType = `${z.infer<typeof MouseTrackMethodSchema>}`;

export const KeyboardStyleSchema = z.enum(["Gaming", "Mini", "Office"]);

export type KeyboardStyleType = `${z.infer<typeof KeyboardStyleSchema>}`;

export const ConnectionTypeSchema = z.enum([
  "Wired",
  "Wireless",
  "Bluetooth",
  "Both",
]);

export type ConnectionTypeType = `${z.infer<typeof ConnectionTypeSchema>}`;

export const HeadphoneTypesSchema = z.enum([
  "Circumaural",
  "Supra_aural",
  "Earbuds",
  "Waterproof",
  "DJ",
]);

export type HeadphoneTypesType = `${z.infer<typeof HeadphoneTypesSchema>}`;

export const EnclosureTypeSchema = z.enum(["Closed", "Open"]);

export type EnclosureTypeType = `${z.infer<typeof EnclosureTypeSchema>}`;

export const MonitorPanelTypeSchema = z.enum(["IPS", "TN", "VA", "OLED"]);

export type MonitorPanelTypeType = `${z.infer<typeof MonitorPanelTypeSchema>}`;

/////////////////////////////////////////
// MODELS
/////////////////////////////////////////

/////////////////////////////////////////
// ACCOUNT SCHEMA
/////////////////////////////////////////

export const AccountSchema = z.object({
  id: z.string().cuid(),
  userId: z.string(),
  type: z.string(),
  provider: z.string(),
  providerAccountId: z.string(),
  refresh_token: z.string().nullable(),
  access_token: z.string().nullable(),
  expires_at: z.number().int().nullable(),
  token_type: z.string().nullable(),
  scope: z.string().nullable(),
  id_token: z.string().nullable(),
  session_state: z.string().nullable(),
});

export type Account = z.infer<typeof AccountSchema>;

/////////////////////////////////////////
// SESSION SCHEMA
/////////////////////////////////////////

export const SessionSchema = z.object({
  id: z.string().cuid(),
  sessionToken: z.string(),
  userId: z.string(),
  expires: z.coerce.date(),
});

export type Session = z.infer<typeof SessionSchema>;

/////////////////////////////////////////
// USER SCHEMA
/////////////////////////////////////////

export const UserSchema = z.object({
  role: UserRoleSchema,
  id: z.string().cuid(),
  name: z.string().nullable(),
  email: z.string().nullable(),
  emailVerified: z.coerce.date().nullable(),
  image: z.string().nullable(),
});

export type User = z.infer<typeof UserSchema>;

/////////////////////////////////////////
// VERIFICATION TOKEN SCHEMA
/////////////////////////////////////////

export const VerificationTokenSchema = z.object({
  identifier: z.string(),
  token: z.string(),
  expires: z.coerce.date(),
});

export type VerificationToken = z.infer<typeof VerificationTokenSchema>;

/////////////////////////////////////////
// CPU COOLER SCHEMA
/////////////////////////////////////////

export const CPUCoolerSchema = z.object({
  id: z.string().cuid(),
  rpm: z.number().int().nullable(),
  name: z.string(),
  imageUrl: z.string().nullable(),
  amazonLink: z.string().nullable(),
  noise_level: z.number().int().nullable(),
  color: z.string().nullable(),
  size: z.number().int().nullable(),
});

export type CPUCooler = z.infer<typeof CPUCoolerSchema>;

/////////////////////////////////////////
// MOTHERBOARD SCHEMA
/////////////////////////////////////////

export const MotherboardSchema = z.object({
  id: z.string().cuid(),
  socket: z.string().array(),
  form_factor: z.string(),
  max_memory: z.number().int(),
  memory_slots: z.number().int(),
  name: z.string(),
  imageUrl: z.string().nullable(),
  amazonLink: z.string().nullable(),
  color: z.string().nullable(),
});

export type Motherboard = z.infer<typeof MotherboardSchema>;

/////////////////////////////////////////
// RAM SCHEMA
/////////////////////////////////////////

export const RAMSchema = z.object({
  id: z.string().cuid(),
  speed: z.number().int().array(),
  modules: z.number().int().array(),
  price_per_gb: z.number().int(),
  color: z.string().nullable(),
  imageUrl: z.string().nullable(),
  amazonLink: z.string().nullable(),
  name: z.string(),
  first_word_latency: z.string().nullable(),
  cas_latency: z.string().nullable(),
});

export type RAM = z.infer<typeof RAMSchema>;

/////////////////////////////////////////
// CPU SCHEMA
/////////////////////////////////////////

export const CPUSchema = z.object({
  id: z.string().cuid(),
  core_count: z.number().int(),
  threads_count: z.number().int(),
  name: z.string(),
  imageUrl: z.string().nullable(),
  core_clock: z.number(),
  boost_clock: z.number(),
  amazonLink: z.string().nullable(),
  tdp: z.number().int().nullable(),
  graphics: z.boolean().nullable(),
  smt: z.boolean().nullable(),
});

export type CPU = z.infer<typeof CPUSchema>;

/////////////////////////////////////////
// HDD SCHEMA
/////////////////////////////////////////

export const HDDSchema = z.object({
  id: z.string().cuid(),
  capacity: z.number().int(),
  price_per_gb: z.number().int(),
  amazonLink: z.string().nullable(),
  name: z.string(),
  imageUrl: z.string().nullable(),
  type: z.string().nullable(),
  cache: z.number().int().nullable(),
  form_factor: z.string().nullable(),
  interface: z.string().nullable(),
});

export type HDD = z.infer<typeof HDDSchema>;

/////////////////////////////////////////
// SSD SCHEMA
/////////////////////////////////////////

export const SSDSchema = z.object({
  id: z.string().cuid(),
  capacity: z.number().int(),
  price_per_gb: z.number().int(),
  name: z.string(),
  imageUrl: z.string().nullable(),
  amazonLink: z.string().nullable(),
  type: z.string().nullable(),
  cache: z.number().int().nullable(),
  form_factor: z.string().nullable(),
  interface: z.string().nullable(),
});

export type SSD = z.infer<typeof SSDSchema>;

/////////////////////////////////////////
// GPU SCHEMA
/////////////////////////////////////////

export const GPUSchema = z.object({
  id: z.string().cuid(),
  chipset: z.string().nullable(),
  memory: z.number().int().nullable(),
  name: z.string(),
  imageUrl: z.string().nullable(),
  amazonLink: z.string().nullable(),
  core_clock: z.number().int().nullable(),
  boost_clock: z.number().int().nullable(),
  color: z.string().nullable(),
  length: z.number().int().nullable(),
});

export type GPU = z.infer<typeof GPUSchema>;

/////////////////////////////////////////
// CASE SCHEMA
/////////////////////////////////////////

export const CaseSchema = z.object({
  type: CaseTypeSchema,
  id: z.string().cuid(),
  color: z.string().nullable(),
  name: z.string(),
  imageUrl: z.string().nullable(),
  included_PSU_W: z.number().int().nullable(),
  amazonLink: z.string().nullable(),
  side_panel: z.string().nullable(),
  external_volume: z.string().nullable(),
  internal_35_bays: z.number().int().nullable(),
});

export type Case = z.infer<typeof CaseSchema>;

/////////////////////////////////////////
// PSU SCHEMA
/////////////////////////////////////////

export const PSUSchema = z.object({
  type: PSUTypeSchema,
  efficiency: PSUEffSchema,
  modular: PSUModulSchema,
  id: z.string().cuid(),
  name: z.string(),
  imageUrl: z.string().nullable(),
  amazonLink: z.string().nullable(),
  wattage: z.number().int().nullable(),
  color: z.string().nullable(),
});

export type PSU = z.infer<typeof PSUSchema>;

/////////////////////////////////////////
// SETUP SCHEMA
/////////////////////////////////////////

export const SetupSchema = z.object({
  id: z.string().cuid(),
  cpu_id: z.string(),
  gpu_id: z.string(),
  hdd_id: z.string(),
  case_id: z.string(),
  psu_id: z.string(),
  ram_id: z.string(),
  name: z.string().nullable(),
  sound_card_id: z.string(),
  cpu_cooler_id: z.string(),
  motherboard_id: z.string(),
  headphones_id: z.string(),
  keyboard_id: z.string(),
  mouse_id: z.string(),
  webcam_id: z.string(),
  user_id: z.string(),
});

export type Setup = z.infer<typeof SetupSchema>;

/////////////////////////////////////////
// SSD OF SETUP SCHEMA
/////////////////////////////////////////

export const SSDOfSetupSchema = z.object({
  ssd_id: z.string(),
  setup_id: z.string(),
});

export type SSDOfSetup = z.infer<typeof SSDOfSetupSchema>;

/////////////////////////////////////////
// CASE FAN OF SETUP SCHEMA
/////////////////////////////////////////

export const CaseFanOfSetupSchema = z.object({
  case_fan_id: z.string(),
  setup_id: z.string(),
  quantity: z.number().int(),
});

export type CaseFanOfSetup = z.infer<typeof CaseFanOfSetupSchema>;

/////////////////////////////////////////
// SPEAKERS OF SETUP SCHEMA
/////////////////////////////////////////

export const SpeakersOfSetupSchema = z.object({
  speakers_id: z.string(),
  setup_id: z.string(),
  quantity: z.number().int(),
});

export type SpeakersOfSetup = z.infer<typeof SpeakersOfSetupSchema>;

/////////////////////////////////////////
// MONITORS OF SETUP SCHEMA
/////////////////////////////////////////

export const MonitorsOfSetupSchema = z.object({
  monitor_id: z.string(),
  setup_id: z.string(),
  quantity: z.number().int(),
});

export type MonitorsOfSetup = z.infer<typeof MonitorsOfSetupSchema>;

/////////////////////////////////////////
// MONITOR SCHEMA
/////////////////////////////////////////

export const MonitorSchema = z.object({
  panel_type: MonitorPanelTypeSchema,
  id: z.string().cuid(),
  screen_size: z.number().int().nullable(),
  resolution: z.number().int().array(),
  amazonLink: z.string().nullable(),
  name: z.string(),
  imageUrl: z.string().nullable(),
  refresh_rate: z.number().int().nullable(),
  response_time: z.number().int().nullable(),
  aspect_ratio: z.string().nullable(),
});

export type Monitor = z.infer<typeof MonitorSchema>;

/////////////////////////////////////////
// SOUND CARD SCHEMA
/////////////////////////////////////////

export const SoundCardSchema = z.object({
  id: z.string().cuid(),
  channels: z.string().nullable(),
  digital_audio: z.string().nullable(),
  name: z.string(),
  imageUrl: z.string().nullable(),
  amazonLink: z.string().nullable(),
  snr: z.number().int().nullable(),
  sample_rate: z.number().int().nullable(),
  chipset: z.string().nullable(),
  interface: z.string().nullable(),
});

export type SoundCard = z.infer<typeof SoundCardSchema>;

/////////////////////////////////////////
// HEADPHONES SCHEMA
/////////////////////////////////////////

export const HeadphonesSchema = z.object({
  type: HeadphoneTypesSchema,
  enclosure_type: EnclosureTypeSchema,
  id: z.string().cuid(),
  frequency_response: z.number().int().array(),
  microphone: z.boolean().nullable(),
  wireless: z.boolean().nullable(),
  amazonLink: z.string().nullable(),
  name: z.string(),
  imageUrl: z.string().nullable(),
  noise_cancellation: z.boolean().nullable(),
  color: z.string().nullable(),
});

export type Headphones = z.infer<typeof HeadphonesSchema>;

/////////////////////////////////////////
// KEYBOARD SCHEMA
/////////////////////////////////////////

export const KeyboardSchema = z.object({
  style: KeyboardStyleSchema,
  connection_type: ConnectionTypeSchema,
  id: z.string().cuid(),
  switches: z.string().nullable(),
  backlit: z.string().nullable(),
  name: z.string(),
  amazonLink: z.string().nullable(),
  imageUrl: z.string().nullable(),
  tenkeyless: z.boolean().nullable(),
  color: z.string().nullable(),
});

export type Keyboard = z.infer<typeof KeyboardSchema>;

/////////////////////////////////////////
// MOUSE SCHEMA
/////////////////////////////////////////

export const MouseSchema = z.object({
  tracking_method: MouseTrackMethodSchema,
  connection_type: ConnectionTypeSchema,
  hand_orientation: MouseOrientationSchema,
  id: z.string().cuid(),
  max_dpi: z.number().int().nullable(),
  amazonLink: z.string().nullable(),
  name: z.string(),
  imageUrl: z.string().nullable(),
  color: z.string().nullable(),
});

export type Mouse = z.infer<typeof MouseSchema>;

/////////////////////////////////////////
// SPEAKERS SCHEMA
/////////////////////////////////////////

export const SpeakersSchema = z.object({
  id: z.string().cuid(),
  configuration: z.string().nullable(),
  name: z.string(),
  imageUrl: z.string().nullable(),
  wattage: z.number().int().nullable(),
  frequency_response: z.number().int().nullable(),
  amazonLink: z.string().nullable(),
  color: z.string().nullable(),
});

export type Speakers = z.infer<typeof SpeakersSchema>;

/////////////////////////////////////////
// WEBCAM SCHEMA
/////////////////////////////////////////

export const WebcamSchema = z.object({
  connection: ConnectionTypeSchema,
  focus_type: FocusTypeSchema,
  id: z.string().cuid(),
  resolutions: z.string().array(),
  name: z.string(),
  imageUrl: z.string().nullable(),
  os: z.string().array(),
  amazonLink: z.string().nullable(),
  fov: z.number().int().nullable(),
});

export type Webcam = z.infer<typeof WebcamSchema>;

/////////////////////////////////////////
// CASE FAN SCHEMA
/////////////////////////////////////////

export const CaseFanSchema = z.object({
  id: z.string().cuid(),
  size: z.number().int(),
  name: z.string(),
  imageUrl: z.string().nullable(),
  color: z.string().nullable(),
  amazonLink: z.string().nullable(),
  rpm: z.number().int().array(),
  airflow: z.number().int().array(),
});

export type CaseFan = z.infer<typeof CaseFanSchema>;

/////////////////////////////////////////
// SELECT & INCLUDE
/////////////////////////////////////////

// ACCOUNT
//------------------------------------------------------

export const AccountIncludeSchema: z.ZodType<Prisma.AccountInclude> = z
  .object({
    user: z.union([z.boolean(), z.lazy(() => UserArgsSchema)]).optional(),
  })
  .strict();

export const AccountArgsSchema: z.ZodType<Prisma.AccountDefaultArgs> = z
  .object({
    select: z.lazy(() => AccountSelectSchema).optional(),
    include: z.lazy(() => AccountIncludeSchema).optional(),
  })
  .strict();

export const AccountSelectSchema: z.ZodType<Prisma.AccountSelect> = z
  .object({
    id: z.boolean().optional(),
    userId: z.boolean().optional(),
    type: z.boolean().optional(),
    provider: z.boolean().optional(),
    providerAccountId: z.boolean().optional(),
    refresh_token: z.boolean().optional(),
    access_token: z.boolean().optional(),
    expires_at: z.boolean().optional(),
    token_type: z.boolean().optional(),
    scope: z.boolean().optional(),
    id_token: z.boolean().optional(),
    session_state: z.boolean().optional(),
    user: z.union([z.boolean(), z.lazy(() => UserArgsSchema)]).optional(),
  })
  .strict();

// SESSION
//------------------------------------------------------

export const SessionIncludeSchema: z.ZodType<Prisma.SessionInclude> = z
  .object({
    user: z.union([z.boolean(), z.lazy(() => UserArgsSchema)]).optional(),
  })
  .strict();

export const SessionArgsSchema: z.ZodType<Prisma.SessionDefaultArgs> = z
  .object({
    select: z.lazy(() => SessionSelectSchema).optional(),
    include: z.lazy(() => SessionIncludeSchema).optional(),
  })
  .strict();

export const SessionSelectSchema: z.ZodType<Prisma.SessionSelect> = z
  .object({
    id: z.boolean().optional(),
    sessionToken: z.boolean().optional(),
    userId: z.boolean().optional(),
    expires: z.boolean().optional(),
    user: z.union([z.boolean(), z.lazy(() => UserArgsSchema)]).optional(),
  })
  .strict();

// USER
//------------------------------------------------------

export const UserIncludeSchema: z.ZodType<Prisma.UserInclude> = z
  .object({
    setups: z
      .union([z.boolean(), z.lazy(() => SetupFindManyArgsSchema)])
      .optional(),
    accounts: z
      .union([z.boolean(), z.lazy(() => AccountFindManyArgsSchema)])
      .optional(),
    sessions: z
      .union([z.boolean(), z.lazy(() => SessionFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => UserCountOutputTypeArgsSchema)])
      .optional(),
  })
  .strict();

export const UserArgsSchema: z.ZodType<Prisma.UserDefaultArgs> = z
  .object({
    select: z.lazy(() => UserSelectSchema).optional(),
    include: z.lazy(() => UserIncludeSchema).optional(),
  })
  .strict();

export const UserCountOutputTypeArgsSchema: z.ZodType<Prisma.UserCountOutputTypeDefaultArgs> =
  z
    .object({
      select: z.lazy(() => UserCountOutputTypeSelectSchema).nullish(),
    })
    .strict();

export const UserCountOutputTypeSelectSchema: z.ZodType<Prisma.UserCountOutputTypeSelect> =
  z
    .object({
      setups: z.boolean().optional(),
      accounts: z.boolean().optional(),
      sessions: z.boolean().optional(),
    })
    .strict();

export const UserSelectSchema: z.ZodType<Prisma.UserSelect> = z
  .object({
    id: z.boolean().optional(),
    name: z.boolean().optional(),
    email: z.boolean().optional(),
    emailVerified: z.boolean().optional(),
    image: z.boolean().optional(),
    role: z.boolean().optional(),
    setups: z
      .union([z.boolean(), z.lazy(() => SetupFindManyArgsSchema)])
      .optional(),
    accounts: z
      .union([z.boolean(), z.lazy(() => AccountFindManyArgsSchema)])
      .optional(),
    sessions: z
      .union([z.boolean(), z.lazy(() => SessionFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => UserCountOutputTypeArgsSchema)])
      .optional(),
  })
  .strict();

// VERIFICATION TOKEN
//------------------------------------------------------

export const VerificationTokenSelectSchema: z.ZodType<Prisma.VerificationTokenSelect> =
  z
    .object({
      identifier: z.boolean().optional(),
      token: z.boolean().optional(),
      expires: z.boolean().optional(),
    })
    .strict();

// CPU COOLER
//------------------------------------------------------

export const CPUCoolerIncludeSchema: z.ZodType<Prisma.CPUCoolerInclude> = z
  .object({
    setups: z
      .union([z.boolean(), z.lazy(() => SetupFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => CPUCoolerCountOutputTypeArgsSchema)])
      .optional(),
  })
  .strict();

export const CPUCoolerArgsSchema: z.ZodType<Prisma.CPUCoolerDefaultArgs> = z
  .object({
    select: z.lazy(() => CPUCoolerSelectSchema).optional(),
    include: z.lazy(() => CPUCoolerIncludeSchema).optional(),
  })
  .strict();

export const CPUCoolerCountOutputTypeArgsSchema: z.ZodType<Prisma.CPUCoolerCountOutputTypeDefaultArgs> =
  z
    .object({
      select: z.lazy(() => CPUCoolerCountOutputTypeSelectSchema).nullish(),
    })
    .strict();

export const CPUCoolerCountOutputTypeSelectSchema: z.ZodType<Prisma.CPUCoolerCountOutputTypeSelect> =
  z
    .object({
      setups: z.boolean().optional(),
    })
    .strict();

export const CPUCoolerSelectSchema: z.ZodType<Prisma.CPUCoolerSelect> = z
  .object({
    id: z.boolean().optional(),
    rpm: z.boolean().optional(),
    name: z.boolean().optional(),
    imageUrl: z.boolean().optional(),
    amazonLink: z.boolean().optional(),
    noise_level: z.boolean().optional(),
    color: z.boolean().optional(),
    size: z.boolean().optional(),
    setups: z
      .union([z.boolean(), z.lazy(() => SetupFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => CPUCoolerCountOutputTypeArgsSchema)])
      .optional(),
  })
  .strict();

// MOTHERBOARD
//------------------------------------------------------

export const MotherboardIncludeSchema: z.ZodType<Prisma.MotherboardInclude> = z
  .object({
    setups: z
      .union([z.boolean(), z.lazy(() => SetupFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => MotherboardCountOutputTypeArgsSchema)])
      .optional(),
  })
  .strict();

export const MotherboardArgsSchema: z.ZodType<Prisma.MotherboardDefaultArgs> = z
  .object({
    select: z.lazy(() => MotherboardSelectSchema).optional(),
    include: z.lazy(() => MotherboardIncludeSchema).optional(),
  })
  .strict();

export const MotherboardCountOutputTypeArgsSchema: z.ZodType<Prisma.MotherboardCountOutputTypeDefaultArgs> =
  z
    .object({
      select: z.lazy(() => MotherboardCountOutputTypeSelectSchema).nullish(),
    })
    .strict();

export const MotherboardCountOutputTypeSelectSchema: z.ZodType<Prisma.MotherboardCountOutputTypeSelect> =
  z
    .object({
      setups: z.boolean().optional(),
    })
    .strict();

export const MotherboardSelectSchema: z.ZodType<Prisma.MotherboardSelect> = z
  .object({
    id: z.boolean().optional(),
    socket: z.boolean().optional(),
    form_factor: z.boolean().optional(),
    max_memory: z.boolean().optional(),
    memory_slots: z.boolean().optional(),
    name: z.boolean().optional(),
    imageUrl: z.boolean().optional(),
    amazonLink: z.boolean().optional(),
    color: z.boolean().optional(),
    setups: z
      .union([z.boolean(), z.lazy(() => SetupFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => MotherboardCountOutputTypeArgsSchema)])
      .optional(),
  })
  .strict();

// RAM
//------------------------------------------------------

export const RAMIncludeSchema: z.ZodType<Prisma.RAMInclude> = z
  .object({
    setups: z
      .union([z.boolean(), z.lazy(() => SetupFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => RAMCountOutputTypeArgsSchema)])
      .optional(),
  })
  .strict();

export const RAMArgsSchema: z.ZodType<Prisma.RAMDefaultArgs> = z
  .object({
    select: z.lazy(() => RAMSelectSchema).optional(),
    include: z.lazy(() => RAMIncludeSchema).optional(),
  })
  .strict();

export const RAMCountOutputTypeArgsSchema: z.ZodType<Prisma.RAMCountOutputTypeDefaultArgs> =
  z
    .object({
      select: z.lazy(() => RAMCountOutputTypeSelectSchema).nullish(),
    })
    .strict();

export const RAMCountOutputTypeSelectSchema: z.ZodType<Prisma.RAMCountOutputTypeSelect> =
  z
    .object({
      setups: z.boolean().optional(),
    })
    .strict();

export const RAMSelectSchema: z.ZodType<Prisma.RAMSelect> = z
  .object({
    id: z.boolean().optional(),
    speed: z.boolean().optional(),
    modules: z.boolean().optional(),
    price_per_gb: z.boolean().optional(),
    color: z.boolean().optional(),
    imageUrl: z.boolean().optional(),
    amazonLink: z.boolean().optional(),
    name: z.boolean().optional(),
    first_word_latency: z.boolean().optional(),
    cas_latency: z.boolean().optional(),
    setups: z
      .union([z.boolean(), z.lazy(() => SetupFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => RAMCountOutputTypeArgsSchema)])
      .optional(),
  })
  .strict();

// CPU
//------------------------------------------------------

export const CPUIncludeSchema: z.ZodType<Prisma.CPUInclude> = z
  .object({
    setups: z
      .union([z.boolean(), z.lazy(() => SetupFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => CPUCountOutputTypeArgsSchema)])
      .optional(),
  })
  .strict();

export const CPUArgsSchema: z.ZodType<Prisma.CPUDefaultArgs> = z
  .object({
    select: z.lazy(() => CPUSelectSchema).optional(),
    include: z.lazy(() => CPUIncludeSchema).optional(),
  })
  .strict();

export const CPUCountOutputTypeArgsSchema: z.ZodType<Prisma.CPUCountOutputTypeDefaultArgs> =
  z
    .object({
      select: z.lazy(() => CPUCountOutputTypeSelectSchema).nullish(),
    })
    .strict();

export const CPUCountOutputTypeSelectSchema: z.ZodType<Prisma.CPUCountOutputTypeSelect> =
  z
    .object({
      setups: z.boolean().optional(),
    })
    .strict();

export const CPUSelectSchema: z.ZodType<Prisma.CPUSelect> = z
  .object({
    id: z.boolean().optional(),
    core_count: z.boolean().optional(),
    threads_count: z.boolean().optional(),
    name: z.boolean().optional(),
    imageUrl: z.boolean().optional(),
    core_clock: z.boolean().optional(),
    boost_clock: z.boolean().optional(),
    amazonLink: z.boolean().optional(),
    tdp: z.boolean().optional(),
    graphics: z.boolean().optional(),
    smt: z.boolean().optional(),
    setups: z
      .union([z.boolean(), z.lazy(() => SetupFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => CPUCountOutputTypeArgsSchema)])
      .optional(),
  })
  .strict();

// HDD
//------------------------------------------------------

export const HDDIncludeSchema: z.ZodType<Prisma.HDDInclude> = z
  .object({
    setups: z
      .union([z.boolean(), z.lazy(() => SetupFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => HDDCountOutputTypeArgsSchema)])
      .optional(),
  })
  .strict();

export const HDDArgsSchema: z.ZodType<Prisma.HDDDefaultArgs> = z
  .object({
    select: z.lazy(() => HDDSelectSchema).optional(),
    include: z.lazy(() => HDDIncludeSchema).optional(),
  })
  .strict();

export const HDDCountOutputTypeArgsSchema: z.ZodType<Prisma.HDDCountOutputTypeDefaultArgs> =
  z
    .object({
      select: z.lazy(() => HDDCountOutputTypeSelectSchema).nullish(),
    })
    .strict();

export const HDDCountOutputTypeSelectSchema: z.ZodType<Prisma.HDDCountOutputTypeSelect> =
  z
    .object({
      setups: z.boolean().optional(),
    })
    .strict();

export const HDDSelectSchema: z.ZodType<Prisma.HDDSelect> = z
  .object({
    id: z.boolean().optional(),
    capacity: z.boolean().optional(),
    price_per_gb: z.boolean().optional(),
    amazonLink: z.boolean().optional(),
    name: z.boolean().optional(),
    imageUrl: z.boolean().optional(),
    type: z.boolean().optional(),
    cache: z.boolean().optional(),
    form_factor: z.boolean().optional(),
    interface: z.boolean().optional(),
    setups: z
      .union([z.boolean(), z.lazy(() => SetupFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => HDDCountOutputTypeArgsSchema)])
      .optional(),
  })
  .strict();

// SSD
//------------------------------------------------------

export const SSDIncludeSchema: z.ZodType<Prisma.SSDInclude> = z
  .object({
    setups: z
      .union([z.boolean(), z.lazy(() => SSDOfSetupFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => SSDCountOutputTypeArgsSchema)])
      .optional(),
  })
  .strict();

export const SSDArgsSchema: z.ZodType<Prisma.SSDDefaultArgs> = z
  .object({
    select: z.lazy(() => SSDSelectSchema).optional(),
    include: z.lazy(() => SSDIncludeSchema).optional(),
  })
  .strict();

export const SSDCountOutputTypeArgsSchema: z.ZodType<Prisma.SSDCountOutputTypeDefaultArgs> =
  z
    .object({
      select: z.lazy(() => SSDCountOutputTypeSelectSchema).nullish(),
    })
    .strict();

export const SSDCountOutputTypeSelectSchema: z.ZodType<Prisma.SSDCountOutputTypeSelect> =
  z
    .object({
      setups: z.boolean().optional(),
    })
    .strict();

export const SSDSelectSchema: z.ZodType<Prisma.SSDSelect> = z
  .object({
    id: z.boolean().optional(),
    capacity: z.boolean().optional(),
    price_per_gb: z.boolean().optional(),
    name: z.boolean().optional(),
    imageUrl: z.boolean().optional(),
    amazonLink: z.boolean().optional(),
    type: z.boolean().optional(),
    cache: z.boolean().optional(),
    form_factor: z.boolean().optional(),
    interface: z.boolean().optional(),
    setups: z
      .union([z.boolean(), z.lazy(() => SSDOfSetupFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => SSDCountOutputTypeArgsSchema)])
      .optional(),
  })
  .strict();

// GPU
//------------------------------------------------------

export const GPUIncludeSchema: z.ZodType<Prisma.GPUInclude> = z
  .object({
    setups: z
      .union([z.boolean(), z.lazy(() => SetupFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => GPUCountOutputTypeArgsSchema)])
      .optional(),
  })
  .strict();

export const GPUArgsSchema: z.ZodType<Prisma.GPUDefaultArgs> = z
  .object({
    select: z.lazy(() => GPUSelectSchema).optional(),
    include: z.lazy(() => GPUIncludeSchema).optional(),
  })
  .strict();

export const GPUCountOutputTypeArgsSchema: z.ZodType<Prisma.GPUCountOutputTypeDefaultArgs> =
  z
    .object({
      select: z.lazy(() => GPUCountOutputTypeSelectSchema).nullish(),
    })
    .strict();

export const GPUCountOutputTypeSelectSchema: z.ZodType<Prisma.GPUCountOutputTypeSelect> =
  z
    .object({
      setups: z.boolean().optional(),
    })
    .strict();

export const GPUSelectSchema: z.ZodType<Prisma.GPUSelect> = z
  .object({
    id: z.boolean().optional(),
    chipset: z.boolean().optional(),
    memory: z.boolean().optional(),
    name: z.boolean().optional(),
    imageUrl: z.boolean().optional(),
    amazonLink: z.boolean().optional(),
    core_clock: z.boolean().optional(),
    boost_clock: z.boolean().optional(),
    color: z.boolean().optional(),
    length: z.boolean().optional(),
    setups: z
      .union([z.boolean(), z.lazy(() => SetupFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => GPUCountOutputTypeArgsSchema)])
      .optional(),
  })
  .strict();

// CASE
//------------------------------------------------------

export const CaseIncludeSchema: z.ZodType<Prisma.CaseInclude> = z
  .object({
    setups: z
      .union([z.boolean(), z.lazy(() => SetupFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => CaseCountOutputTypeArgsSchema)])
      .optional(),
  })
  .strict();

export const CaseArgsSchema: z.ZodType<Prisma.CaseDefaultArgs> = z
  .object({
    select: z.lazy(() => CaseSelectSchema).optional(),
    include: z.lazy(() => CaseIncludeSchema).optional(),
  })
  .strict();

export const CaseCountOutputTypeArgsSchema: z.ZodType<Prisma.CaseCountOutputTypeDefaultArgs> =
  z
    .object({
      select: z.lazy(() => CaseCountOutputTypeSelectSchema).nullish(),
    })
    .strict();

export const CaseCountOutputTypeSelectSchema: z.ZodType<Prisma.CaseCountOutputTypeSelect> =
  z
    .object({
      setups: z.boolean().optional(),
    })
    .strict();

export const CaseSelectSchema: z.ZodType<Prisma.CaseSelect> = z
  .object({
    id: z.boolean().optional(),
    type: z.boolean().optional(),
    color: z.boolean().optional(),
    name: z.boolean().optional(),
    imageUrl: z.boolean().optional(),
    included_PSU_W: z.boolean().optional(),
    amazonLink: z.boolean().optional(),
    side_panel: z.boolean().optional(),
    external_volume: z.boolean().optional(),
    internal_35_bays: z.boolean().optional(),
    setups: z
      .union([z.boolean(), z.lazy(() => SetupFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => CaseCountOutputTypeArgsSchema)])
      .optional(),
  })
  .strict();

// PSU
//------------------------------------------------------

export const PSUIncludeSchema: z.ZodType<Prisma.PSUInclude> = z
  .object({
    setups: z
      .union([z.boolean(), z.lazy(() => SetupFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => PSUCountOutputTypeArgsSchema)])
      .optional(),
  })
  .strict();

export const PSUArgsSchema: z.ZodType<Prisma.PSUDefaultArgs> = z
  .object({
    select: z.lazy(() => PSUSelectSchema).optional(),
    include: z.lazy(() => PSUIncludeSchema).optional(),
  })
  .strict();

export const PSUCountOutputTypeArgsSchema: z.ZodType<Prisma.PSUCountOutputTypeDefaultArgs> =
  z
    .object({
      select: z.lazy(() => PSUCountOutputTypeSelectSchema).nullish(),
    })
    .strict();

export const PSUCountOutputTypeSelectSchema: z.ZodType<Prisma.PSUCountOutputTypeSelect> =
  z
    .object({
      setups: z.boolean().optional(),
    })
    .strict();

export const PSUSelectSchema: z.ZodType<Prisma.PSUSelect> = z
  .object({
    id: z.boolean().optional(),
    type: z.boolean().optional(),
    name: z.boolean().optional(),
    imageUrl: z.boolean().optional(),
    efficiency: z.boolean().optional(),
    amazonLink: z.boolean().optional(),
    wattage: z.boolean().optional(),
    modular: z.boolean().optional(),
    color: z.boolean().optional(),
    setups: z
      .union([z.boolean(), z.lazy(() => SetupFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => PSUCountOutputTypeArgsSchema)])
      .optional(),
  })
  .strict();

// SETUP
//------------------------------------------------------

export const SetupIncludeSchema: z.ZodType<Prisma.SetupInclude> = z
  .object({
    cpu: z.union([z.boolean(), z.lazy(() => CPUArgsSchema)]).optional(),
    gpu: z.union([z.boolean(), z.lazy(() => GPUArgsSchema)]).optional(),
    hdd: z.union([z.boolean(), z.lazy(() => HDDArgsSchema)]).optional(),
    case: z.union([z.boolean(), z.lazy(() => CaseArgsSchema)]).optional(),
    ram: z.union([z.boolean(), z.lazy(() => RAMArgsSchema)]).optional(),
    psu: z.union([z.boolean(), z.lazy(() => PSUArgsSchema)]).optional(),
    monitors: z
      .union([z.boolean(), z.lazy(() => MonitorsOfSetupFindManyArgsSchema)])
      .optional(),
    sdds: z
      .union([z.boolean(), z.lazy(() => SSDOfSetupFindManyArgsSchema)])
      .optional(),
    sound_card: z
      .union([z.boolean(), z.lazy(() => SoundCardArgsSchema)])
      .optional(),
    cpu_cooler: z
      .union([z.boolean(), z.lazy(() => CPUCoolerArgsSchema)])
      .optional(),
    motherboard: z
      .union([z.boolean(), z.lazy(() => MotherboardArgsSchema)])
      .optional(),
    headphones: z
      .union([z.boolean(), z.lazy(() => HeadphonesArgsSchema)])
      .optional(),
    keyboard: z
      .union([z.boolean(), z.lazy(() => KeyboardArgsSchema)])
      .optional(),
    mouse: z.union([z.boolean(), z.lazy(() => MouseArgsSchema)]).optional(),
    speakers: z
      .union([z.boolean(), z.lazy(() => SpeakersOfSetupFindManyArgsSchema)])
      .optional(),
    webcam: z.union([z.boolean(), z.lazy(() => WebcamArgsSchema)]).optional(),
    case_fans: z
      .union([z.boolean(), z.lazy(() => CaseFanOfSetupFindManyArgsSchema)])
      .optional(),
    user: z.union([z.boolean(), z.lazy(() => UserArgsSchema)]).optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => SetupCountOutputTypeArgsSchema)])
      .optional(),
  })
  .strict();

export const SetupArgsSchema: z.ZodType<Prisma.SetupDefaultArgs> = z
  .object({
    select: z.lazy(() => SetupSelectSchema).optional(),
    include: z.lazy(() => SetupIncludeSchema).optional(),
  })
  .strict();

export const SetupCountOutputTypeArgsSchema: z.ZodType<Prisma.SetupCountOutputTypeDefaultArgs> =
  z
    .object({
      select: z.lazy(() => SetupCountOutputTypeSelectSchema).nullish(),
    })
    .strict();

export const SetupCountOutputTypeSelectSchema: z.ZodType<Prisma.SetupCountOutputTypeSelect> =
  z
    .object({
      monitors: z.boolean().optional(),
      sdds: z.boolean().optional(),
      speakers: z.boolean().optional(),
      case_fans: z.boolean().optional(),
    })
    .strict();

export const SetupSelectSchema: z.ZodType<Prisma.SetupSelect> = z
  .object({
    id: z.boolean().optional(),
    cpu_id: z.boolean().optional(),
    gpu_id: z.boolean().optional(),
    hdd_id: z.boolean().optional(),
    case_id: z.boolean().optional(),
    psu_id: z.boolean().optional(),
    ram_id: z.boolean().optional(),
    name: z.boolean().optional(),
    sound_card_id: z.boolean().optional(),
    cpu_cooler_id: z.boolean().optional(),
    motherboard_id: z.boolean().optional(),
    headphones_id: z.boolean().optional(),
    keyboard_id: z.boolean().optional(),
    mouse_id: z.boolean().optional(),
    webcam_id: z.boolean().optional(),
    user_id: z.boolean().optional(),
    cpu: z.union([z.boolean(), z.lazy(() => CPUArgsSchema)]).optional(),
    gpu: z.union([z.boolean(), z.lazy(() => GPUArgsSchema)]).optional(),
    hdd: z.union([z.boolean(), z.lazy(() => HDDArgsSchema)]).optional(),
    case: z.union([z.boolean(), z.lazy(() => CaseArgsSchema)]).optional(),
    ram: z.union([z.boolean(), z.lazy(() => RAMArgsSchema)]).optional(),
    psu: z.union([z.boolean(), z.lazy(() => PSUArgsSchema)]).optional(),
    monitors: z
      .union([z.boolean(), z.lazy(() => MonitorsOfSetupFindManyArgsSchema)])
      .optional(),
    sdds: z
      .union([z.boolean(), z.lazy(() => SSDOfSetupFindManyArgsSchema)])
      .optional(),
    sound_card: z
      .union([z.boolean(), z.lazy(() => SoundCardArgsSchema)])
      .optional(),
    cpu_cooler: z
      .union([z.boolean(), z.lazy(() => CPUCoolerArgsSchema)])
      .optional(),
    motherboard: z
      .union([z.boolean(), z.lazy(() => MotherboardArgsSchema)])
      .optional(),
    headphones: z
      .union([z.boolean(), z.lazy(() => HeadphonesArgsSchema)])
      .optional(),
    keyboard: z
      .union([z.boolean(), z.lazy(() => KeyboardArgsSchema)])
      .optional(),
    mouse: z.union([z.boolean(), z.lazy(() => MouseArgsSchema)]).optional(),
    speakers: z
      .union([z.boolean(), z.lazy(() => SpeakersOfSetupFindManyArgsSchema)])
      .optional(),
    webcam: z.union([z.boolean(), z.lazy(() => WebcamArgsSchema)]).optional(),
    case_fans: z
      .union([z.boolean(), z.lazy(() => CaseFanOfSetupFindManyArgsSchema)])
      .optional(),
    user: z.union([z.boolean(), z.lazy(() => UserArgsSchema)]).optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => SetupCountOutputTypeArgsSchema)])
      .optional(),
  })
  .strict();

// SSD OF SETUP
//------------------------------------------------------

export const SSDOfSetupIncludeSchema: z.ZodType<Prisma.SSDOfSetupInclude> = z
  .object({
    ssd: z.union([z.boolean(), z.lazy(() => SSDArgsSchema)]).optional(),
    setup: z.union([z.boolean(), z.lazy(() => SetupArgsSchema)]).optional(),
  })
  .strict();

export const SSDOfSetupArgsSchema: z.ZodType<Prisma.SSDOfSetupDefaultArgs> = z
  .object({
    select: z.lazy(() => SSDOfSetupSelectSchema).optional(),
    include: z.lazy(() => SSDOfSetupIncludeSchema).optional(),
  })
  .strict();

export const SSDOfSetupSelectSchema: z.ZodType<Prisma.SSDOfSetupSelect> = z
  .object({
    ssd_id: z.boolean().optional(),
    setup_id: z.boolean().optional(),
    ssd: z.union([z.boolean(), z.lazy(() => SSDArgsSchema)]).optional(),
    setup: z.union([z.boolean(), z.lazy(() => SetupArgsSchema)]).optional(),
  })
  .strict();

// CASE FAN OF SETUP
//------------------------------------------------------

export const CaseFanOfSetupIncludeSchema: z.ZodType<Prisma.CaseFanOfSetupInclude> =
  z
    .object({
      case_fan: z
        .union([z.boolean(), z.lazy(() => CaseFanArgsSchema)])
        .optional(),
      setup: z.union([z.boolean(), z.lazy(() => SetupArgsSchema)]).optional(),
    })
    .strict();

export const CaseFanOfSetupArgsSchema: z.ZodType<Prisma.CaseFanOfSetupDefaultArgs> =
  z
    .object({
      select: z.lazy(() => CaseFanOfSetupSelectSchema).optional(),
      include: z.lazy(() => CaseFanOfSetupIncludeSchema).optional(),
    })
    .strict();

export const CaseFanOfSetupSelectSchema: z.ZodType<Prisma.CaseFanOfSetupSelect> =
  z
    .object({
      case_fan_id: z.boolean().optional(),
      setup_id: z.boolean().optional(),
      quantity: z.boolean().optional(),
      case_fan: z
        .union([z.boolean(), z.lazy(() => CaseFanArgsSchema)])
        .optional(),
      setup: z.union([z.boolean(), z.lazy(() => SetupArgsSchema)]).optional(),
    })
    .strict();

// SPEAKERS OF SETUP
//------------------------------------------------------

export const SpeakersOfSetupIncludeSchema: z.ZodType<Prisma.SpeakersOfSetupInclude> =
  z
    .object({
      speakers: z
        .union([z.boolean(), z.lazy(() => SpeakersArgsSchema)])
        .optional(),
      setup: z.union([z.boolean(), z.lazy(() => SetupArgsSchema)]).optional(),
    })
    .strict();

export const SpeakersOfSetupArgsSchema: z.ZodType<Prisma.SpeakersOfSetupDefaultArgs> =
  z
    .object({
      select: z.lazy(() => SpeakersOfSetupSelectSchema).optional(),
      include: z.lazy(() => SpeakersOfSetupIncludeSchema).optional(),
    })
    .strict();

export const SpeakersOfSetupSelectSchema: z.ZodType<Prisma.SpeakersOfSetupSelect> =
  z
    .object({
      speakers_id: z.boolean().optional(),
      setup_id: z.boolean().optional(),
      quantity: z.boolean().optional(),
      speakers: z
        .union([z.boolean(), z.lazy(() => SpeakersArgsSchema)])
        .optional(),
      setup: z.union([z.boolean(), z.lazy(() => SetupArgsSchema)]).optional(),
    })
    .strict();

// MONITORS OF SETUP
//------------------------------------------------------

export const MonitorsOfSetupIncludeSchema: z.ZodType<Prisma.MonitorsOfSetupInclude> =
  z
    .object({
      monitor: z
        .union([z.boolean(), z.lazy(() => MonitorArgsSchema)])
        .optional(),
      setup: z.union([z.boolean(), z.lazy(() => SetupArgsSchema)]).optional(),
    })
    .strict();

export const MonitorsOfSetupArgsSchema: z.ZodType<Prisma.MonitorsOfSetupDefaultArgs> =
  z
    .object({
      select: z.lazy(() => MonitorsOfSetupSelectSchema).optional(),
      include: z.lazy(() => MonitorsOfSetupIncludeSchema).optional(),
    })
    .strict();

export const MonitorsOfSetupSelectSchema: z.ZodType<Prisma.MonitorsOfSetupSelect> =
  z
    .object({
      monitor_id: z.boolean().optional(),
      setup_id: z.boolean().optional(),
      quantity: z.boolean().optional(),
      monitor: z
        .union([z.boolean(), z.lazy(() => MonitorArgsSchema)])
        .optional(),
      setup: z.union([z.boolean(), z.lazy(() => SetupArgsSchema)]).optional(),
    })
    .strict();

// MONITOR
//------------------------------------------------------

export const MonitorIncludeSchema: z.ZodType<Prisma.MonitorInclude> = z
  .object({
    setups: z
      .union([z.boolean(), z.lazy(() => MonitorsOfSetupFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => MonitorCountOutputTypeArgsSchema)])
      .optional(),
  })
  .strict();

export const MonitorArgsSchema: z.ZodType<Prisma.MonitorDefaultArgs> = z
  .object({
    select: z.lazy(() => MonitorSelectSchema).optional(),
    include: z.lazy(() => MonitorIncludeSchema).optional(),
  })
  .strict();

export const MonitorCountOutputTypeArgsSchema: z.ZodType<Prisma.MonitorCountOutputTypeDefaultArgs> =
  z
    .object({
      select: z.lazy(() => MonitorCountOutputTypeSelectSchema).nullish(),
    })
    .strict();

export const MonitorCountOutputTypeSelectSchema: z.ZodType<Prisma.MonitorCountOutputTypeSelect> =
  z
    .object({
      setups: z.boolean().optional(),
    })
    .strict();

export const MonitorSelectSchema: z.ZodType<Prisma.MonitorSelect> = z
  .object({
    id: z.boolean().optional(),
    screen_size: z.boolean().optional(),
    resolution: z.boolean().optional(),
    amazonLink: z.boolean().optional(),
    name: z.boolean().optional(),
    imageUrl: z.boolean().optional(),
    refresh_rate: z.boolean().optional(),
    response_time: z.boolean().optional(),
    panel_type: z.boolean().optional(),
    aspect_ratio: z.boolean().optional(),
    setups: z
      .union([z.boolean(), z.lazy(() => MonitorsOfSetupFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => MonitorCountOutputTypeArgsSchema)])
      .optional(),
  })
  .strict();

// SOUND CARD
//------------------------------------------------------

export const SoundCardIncludeSchema: z.ZodType<Prisma.SoundCardInclude> = z
  .object({
    setups: z
      .union([z.boolean(), z.lazy(() => SetupFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => SoundCardCountOutputTypeArgsSchema)])
      .optional(),
  })
  .strict();

export const SoundCardArgsSchema: z.ZodType<Prisma.SoundCardDefaultArgs> = z
  .object({
    select: z.lazy(() => SoundCardSelectSchema).optional(),
    include: z.lazy(() => SoundCardIncludeSchema).optional(),
  })
  .strict();

export const SoundCardCountOutputTypeArgsSchema: z.ZodType<Prisma.SoundCardCountOutputTypeDefaultArgs> =
  z
    .object({
      select: z.lazy(() => SoundCardCountOutputTypeSelectSchema).nullish(),
    })
    .strict();

export const SoundCardCountOutputTypeSelectSchema: z.ZodType<Prisma.SoundCardCountOutputTypeSelect> =
  z
    .object({
      setups: z.boolean().optional(),
    })
    .strict();

export const SoundCardSelectSchema: z.ZodType<Prisma.SoundCardSelect> = z
  .object({
    id: z.boolean().optional(),
    channels: z.boolean().optional(),
    digital_audio: z.boolean().optional(),
    name: z.boolean().optional(),
    imageUrl: z.boolean().optional(),
    amazonLink: z.boolean().optional(),
    snr: z.boolean().optional(),
    sample_rate: z.boolean().optional(),
    chipset: z.boolean().optional(),
    interface: z.boolean().optional(),
    setups: z
      .union([z.boolean(), z.lazy(() => SetupFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => SoundCardCountOutputTypeArgsSchema)])
      .optional(),
  })
  .strict();

// HEADPHONES
//------------------------------------------------------

export const HeadphonesIncludeSchema: z.ZodType<Prisma.HeadphonesInclude> = z
  .object({
    setups: z
      .union([z.boolean(), z.lazy(() => SetupFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => HeadphonesCountOutputTypeArgsSchema)])
      .optional(),
  })
  .strict();

export const HeadphonesArgsSchema: z.ZodType<Prisma.HeadphonesDefaultArgs> = z
  .object({
    select: z.lazy(() => HeadphonesSelectSchema).optional(),
    include: z.lazy(() => HeadphonesIncludeSchema).optional(),
  })
  .strict();

export const HeadphonesCountOutputTypeArgsSchema: z.ZodType<Prisma.HeadphonesCountOutputTypeDefaultArgs> =
  z
    .object({
      select: z.lazy(() => HeadphonesCountOutputTypeSelectSchema).nullish(),
    })
    .strict();

export const HeadphonesCountOutputTypeSelectSchema: z.ZodType<Prisma.HeadphonesCountOutputTypeSelect> =
  z
    .object({
      setups: z.boolean().optional(),
    })
    .strict();

export const HeadphonesSelectSchema: z.ZodType<Prisma.HeadphonesSelect> = z
  .object({
    id: z.boolean().optional(),
    type: z.boolean().optional(),
    frequency_response: z.boolean().optional(),
    microphone: z.boolean().optional(),
    wireless: z.boolean().optional(),
    amazonLink: z.boolean().optional(),
    name: z.boolean().optional(),
    imageUrl: z.boolean().optional(),
    noise_cancellation: z.boolean().optional(),
    enclosure_type: z.boolean().optional(),
    color: z.boolean().optional(),
    setups: z
      .union([z.boolean(), z.lazy(() => SetupFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => HeadphonesCountOutputTypeArgsSchema)])
      .optional(),
  })
  .strict();

// KEYBOARD
//------------------------------------------------------

export const KeyboardIncludeSchema: z.ZodType<Prisma.KeyboardInclude> = z
  .object({
    setups: z
      .union([z.boolean(), z.lazy(() => SetupFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => KeyboardCountOutputTypeArgsSchema)])
      .optional(),
  })
  .strict();

export const KeyboardArgsSchema: z.ZodType<Prisma.KeyboardDefaultArgs> = z
  .object({
    select: z.lazy(() => KeyboardSelectSchema).optional(),
    include: z.lazy(() => KeyboardIncludeSchema).optional(),
  })
  .strict();

export const KeyboardCountOutputTypeArgsSchema: z.ZodType<Prisma.KeyboardCountOutputTypeDefaultArgs> =
  z
    .object({
      select: z.lazy(() => KeyboardCountOutputTypeSelectSchema).nullish(),
    })
    .strict();

export const KeyboardCountOutputTypeSelectSchema: z.ZodType<Prisma.KeyboardCountOutputTypeSelect> =
  z
    .object({
      setups: z.boolean().optional(),
    })
    .strict();

export const KeyboardSelectSchema: z.ZodType<Prisma.KeyboardSelect> = z
  .object({
    id: z.boolean().optional(),
    style: z.boolean().optional(),
    switches: z.boolean().optional(),
    backlit: z.boolean().optional(),
    name: z.boolean().optional(),
    amazonLink: z.boolean().optional(),
    imageUrl: z.boolean().optional(),
    tenkeyless: z.boolean().optional(),
    connection_type: z.boolean().optional(),
    color: z.boolean().optional(),
    setups: z
      .union([z.boolean(), z.lazy(() => SetupFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => KeyboardCountOutputTypeArgsSchema)])
      .optional(),
  })
  .strict();

// MOUSE
//------------------------------------------------------

export const MouseIncludeSchema: z.ZodType<Prisma.MouseInclude> = z
  .object({
    setups: z
      .union([z.boolean(), z.lazy(() => SetupFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => MouseCountOutputTypeArgsSchema)])
      .optional(),
  })
  .strict();

export const MouseArgsSchema: z.ZodType<Prisma.MouseDefaultArgs> = z
  .object({
    select: z.lazy(() => MouseSelectSchema).optional(),
    include: z.lazy(() => MouseIncludeSchema).optional(),
  })
  .strict();

export const MouseCountOutputTypeArgsSchema: z.ZodType<Prisma.MouseCountOutputTypeDefaultArgs> =
  z
    .object({
      select: z.lazy(() => MouseCountOutputTypeSelectSchema).nullish(),
    })
    .strict();

export const MouseCountOutputTypeSelectSchema: z.ZodType<Prisma.MouseCountOutputTypeSelect> =
  z
    .object({
      setups: z.boolean().optional(),
    })
    .strict();

export const MouseSelectSchema: z.ZodType<Prisma.MouseSelect> = z
  .object({
    id: z.boolean().optional(),
    tracking_method: z.boolean().optional(),
    connection_type: z.boolean().optional(),
    max_dpi: z.boolean().optional(),
    amazonLink: z.boolean().optional(),
    name: z.boolean().optional(),
    imageUrl: z.boolean().optional(),
    hand_orientation: z.boolean().optional(),
    color: z.boolean().optional(),
    setups: z
      .union([z.boolean(), z.lazy(() => SetupFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => MouseCountOutputTypeArgsSchema)])
      .optional(),
  })
  .strict();

// SPEAKERS
//------------------------------------------------------

export const SpeakersIncludeSchema: z.ZodType<Prisma.SpeakersInclude> = z
  .object({
    setups: z
      .union([z.boolean(), z.lazy(() => SpeakersOfSetupFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => SpeakersCountOutputTypeArgsSchema)])
      .optional(),
  })
  .strict();

export const SpeakersArgsSchema: z.ZodType<Prisma.SpeakersDefaultArgs> = z
  .object({
    select: z.lazy(() => SpeakersSelectSchema).optional(),
    include: z.lazy(() => SpeakersIncludeSchema).optional(),
  })
  .strict();

export const SpeakersCountOutputTypeArgsSchema: z.ZodType<Prisma.SpeakersCountOutputTypeDefaultArgs> =
  z
    .object({
      select: z.lazy(() => SpeakersCountOutputTypeSelectSchema).nullish(),
    })
    .strict();

export const SpeakersCountOutputTypeSelectSchema: z.ZodType<Prisma.SpeakersCountOutputTypeSelect> =
  z
    .object({
      setups: z.boolean().optional(),
    })
    .strict();

export const SpeakersSelectSchema: z.ZodType<Prisma.SpeakersSelect> = z
  .object({
    id: z.boolean().optional(),
    configuration: z.boolean().optional(),
    name: z.boolean().optional(),
    imageUrl: z.boolean().optional(),
    wattage: z.boolean().optional(),
    frequency_response: z.boolean().optional(),
    amazonLink: z.boolean().optional(),
    color: z.boolean().optional(),
    setups: z
      .union([z.boolean(), z.lazy(() => SpeakersOfSetupFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => SpeakersCountOutputTypeArgsSchema)])
      .optional(),
  })
  .strict();

// WEBCAM
//------------------------------------------------------

export const WebcamIncludeSchema: z.ZodType<Prisma.WebcamInclude> = z
  .object({
    setups: z
      .union([z.boolean(), z.lazy(() => SetupFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => WebcamCountOutputTypeArgsSchema)])
      .optional(),
  })
  .strict();

export const WebcamArgsSchema: z.ZodType<Prisma.WebcamDefaultArgs> = z
  .object({
    select: z.lazy(() => WebcamSelectSchema).optional(),
    include: z.lazy(() => WebcamIncludeSchema).optional(),
  })
  .strict();

export const WebcamCountOutputTypeArgsSchema: z.ZodType<Prisma.WebcamCountOutputTypeDefaultArgs> =
  z
    .object({
      select: z.lazy(() => WebcamCountOutputTypeSelectSchema).nullish(),
    })
    .strict();

export const WebcamCountOutputTypeSelectSchema: z.ZodType<Prisma.WebcamCountOutputTypeSelect> =
  z
    .object({
      setups: z.boolean().optional(),
    })
    .strict();

export const WebcamSelectSchema: z.ZodType<Prisma.WebcamSelect> = z
  .object({
    id: z.boolean().optional(),
    resolutions: z.boolean().optional(),
    name: z.boolean().optional(),
    imageUrl: z.boolean().optional(),
    connection: z.boolean().optional(),
    focus_type: z.boolean().optional(),
    os: z.boolean().optional(),
    amazonLink: z.boolean().optional(),
    fov: z.boolean().optional(),
    setups: z
      .union([z.boolean(), z.lazy(() => SetupFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => WebcamCountOutputTypeArgsSchema)])
      .optional(),
  })
  .strict();

// CASE FAN
//------------------------------------------------------

export const CaseFanIncludeSchema: z.ZodType<Prisma.CaseFanInclude> = z
  .object({
    setups: z
      .union([z.boolean(), z.lazy(() => CaseFanOfSetupFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => CaseFanCountOutputTypeArgsSchema)])
      .optional(),
  })
  .strict();

export const CaseFanArgsSchema: z.ZodType<Prisma.CaseFanDefaultArgs> = z
  .object({
    select: z.lazy(() => CaseFanSelectSchema).optional(),
    include: z.lazy(() => CaseFanIncludeSchema).optional(),
  })
  .strict();

export const CaseFanCountOutputTypeArgsSchema: z.ZodType<Prisma.CaseFanCountOutputTypeDefaultArgs> =
  z
    .object({
      select: z.lazy(() => CaseFanCountOutputTypeSelectSchema).nullish(),
    })
    .strict();

export const CaseFanCountOutputTypeSelectSchema: z.ZodType<Prisma.CaseFanCountOutputTypeSelect> =
  z
    .object({
      setups: z.boolean().optional(),
    })
    .strict();

export const CaseFanSelectSchema: z.ZodType<Prisma.CaseFanSelect> = z
  .object({
    id: z.boolean().optional(),
    size: z.boolean().optional(),
    name: z.boolean().optional(),
    imageUrl: z.boolean().optional(),
    color: z.boolean().optional(),
    amazonLink: z.boolean().optional(),
    rpm: z.boolean().optional(),
    airflow: z.boolean().optional(),
    setups: z
      .union([z.boolean(), z.lazy(() => CaseFanOfSetupFindManyArgsSchema)])
      .optional(),
    _count: z
      .union([z.boolean(), z.lazy(() => CaseFanCountOutputTypeArgsSchema)])
      .optional(),
  })
  .strict();

/////////////////////////////////////////
// INPUT TYPES
/////////////////////////////////////////

export const AccountWhereInputSchema: z.ZodType<Prisma.AccountWhereInput> = z
  .object({
    AND: z
      .union([
        z.lazy(() => AccountWhereInputSchema),
        z.lazy(() => AccountWhereInputSchema).array(),
      ])
      .optional(),
    OR: z
      .lazy(() => AccountWhereInputSchema)
      .array()
      .optional(),
    NOT: z
      .union([
        z.lazy(() => AccountWhereInputSchema),
        z.lazy(() => AccountWhereInputSchema).array(),
      ])
      .optional(),
    id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    userId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    type: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    provider: z
      .union([z.lazy(() => StringFilterSchema), z.string()])
      .optional(),
    providerAccountId: z
      .union([z.lazy(() => StringFilterSchema), z.string()])
      .optional(),
    refresh_token: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    access_token: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    expires_at: z
      .union([z.lazy(() => IntNullableFilterSchema), z.number()])
      .optional()
      .nullable(),
    token_type: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    scope: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    id_token: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    session_state: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    user: z
      .union([
        z.lazy(() => UserRelationFilterSchema),
        z.lazy(() => UserWhereInputSchema),
      ])
      .optional(),
  })
  .strict();

export const AccountOrderByWithRelationInputSchema: z.ZodType<Prisma.AccountOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      userId: z.lazy(() => SortOrderSchema).optional(),
      type: z.lazy(() => SortOrderSchema).optional(),
      provider: z.lazy(() => SortOrderSchema).optional(),
      providerAccountId: z.lazy(() => SortOrderSchema).optional(),
      refresh_token: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      access_token: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      expires_at: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      token_type: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      scope: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      id_token: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      session_state: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
    })
    .strict();

export const AccountWhereUniqueInputSchema: z.ZodType<Prisma.AccountWhereUniqueInput> =
  z
    .union([
      z.object({
        id: z.string().cuid(),
        provider_providerAccountId: z.lazy(
          () => AccountProviderProviderAccountIdCompoundUniqueInputSchema,
        ),
      }),
      z.object({
        id: z.string().cuid(),
      }),
      z.object({
        provider_providerAccountId: z.lazy(
          () => AccountProviderProviderAccountIdCompoundUniqueInputSchema,
        ),
      }),
    ])
    .and(
      z
        .object({
          id: z.string().cuid().optional(),
          provider_providerAccountId: z
            .lazy(
              () => AccountProviderProviderAccountIdCompoundUniqueInputSchema,
            )
            .optional(),
          AND: z
            .union([
              z.lazy(() => AccountWhereInputSchema),
              z.lazy(() => AccountWhereInputSchema).array(),
            ])
            .optional(),
          OR: z
            .lazy(() => AccountWhereInputSchema)
            .array()
            .optional(),
          NOT: z
            .union([
              z.lazy(() => AccountWhereInputSchema),
              z.lazy(() => AccountWhereInputSchema).array(),
            ])
            .optional(),
          userId: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          type: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          provider: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          providerAccountId: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          refresh_token: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          access_token: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          expires_at: z
            .union([z.lazy(() => IntNullableFilterSchema), z.number().int()])
            .optional()
            .nullable(),
          token_type: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          scope: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          id_token: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          session_state: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          user: z
            .union([
              z.lazy(() => UserRelationFilterSchema),
              z.lazy(() => UserWhereInputSchema),
            ])
            .optional(),
        })
        .strict(),
    );

export const AccountOrderByWithAggregationInputSchema: z.ZodType<Prisma.AccountOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      userId: z.lazy(() => SortOrderSchema).optional(),
      type: z.lazy(() => SortOrderSchema).optional(),
      provider: z.lazy(() => SortOrderSchema).optional(),
      providerAccountId: z.lazy(() => SortOrderSchema).optional(),
      refresh_token: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      access_token: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      expires_at: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      token_type: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      scope: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      id_token: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      session_state: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      _count: z.lazy(() => AccountCountOrderByAggregateInputSchema).optional(),
      _avg: z.lazy(() => AccountAvgOrderByAggregateInputSchema).optional(),
      _max: z.lazy(() => AccountMaxOrderByAggregateInputSchema).optional(),
      _min: z.lazy(() => AccountMinOrderByAggregateInputSchema).optional(),
      _sum: z.lazy(() => AccountSumOrderByAggregateInputSchema).optional(),
    })
    .strict();

export const AccountScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AccountScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => AccountScalarWhereWithAggregatesInputSchema),
          z.lazy(() => AccountScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      OR: z
        .lazy(() => AccountScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => AccountScalarWhereWithAggregatesInputSchema),
          z.lazy(() => AccountScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      userId: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      type: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      provider: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      providerAccountId: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      refresh_token: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      access_token: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      expires_at: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number(),
        ])
        .optional()
        .nullable(),
      token_type: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      scope: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      id_token: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      session_state: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const SessionWhereInputSchema: z.ZodType<Prisma.SessionWhereInput> = z
  .object({
    AND: z
      .union([
        z.lazy(() => SessionWhereInputSchema),
        z.lazy(() => SessionWhereInputSchema).array(),
      ])
      .optional(),
    OR: z
      .lazy(() => SessionWhereInputSchema)
      .array()
      .optional(),
    NOT: z
      .union([
        z.lazy(() => SessionWhereInputSchema),
        z.lazy(() => SessionWhereInputSchema).array(),
      ])
      .optional(),
    id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    sessionToken: z
      .union([z.lazy(() => StringFilterSchema), z.string()])
      .optional(),
    userId: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    expires: z
      .union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()])
      .optional(),
    user: z
      .union([
        z.lazy(() => UserRelationFilterSchema),
        z.lazy(() => UserWhereInputSchema),
      ])
      .optional(),
  })
  .strict();

export const SessionOrderByWithRelationInputSchema: z.ZodType<Prisma.SessionOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      sessionToken: z.lazy(() => SortOrderSchema).optional(),
      userId: z.lazy(() => SortOrderSchema).optional(),
      expires: z.lazy(() => SortOrderSchema).optional(),
      user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
    })
    .strict();

export const SessionWhereUniqueInputSchema: z.ZodType<Prisma.SessionWhereUniqueInput> =
  z
    .union([
      z.object({
        id: z.string().cuid(),
        sessionToken: z.string(),
      }),
      z.object({
        id: z.string().cuid(),
      }),
      z.object({
        sessionToken: z.string(),
      }),
    ])
    .and(
      z
        .object({
          id: z.string().cuid().optional(),
          sessionToken: z.string().optional(),
          AND: z
            .union([
              z.lazy(() => SessionWhereInputSchema),
              z.lazy(() => SessionWhereInputSchema).array(),
            ])
            .optional(),
          OR: z
            .lazy(() => SessionWhereInputSchema)
            .array()
            .optional(),
          NOT: z
            .union([
              z.lazy(() => SessionWhereInputSchema),
              z.lazy(() => SessionWhereInputSchema).array(),
            ])
            .optional(),
          userId: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          expires: z
            .union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()])
            .optional(),
          user: z
            .union([
              z.lazy(() => UserRelationFilterSchema),
              z.lazy(() => UserWhereInputSchema),
            ])
            .optional(),
        })
        .strict(),
    );

export const SessionOrderByWithAggregationInputSchema: z.ZodType<Prisma.SessionOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      sessionToken: z.lazy(() => SortOrderSchema).optional(),
      userId: z.lazy(() => SortOrderSchema).optional(),
      expires: z.lazy(() => SortOrderSchema).optional(),
      _count: z.lazy(() => SessionCountOrderByAggregateInputSchema).optional(),
      _max: z.lazy(() => SessionMaxOrderByAggregateInputSchema).optional(),
      _min: z.lazy(() => SessionMinOrderByAggregateInputSchema).optional(),
    })
    .strict();

export const SessionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SessionScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => SessionScalarWhereWithAggregatesInputSchema),
          z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      OR: z
        .lazy(() => SessionScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => SessionScalarWhereWithAggregatesInputSchema),
          z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      sessionToken: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      userId: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      expires: z
        .union([
          z.lazy(() => DateTimeWithAggregatesFilterSchema),
          z.coerce.date(),
        ])
        .optional(),
    })
    .strict();

export const UserWhereInputSchema: z.ZodType<Prisma.UserWhereInput> = z
  .object({
    AND: z
      .union([
        z.lazy(() => UserWhereInputSchema),
        z.lazy(() => UserWhereInputSchema).array(),
      ])
      .optional(),
    OR: z
      .lazy(() => UserWhereInputSchema)
      .array()
      .optional(),
    NOT: z
      .union([
        z.lazy(() => UserWhereInputSchema),
        z.lazy(() => UserWhereInputSchema).array(),
      ])
      .optional(),
    id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    name: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    email: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    emailVerified: z
      .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
      .optional()
      .nullable(),
    image: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    role: z
      .union([
        z.lazy(() => EnumUserRoleFilterSchema),
        z.lazy(() => UserRoleSchema),
      ])
      .optional(),
    setups: z.lazy(() => SetupListRelationFilterSchema).optional(),
    accounts: z.lazy(() => AccountListRelationFilterSchema).optional(),
    sessions: z.lazy(() => SessionListRelationFilterSchema).optional(),
  })
  .strict();

export const UserOrderByWithRelationInputSchema: z.ZodType<Prisma.UserOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      name: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      email: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      emailVerified: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      image: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      role: z.lazy(() => SortOrderSchema).optional(),
      setups: z.lazy(() => SetupOrderByRelationAggregateInputSchema).optional(),
      accounts: z
        .lazy(() => AccountOrderByRelationAggregateInputSchema)
        .optional(),
      sessions: z
        .lazy(() => SessionOrderByRelationAggregateInputSchema)
        .optional(),
    })
    .strict();

export const UserWhereUniqueInputSchema: z.ZodType<Prisma.UserWhereUniqueInput> =
  z
    .union([
      z.object({
        id: z.string().cuid(),
        email: z.string(),
      }),
      z.object({
        id: z.string().cuid(),
      }),
      z.object({
        email: z.string(),
      }),
    ])
    .and(
      z
        .object({
          id: z.string().cuid().optional(),
          email: z.string().optional(),
          AND: z
            .union([
              z.lazy(() => UserWhereInputSchema),
              z.lazy(() => UserWhereInputSchema).array(),
            ])
            .optional(),
          OR: z
            .lazy(() => UserWhereInputSchema)
            .array()
            .optional(),
          NOT: z
            .union([
              z.lazy(() => UserWhereInputSchema),
              z.lazy(() => UserWhereInputSchema).array(),
            ])
            .optional(),
          name: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          emailVerified: z
            .union([
              z.lazy(() => DateTimeNullableFilterSchema),
              z.coerce.date(),
            ])
            .optional()
            .nullable(),
          image: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          role: z
            .union([
              z.lazy(() => EnumUserRoleFilterSchema),
              z.lazy(() => UserRoleSchema),
            ])
            .optional(),
          setups: z.lazy(() => SetupListRelationFilterSchema).optional(),
          accounts: z.lazy(() => AccountListRelationFilterSchema).optional(),
          sessions: z.lazy(() => SessionListRelationFilterSchema).optional(),
        })
        .strict(),
    );

export const UserOrderByWithAggregationInputSchema: z.ZodType<Prisma.UserOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      name: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      email: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      emailVerified: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      image: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      role: z.lazy(() => SortOrderSchema).optional(),
      _count: z.lazy(() => UserCountOrderByAggregateInputSchema).optional(),
      _max: z.lazy(() => UserMaxOrderByAggregateInputSchema).optional(),
      _min: z.lazy(() => UserMinOrderByAggregateInputSchema).optional(),
    })
    .strict();

export const UserScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UserScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => UserScalarWhereWithAggregatesInputSchema),
          z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      OR: z
        .lazy(() => UserScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => UserScalarWhereWithAggregatesInputSchema),
          z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      name: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      emailVerified: z
        .union([
          z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),
          z.coerce.date(),
        ])
        .optional()
        .nullable(),
      image: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      role: z
        .union([
          z.lazy(() => EnumUserRoleWithAggregatesFilterSchema),
          z.lazy(() => UserRoleSchema),
        ])
        .optional(),
    })
    .strict();

export const VerificationTokenWhereInputSchema: z.ZodType<Prisma.VerificationTokenWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => VerificationTokenWhereInputSchema),
          z.lazy(() => VerificationTokenWhereInputSchema).array(),
        ])
        .optional(),
      OR: z
        .lazy(() => VerificationTokenWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => VerificationTokenWhereInputSchema),
          z.lazy(() => VerificationTokenWhereInputSchema).array(),
        ])
        .optional(),
      identifier: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      token: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
      expires: z
        .union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()])
        .optional(),
    })
    .strict();

export const VerificationTokenOrderByWithRelationInputSchema: z.ZodType<Prisma.VerificationTokenOrderByWithRelationInput> =
  z
    .object({
      identifier: z.lazy(() => SortOrderSchema).optional(),
      token: z.lazy(() => SortOrderSchema).optional(),
      expires: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const VerificationTokenWhereUniqueInputSchema: z.ZodType<Prisma.VerificationTokenWhereUniqueInput> =
  z
    .union([
      z.object({
        token: z.string(),
        identifier_token: z.lazy(
          () => VerificationTokenIdentifierTokenCompoundUniqueInputSchema,
        ),
      }),
      z.object({
        token: z.string(),
      }),
      z.object({
        identifier_token: z.lazy(
          () => VerificationTokenIdentifierTokenCompoundUniqueInputSchema,
        ),
      }),
    ])
    .and(
      z
        .object({
          token: z.string().optional(),
          identifier_token: z
            .lazy(
              () => VerificationTokenIdentifierTokenCompoundUniqueInputSchema,
            )
            .optional(),
          AND: z
            .union([
              z.lazy(() => VerificationTokenWhereInputSchema),
              z.lazy(() => VerificationTokenWhereInputSchema).array(),
            ])
            .optional(),
          OR: z
            .lazy(() => VerificationTokenWhereInputSchema)
            .array()
            .optional(),
          NOT: z
            .union([
              z.lazy(() => VerificationTokenWhereInputSchema),
              z.lazy(() => VerificationTokenWhereInputSchema).array(),
            ])
            .optional(),
          identifier: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          expires: z
            .union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()])
            .optional(),
        })
        .strict(),
    );

export const VerificationTokenOrderByWithAggregationInputSchema: z.ZodType<Prisma.VerificationTokenOrderByWithAggregationInput> =
  z
    .object({
      identifier: z.lazy(() => SortOrderSchema).optional(),
      token: z.lazy(() => SortOrderSchema).optional(),
      expires: z.lazy(() => SortOrderSchema).optional(),
      _count: z
        .lazy(() => VerificationTokenCountOrderByAggregateInputSchema)
        .optional(),
      _max: z
        .lazy(() => VerificationTokenMaxOrderByAggregateInputSchema)
        .optional(),
      _min: z
        .lazy(() => VerificationTokenMinOrderByAggregateInputSchema)
        .optional(),
    })
    .strict();

export const VerificationTokenScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.VerificationTokenScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => VerificationTokenScalarWhereWithAggregatesInputSchema),
          z
            .lazy(() => VerificationTokenScalarWhereWithAggregatesInputSchema)
            .array(),
        ])
        .optional(),
      OR: z
        .lazy(() => VerificationTokenScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => VerificationTokenScalarWhereWithAggregatesInputSchema),
          z
            .lazy(() => VerificationTokenScalarWhereWithAggregatesInputSchema)
            .array(),
        ])
        .optional(),
      identifier: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      token: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      expires: z
        .union([
          z.lazy(() => DateTimeWithAggregatesFilterSchema),
          z.coerce.date(),
        ])
        .optional(),
    })
    .strict();

export const CPUCoolerWhereInputSchema: z.ZodType<Prisma.CPUCoolerWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => CPUCoolerWhereInputSchema),
          z.lazy(() => CPUCoolerWhereInputSchema).array(),
        ])
        .optional(),
      OR: z
        .lazy(() => CPUCoolerWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => CPUCoolerWhereInputSchema),
          z.lazy(() => CPUCoolerWhereInputSchema).array(),
        ])
        .optional(),
      id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
      rpm: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
      imageUrl: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      amazonLink: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      noise_level: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      color: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      size: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      setups: z.lazy(() => SetupListRelationFilterSchema).optional(),
    })
    .strict();

export const CPUCoolerOrderByWithRelationInputSchema: z.ZodType<Prisma.CPUCoolerOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      rpm: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      noise_level: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      color: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      size: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      setups: z.lazy(() => SetupOrderByRelationAggregateInputSchema).optional(),
    })
    .strict();

export const CPUCoolerWhereUniqueInputSchema: z.ZodType<Prisma.CPUCoolerWhereUniqueInput> =
  z
    .object({
      id: z.string().cuid(),
    })
    .and(
      z
        .object({
          id: z.string().cuid().optional(),
          AND: z
            .union([
              z.lazy(() => CPUCoolerWhereInputSchema),
              z.lazy(() => CPUCoolerWhereInputSchema).array(),
            ])
            .optional(),
          OR: z
            .lazy(() => CPUCoolerWhereInputSchema)
            .array()
            .optional(),
          NOT: z
            .union([
              z.lazy(() => CPUCoolerWhereInputSchema),
              z.lazy(() => CPUCoolerWhereInputSchema).array(),
            ])
            .optional(),
          rpm: z
            .union([z.lazy(() => IntNullableFilterSchema), z.number().int()])
            .optional()
            .nullable(),
          name: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          imageUrl: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          amazonLink: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          noise_level: z
            .union([z.lazy(() => IntNullableFilterSchema), z.number().int()])
            .optional()
            .nullable(),
          color: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          size: z
            .union([z.lazy(() => IntNullableFilterSchema), z.number().int()])
            .optional()
            .nullable(),
          setups: z.lazy(() => SetupListRelationFilterSchema).optional(),
        })
        .strict(),
    );

export const CPUCoolerOrderByWithAggregationInputSchema: z.ZodType<Prisma.CPUCoolerOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      rpm: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      noise_level: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      color: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      size: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      _count: z
        .lazy(() => CPUCoolerCountOrderByAggregateInputSchema)
        .optional(),
      _avg: z.lazy(() => CPUCoolerAvgOrderByAggregateInputSchema).optional(),
      _max: z.lazy(() => CPUCoolerMaxOrderByAggregateInputSchema).optional(),
      _min: z.lazy(() => CPUCoolerMinOrderByAggregateInputSchema).optional(),
      _sum: z.lazy(() => CPUCoolerSumOrderByAggregateInputSchema).optional(),
    })
    .strict();

export const CPUCoolerScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CPUCoolerScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => CPUCoolerScalarWhereWithAggregatesInputSchema),
          z.lazy(() => CPUCoolerScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      OR: z
        .lazy(() => CPUCoolerScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => CPUCoolerScalarWhereWithAggregatesInputSchema),
          z.lazy(() => CPUCoolerScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      rpm: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number(),
        ])
        .optional()
        .nullable(),
      name: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      imageUrl: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      noise_level: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number(),
        ])
        .optional()
        .nullable(),
      color: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      size: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number(),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const MotherboardWhereInputSchema: z.ZodType<Prisma.MotherboardWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => MotherboardWhereInputSchema),
          z.lazy(() => MotherboardWhereInputSchema).array(),
        ])
        .optional(),
      OR: z
        .lazy(() => MotherboardWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => MotherboardWhereInputSchema),
          z.lazy(() => MotherboardWhereInputSchema).array(),
        ])
        .optional(),
      id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
      socket: z.lazy(() => StringNullableListFilterSchema).optional(),
      form_factor: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      max_memory: z
        .union([z.lazy(() => IntFilterSchema), z.number()])
        .optional(),
      memory_slots: z
        .union([z.lazy(() => IntFilterSchema), z.number()])
        .optional(),
      name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
      imageUrl: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      amazonLink: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      color: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      setups: z.lazy(() => SetupListRelationFilterSchema).optional(),
    })
    .strict();

export const MotherboardOrderByWithRelationInputSchema: z.ZodType<Prisma.MotherboardOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      socket: z.lazy(() => SortOrderSchema).optional(),
      form_factor: z.lazy(() => SortOrderSchema).optional(),
      max_memory: z.lazy(() => SortOrderSchema).optional(),
      memory_slots: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      color: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      setups: z.lazy(() => SetupOrderByRelationAggregateInputSchema).optional(),
    })
    .strict();

export const MotherboardWhereUniqueInputSchema: z.ZodType<Prisma.MotherboardWhereUniqueInput> =
  z
    .object({
      id: z.string().cuid(),
    })
    .and(
      z
        .object({
          id: z.string().cuid().optional(),
          AND: z
            .union([
              z.lazy(() => MotherboardWhereInputSchema),
              z.lazy(() => MotherboardWhereInputSchema).array(),
            ])
            .optional(),
          OR: z
            .lazy(() => MotherboardWhereInputSchema)
            .array()
            .optional(),
          NOT: z
            .union([
              z.lazy(() => MotherboardWhereInputSchema),
              z.lazy(() => MotherboardWhereInputSchema).array(),
            ])
            .optional(),
          socket: z.lazy(() => StringNullableListFilterSchema).optional(),
          form_factor: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          max_memory: z
            .union([z.lazy(() => IntFilterSchema), z.number().int()])
            .optional(),
          memory_slots: z
            .union([z.lazy(() => IntFilterSchema), z.number().int()])
            .optional(),
          name: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          imageUrl: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          amazonLink: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          color: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          setups: z.lazy(() => SetupListRelationFilterSchema).optional(),
        })
        .strict(),
    );

export const MotherboardOrderByWithAggregationInputSchema: z.ZodType<Prisma.MotherboardOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      socket: z.lazy(() => SortOrderSchema).optional(),
      form_factor: z.lazy(() => SortOrderSchema).optional(),
      max_memory: z.lazy(() => SortOrderSchema).optional(),
      memory_slots: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      color: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      _count: z
        .lazy(() => MotherboardCountOrderByAggregateInputSchema)
        .optional(),
      _avg: z.lazy(() => MotherboardAvgOrderByAggregateInputSchema).optional(),
      _max: z.lazy(() => MotherboardMaxOrderByAggregateInputSchema).optional(),
      _min: z.lazy(() => MotherboardMinOrderByAggregateInputSchema).optional(),
      _sum: z.lazy(() => MotherboardSumOrderByAggregateInputSchema).optional(),
    })
    .strict();

export const MotherboardScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.MotherboardScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => MotherboardScalarWhereWithAggregatesInputSchema),
          z.lazy(() => MotherboardScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      OR: z
        .lazy(() => MotherboardScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => MotherboardScalarWhereWithAggregatesInputSchema),
          z.lazy(() => MotherboardScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      socket: z.lazy(() => StringNullableListFilterSchema).optional(),
      form_factor: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      max_memory: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      memory_slots: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      name: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      imageUrl: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      color: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const RAMWhereInputSchema: z.ZodType<Prisma.RAMWhereInput> = z
  .object({
    AND: z
      .union([
        z.lazy(() => RAMWhereInputSchema),
        z.lazy(() => RAMWhereInputSchema).array(),
      ])
      .optional(),
    OR: z
      .lazy(() => RAMWhereInputSchema)
      .array()
      .optional(),
    NOT: z
      .union([
        z.lazy(() => RAMWhereInputSchema),
        z.lazy(() => RAMWhereInputSchema).array(),
      ])
      .optional(),
    id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    speed: z.lazy(() => IntNullableListFilterSchema).optional(),
    modules: z.lazy(() => IntNullableListFilterSchema).optional(),
    price_per_gb: z
      .union([z.lazy(() => IntFilterSchema), z.number()])
      .optional(),
    color: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    imageUrl: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    amazonLink: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    first_word_latency: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    cas_latency: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    setups: z.lazy(() => SetupListRelationFilterSchema).optional(),
  })
  .strict();

export const RAMOrderByWithRelationInputSchema: z.ZodType<Prisma.RAMOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      speed: z.lazy(() => SortOrderSchema).optional(),
      modules: z.lazy(() => SortOrderSchema).optional(),
      price_per_gb: z.lazy(() => SortOrderSchema).optional(),
      color: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      first_word_latency: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      cas_latency: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      setups: z.lazy(() => SetupOrderByRelationAggregateInputSchema).optional(),
    })
    .strict();

export const RAMWhereUniqueInputSchema: z.ZodType<Prisma.RAMWhereUniqueInput> =
  z
    .object({
      id: z.string().cuid(),
    })
    .and(
      z
        .object({
          id: z.string().cuid().optional(),
          AND: z
            .union([
              z.lazy(() => RAMWhereInputSchema),
              z.lazy(() => RAMWhereInputSchema).array(),
            ])
            .optional(),
          OR: z
            .lazy(() => RAMWhereInputSchema)
            .array()
            .optional(),
          NOT: z
            .union([
              z.lazy(() => RAMWhereInputSchema),
              z.lazy(() => RAMWhereInputSchema).array(),
            ])
            .optional(),
          speed: z.lazy(() => IntNullableListFilterSchema).optional(),
          modules: z.lazy(() => IntNullableListFilterSchema).optional(),
          price_per_gb: z
            .union([z.lazy(() => IntFilterSchema), z.number().int()])
            .optional(),
          color: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          imageUrl: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          amazonLink: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          name: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          first_word_latency: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          cas_latency: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          setups: z.lazy(() => SetupListRelationFilterSchema).optional(),
        })
        .strict(),
    );

export const RAMOrderByWithAggregationInputSchema: z.ZodType<Prisma.RAMOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      speed: z.lazy(() => SortOrderSchema).optional(),
      modules: z.lazy(() => SortOrderSchema).optional(),
      price_per_gb: z.lazy(() => SortOrderSchema).optional(),
      color: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      first_word_latency: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      cas_latency: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      _count: z.lazy(() => RAMCountOrderByAggregateInputSchema).optional(),
      _avg: z.lazy(() => RAMAvgOrderByAggregateInputSchema).optional(),
      _max: z.lazy(() => RAMMaxOrderByAggregateInputSchema).optional(),
      _min: z.lazy(() => RAMMinOrderByAggregateInputSchema).optional(),
      _sum: z.lazy(() => RAMSumOrderByAggregateInputSchema).optional(),
    })
    .strict();

export const RAMScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.RAMScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => RAMScalarWhereWithAggregatesInputSchema),
          z.lazy(() => RAMScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      OR: z
        .lazy(() => RAMScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => RAMScalarWhereWithAggregatesInputSchema),
          z.lazy(() => RAMScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      speed: z.lazy(() => IntNullableListFilterSchema).optional(),
      modules: z.lazy(() => IntNullableListFilterSchema).optional(),
      price_per_gb: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      color: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      imageUrl: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      name: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      first_word_latency: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      cas_latency: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const CPUWhereInputSchema: z.ZodType<Prisma.CPUWhereInput> = z
  .object({
    AND: z
      .union([
        z.lazy(() => CPUWhereInputSchema),
        z.lazy(() => CPUWhereInputSchema).array(),
      ])
      .optional(),
    OR: z
      .lazy(() => CPUWhereInputSchema)
      .array()
      .optional(),
    NOT: z
      .union([
        z.lazy(() => CPUWhereInputSchema),
        z.lazy(() => CPUWhereInputSchema).array(),
      ])
      .optional(),
    id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    core_count: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
    threads_count: z
      .union([z.lazy(() => IntFilterSchema), z.number()])
      .optional(),
    name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    imageUrl: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    core_clock: z
      .union([z.lazy(() => FloatFilterSchema), z.number()])
      .optional(),
    boost_clock: z
      .union([z.lazy(() => FloatFilterSchema), z.number()])
      .optional(),
    amazonLink: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    tdp: z
      .union([z.lazy(() => IntNullableFilterSchema), z.number()])
      .optional()
      .nullable(),
    graphics: z
      .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
      .optional()
      .nullable(),
    smt: z
      .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
      .optional()
      .nullable(),
    setups: z.lazy(() => SetupListRelationFilterSchema).optional(),
  })
  .strict();

export const CPUOrderByWithRelationInputSchema: z.ZodType<Prisma.CPUOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      core_count: z.lazy(() => SortOrderSchema).optional(),
      threads_count: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      core_clock: z.lazy(() => SortOrderSchema).optional(),
      boost_clock: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      tdp: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      graphics: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      smt: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      setups: z.lazy(() => SetupOrderByRelationAggregateInputSchema).optional(),
    })
    .strict();

export const CPUWhereUniqueInputSchema: z.ZodType<Prisma.CPUWhereUniqueInput> =
  z
    .object({
      id: z.string().cuid(),
    })
    .and(
      z
        .object({
          id: z.string().cuid().optional(),
          AND: z
            .union([
              z.lazy(() => CPUWhereInputSchema),
              z.lazy(() => CPUWhereInputSchema).array(),
            ])
            .optional(),
          OR: z
            .lazy(() => CPUWhereInputSchema)
            .array()
            .optional(),
          NOT: z
            .union([
              z.lazy(() => CPUWhereInputSchema),
              z.lazy(() => CPUWhereInputSchema).array(),
            ])
            .optional(),
          core_count: z
            .union([z.lazy(() => IntFilterSchema), z.number().int()])
            .optional(),
          threads_count: z
            .union([z.lazy(() => IntFilterSchema), z.number().int()])
            .optional(),
          name: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          imageUrl: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          core_clock: z
            .union([z.lazy(() => FloatFilterSchema), z.number()])
            .optional(),
          boost_clock: z
            .union([z.lazy(() => FloatFilterSchema), z.number()])
            .optional(),
          amazonLink: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          tdp: z
            .union([z.lazy(() => IntNullableFilterSchema), z.number().int()])
            .optional()
            .nullable(),
          graphics: z
            .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
            .optional()
            .nullable(),
          smt: z
            .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
            .optional()
            .nullable(),
          setups: z.lazy(() => SetupListRelationFilterSchema).optional(),
        })
        .strict(),
    );

export const CPUOrderByWithAggregationInputSchema: z.ZodType<Prisma.CPUOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      core_count: z.lazy(() => SortOrderSchema).optional(),
      threads_count: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      core_clock: z.lazy(() => SortOrderSchema).optional(),
      boost_clock: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      tdp: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      graphics: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      smt: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      _count: z.lazy(() => CPUCountOrderByAggregateInputSchema).optional(),
      _avg: z.lazy(() => CPUAvgOrderByAggregateInputSchema).optional(),
      _max: z.lazy(() => CPUMaxOrderByAggregateInputSchema).optional(),
      _min: z.lazy(() => CPUMinOrderByAggregateInputSchema).optional(),
      _sum: z.lazy(() => CPUSumOrderByAggregateInputSchema).optional(),
    })
    .strict();

export const CPUScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CPUScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => CPUScalarWhereWithAggregatesInputSchema),
          z.lazy(() => CPUScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      OR: z
        .lazy(() => CPUScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => CPUScalarWhereWithAggregatesInputSchema),
          z.lazy(() => CPUScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      core_count: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      threads_count: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      name: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      imageUrl: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      core_clock: z
        .union([z.lazy(() => FloatWithAggregatesFilterSchema), z.number()])
        .optional(),
      boost_clock: z
        .union([z.lazy(() => FloatWithAggregatesFilterSchema), z.number()])
        .optional(),
      amazonLink: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      tdp: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number(),
        ])
        .optional()
        .nullable(),
      graphics: z
        .union([
          z.lazy(() => BoolNullableWithAggregatesFilterSchema),
          z.boolean(),
        ])
        .optional()
        .nullable(),
      smt: z
        .union([
          z.lazy(() => BoolNullableWithAggregatesFilterSchema),
          z.boolean(),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const HDDWhereInputSchema: z.ZodType<Prisma.HDDWhereInput> = z
  .object({
    AND: z
      .union([
        z.lazy(() => HDDWhereInputSchema),
        z.lazy(() => HDDWhereInputSchema).array(),
      ])
      .optional(),
    OR: z
      .lazy(() => HDDWhereInputSchema)
      .array()
      .optional(),
    NOT: z
      .union([
        z.lazy(() => HDDWhereInputSchema),
        z.lazy(() => HDDWhereInputSchema).array(),
      ])
      .optional(),
    id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    capacity: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
    price_per_gb: z
      .union([z.lazy(() => IntFilterSchema), z.number()])
      .optional(),
    amazonLink: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    imageUrl: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    type: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    cache: z
      .union([z.lazy(() => IntNullableFilterSchema), z.number()])
      .optional()
      .nullable(),
    form_factor: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    interface: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    setups: z.lazy(() => SetupListRelationFilterSchema).optional(),
  })
  .strict();

export const HDDOrderByWithRelationInputSchema: z.ZodType<Prisma.HDDOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      capacity: z.lazy(() => SortOrderSchema).optional(),
      price_per_gb: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      type: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      cache: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      form_factor: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      interface: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      setups: z.lazy(() => SetupOrderByRelationAggregateInputSchema).optional(),
    })
    .strict();

export const HDDWhereUniqueInputSchema: z.ZodType<Prisma.HDDWhereUniqueInput> =
  z
    .object({
      id: z.string().cuid(),
    })
    .and(
      z
        .object({
          id: z.string().cuid().optional(),
          AND: z
            .union([
              z.lazy(() => HDDWhereInputSchema),
              z.lazy(() => HDDWhereInputSchema).array(),
            ])
            .optional(),
          OR: z
            .lazy(() => HDDWhereInputSchema)
            .array()
            .optional(),
          NOT: z
            .union([
              z.lazy(() => HDDWhereInputSchema),
              z.lazy(() => HDDWhereInputSchema).array(),
            ])
            .optional(),
          capacity: z
            .union([z.lazy(() => IntFilterSchema), z.number().int()])
            .optional(),
          price_per_gb: z
            .union([z.lazy(() => IntFilterSchema), z.number().int()])
            .optional(),
          amazonLink: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          name: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          imageUrl: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          type: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          cache: z
            .union([z.lazy(() => IntNullableFilterSchema), z.number().int()])
            .optional()
            .nullable(),
          form_factor: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          interface: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          setups: z.lazy(() => SetupListRelationFilterSchema).optional(),
        })
        .strict(),
    );

export const HDDOrderByWithAggregationInputSchema: z.ZodType<Prisma.HDDOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      capacity: z.lazy(() => SortOrderSchema).optional(),
      price_per_gb: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      type: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      cache: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      form_factor: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      interface: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      _count: z.lazy(() => HDDCountOrderByAggregateInputSchema).optional(),
      _avg: z.lazy(() => HDDAvgOrderByAggregateInputSchema).optional(),
      _max: z.lazy(() => HDDMaxOrderByAggregateInputSchema).optional(),
      _min: z.lazy(() => HDDMinOrderByAggregateInputSchema).optional(),
      _sum: z.lazy(() => HDDSumOrderByAggregateInputSchema).optional(),
    })
    .strict();

export const HDDScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.HDDScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => HDDScalarWhereWithAggregatesInputSchema),
          z.lazy(() => HDDScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      OR: z
        .lazy(() => HDDScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => HDDScalarWhereWithAggregatesInputSchema),
          z.lazy(() => HDDScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      capacity: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      price_per_gb: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      amazonLink: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      name: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      imageUrl: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      type: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      cache: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number(),
        ])
        .optional()
        .nullable(),
      form_factor: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      interface: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const SSDWhereInputSchema: z.ZodType<Prisma.SSDWhereInput> = z
  .object({
    AND: z
      .union([
        z.lazy(() => SSDWhereInputSchema),
        z.lazy(() => SSDWhereInputSchema).array(),
      ])
      .optional(),
    OR: z
      .lazy(() => SSDWhereInputSchema)
      .array()
      .optional(),
    NOT: z
      .union([
        z.lazy(() => SSDWhereInputSchema),
        z.lazy(() => SSDWhereInputSchema).array(),
      ])
      .optional(),
    id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    capacity: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
    price_per_gb: z
      .union([z.lazy(() => IntFilterSchema), z.number()])
      .optional(),
    name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    imageUrl: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    amazonLink: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    type: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    cache: z
      .union([z.lazy(() => IntNullableFilterSchema), z.number()])
      .optional()
      .nullable(),
    form_factor: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    interface: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    setups: z.lazy(() => SSDOfSetupListRelationFilterSchema).optional(),
  })
  .strict();

export const SSDOrderByWithRelationInputSchema: z.ZodType<Prisma.SSDOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      capacity: z.lazy(() => SortOrderSchema).optional(),
      price_per_gb: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      type: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      cache: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      form_factor: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      interface: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      setups: z
        .lazy(() => SSDOfSetupOrderByRelationAggregateInputSchema)
        .optional(),
    })
    .strict();

export const SSDWhereUniqueInputSchema: z.ZodType<Prisma.SSDWhereUniqueInput> =
  z
    .object({
      id: z.string().cuid(),
    })
    .and(
      z
        .object({
          id: z.string().cuid().optional(),
          AND: z
            .union([
              z.lazy(() => SSDWhereInputSchema),
              z.lazy(() => SSDWhereInputSchema).array(),
            ])
            .optional(),
          OR: z
            .lazy(() => SSDWhereInputSchema)
            .array()
            .optional(),
          NOT: z
            .union([
              z.lazy(() => SSDWhereInputSchema),
              z.lazy(() => SSDWhereInputSchema).array(),
            ])
            .optional(),
          capacity: z
            .union([z.lazy(() => IntFilterSchema), z.number().int()])
            .optional(),
          price_per_gb: z
            .union([z.lazy(() => IntFilterSchema), z.number().int()])
            .optional(),
          name: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          imageUrl: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          amazonLink: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          type: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          cache: z
            .union([z.lazy(() => IntNullableFilterSchema), z.number().int()])
            .optional()
            .nullable(),
          form_factor: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          interface: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          setups: z.lazy(() => SSDOfSetupListRelationFilterSchema).optional(),
        })
        .strict(),
    );

export const SSDOrderByWithAggregationInputSchema: z.ZodType<Prisma.SSDOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      capacity: z.lazy(() => SortOrderSchema).optional(),
      price_per_gb: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      type: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      cache: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      form_factor: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      interface: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      _count: z.lazy(() => SSDCountOrderByAggregateInputSchema).optional(),
      _avg: z.lazy(() => SSDAvgOrderByAggregateInputSchema).optional(),
      _max: z.lazy(() => SSDMaxOrderByAggregateInputSchema).optional(),
      _min: z.lazy(() => SSDMinOrderByAggregateInputSchema).optional(),
      _sum: z.lazy(() => SSDSumOrderByAggregateInputSchema).optional(),
    })
    .strict();

export const SSDScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SSDScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => SSDScalarWhereWithAggregatesInputSchema),
          z.lazy(() => SSDScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      OR: z
        .lazy(() => SSDScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => SSDScalarWhereWithAggregatesInputSchema),
          z.lazy(() => SSDScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      capacity: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      price_per_gb: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      name: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      imageUrl: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      type: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      cache: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number(),
        ])
        .optional()
        .nullable(),
      form_factor: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      interface: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const GPUWhereInputSchema: z.ZodType<Prisma.GPUWhereInput> = z
  .object({
    AND: z
      .union([
        z.lazy(() => GPUWhereInputSchema),
        z.lazy(() => GPUWhereInputSchema).array(),
      ])
      .optional(),
    OR: z
      .lazy(() => GPUWhereInputSchema)
      .array()
      .optional(),
    NOT: z
      .union([
        z.lazy(() => GPUWhereInputSchema),
        z.lazy(() => GPUWhereInputSchema).array(),
      ])
      .optional(),
    id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    chipset: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    memory: z
      .union([z.lazy(() => IntNullableFilterSchema), z.number()])
      .optional()
      .nullable(),
    name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    imageUrl: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    amazonLink: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    core_clock: z
      .union([z.lazy(() => IntNullableFilterSchema), z.number()])
      .optional()
      .nullable(),
    boost_clock: z
      .union([z.lazy(() => IntNullableFilterSchema), z.number()])
      .optional()
      .nullable(),
    color: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    length: z
      .union([z.lazy(() => IntNullableFilterSchema), z.number()])
      .optional()
      .nullable(),
    setups: z.lazy(() => SetupListRelationFilterSchema).optional(),
  })
  .strict();

export const GPUOrderByWithRelationInputSchema: z.ZodType<Prisma.GPUOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      chipset: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      memory: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      core_clock: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      boost_clock: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      color: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      length: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      setups: z.lazy(() => SetupOrderByRelationAggregateInputSchema).optional(),
    })
    .strict();

export const GPUWhereUniqueInputSchema: z.ZodType<Prisma.GPUWhereUniqueInput> =
  z
    .object({
      id: z.string().cuid(),
    })
    .and(
      z
        .object({
          id: z.string().cuid().optional(),
          AND: z
            .union([
              z.lazy(() => GPUWhereInputSchema),
              z.lazy(() => GPUWhereInputSchema).array(),
            ])
            .optional(),
          OR: z
            .lazy(() => GPUWhereInputSchema)
            .array()
            .optional(),
          NOT: z
            .union([
              z.lazy(() => GPUWhereInputSchema),
              z.lazy(() => GPUWhereInputSchema).array(),
            ])
            .optional(),
          chipset: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          memory: z
            .union([z.lazy(() => IntNullableFilterSchema), z.number().int()])
            .optional()
            .nullable(),
          name: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          imageUrl: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          amazonLink: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          core_clock: z
            .union([z.lazy(() => IntNullableFilterSchema), z.number().int()])
            .optional()
            .nullable(),
          boost_clock: z
            .union([z.lazy(() => IntNullableFilterSchema), z.number().int()])
            .optional()
            .nullable(),
          color: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          length: z
            .union([z.lazy(() => IntNullableFilterSchema), z.number().int()])
            .optional()
            .nullable(),
          setups: z.lazy(() => SetupListRelationFilterSchema).optional(),
        })
        .strict(),
    );

export const GPUOrderByWithAggregationInputSchema: z.ZodType<Prisma.GPUOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      chipset: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      memory: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      core_clock: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      boost_clock: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      color: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      length: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      _count: z.lazy(() => GPUCountOrderByAggregateInputSchema).optional(),
      _avg: z.lazy(() => GPUAvgOrderByAggregateInputSchema).optional(),
      _max: z.lazy(() => GPUMaxOrderByAggregateInputSchema).optional(),
      _min: z.lazy(() => GPUMinOrderByAggregateInputSchema).optional(),
      _sum: z.lazy(() => GPUSumOrderByAggregateInputSchema).optional(),
    })
    .strict();

export const GPUScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.GPUScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => GPUScalarWhereWithAggregatesInputSchema),
          z.lazy(() => GPUScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      OR: z
        .lazy(() => GPUScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => GPUScalarWhereWithAggregatesInputSchema),
          z.lazy(() => GPUScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      chipset: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      memory: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number(),
        ])
        .optional()
        .nullable(),
      name: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      imageUrl: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      core_clock: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number(),
        ])
        .optional()
        .nullable(),
      boost_clock: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number(),
        ])
        .optional()
        .nullable(),
      color: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      length: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number(),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const CaseWhereInputSchema: z.ZodType<Prisma.CaseWhereInput> = z
  .object({
    AND: z
      .union([
        z.lazy(() => CaseWhereInputSchema),
        z.lazy(() => CaseWhereInputSchema).array(),
      ])
      .optional(),
    OR: z
      .lazy(() => CaseWhereInputSchema)
      .array()
      .optional(),
    NOT: z
      .union([
        z.lazy(() => CaseWhereInputSchema),
        z.lazy(() => CaseWhereInputSchema).array(),
      ])
      .optional(),
    id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    type: z
      .union([
        z.lazy(() => EnumCaseTypeFilterSchema),
        z.lazy(() => CaseTypeSchema),
      ])
      .optional(),
    color: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    imageUrl: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    included_PSU_W: z
      .union([z.lazy(() => IntNullableFilterSchema), z.number()])
      .optional()
      .nullable(),
    amazonLink: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    side_panel: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    external_volume: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    internal_35_bays: z
      .union([z.lazy(() => IntNullableFilterSchema), z.number()])
      .optional()
      .nullable(),
    setups: z.lazy(() => SetupListRelationFilterSchema).optional(),
  })
  .strict();

export const CaseOrderByWithRelationInputSchema: z.ZodType<Prisma.CaseOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      type: z.lazy(() => SortOrderSchema).optional(),
      color: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      included_PSU_W: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      side_panel: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      external_volume: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      internal_35_bays: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      setups: z.lazy(() => SetupOrderByRelationAggregateInputSchema).optional(),
    })
    .strict();

export const CaseWhereUniqueInputSchema: z.ZodType<Prisma.CaseWhereUniqueInput> =
  z
    .object({
      id: z.string().cuid(),
    })
    .and(
      z
        .object({
          id: z.string().cuid().optional(),
          AND: z
            .union([
              z.lazy(() => CaseWhereInputSchema),
              z.lazy(() => CaseWhereInputSchema).array(),
            ])
            .optional(),
          OR: z
            .lazy(() => CaseWhereInputSchema)
            .array()
            .optional(),
          NOT: z
            .union([
              z.lazy(() => CaseWhereInputSchema),
              z.lazy(() => CaseWhereInputSchema).array(),
            ])
            .optional(),
          type: z
            .union([
              z.lazy(() => EnumCaseTypeFilterSchema),
              z.lazy(() => CaseTypeSchema),
            ])
            .optional(),
          color: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          name: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          imageUrl: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          included_PSU_W: z
            .union([z.lazy(() => IntNullableFilterSchema), z.number().int()])
            .optional()
            .nullable(),
          amazonLink: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          side_panel: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          external_volume: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          internal_35_bays: z
            .union([z.lazy(() => IntNullableFilterSchema), z.number().int()])
            .optional()
            .nullable(),
          setups: z.lazy(() => SetupListRelationFilterSchema).optional(),
        })
        .strict(),
    );

export const CaseOrderByWithAggregationInputSchema: z.ZodType<Prisma.CaseOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      type: z.lazy(() => SortOrderSchema).optional(),
      color: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      included_PSU_W: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      side_panel: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      external_volume: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      internal_35_bays: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      _count: z.lazy(() => CaseCountOrderByAggregateInputSchema).optional(),
      _avg: z.lazy(() => CaseAvgOrderByAggregateInputSchema).optional(),
      _max: z.lazy(() => CaseMaxOrderByAggregateInputSchema).optional(),
      _min: z.lazy(() => CaseMinOrderByAggregateInputSchema).optional(),
      _sum: z.lazy(() => CaseSumOrderByAggregateInputSchema).optional(),
    })
    .strict();

export const CaseScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CaseScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => CaseScalarWhereWithAggregatesInputSchema),
          z.lazy(() => CaseScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      OR: z
        .lazy(() => CaseScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => CaseScalarWhereWithAggregatesInputSchema),
          z.lazy(() => CaseScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      type: z
        .union([
          z.lazy(() => EnumCaseTypeWithAggregatesFilterSchema),
          z.lazy(() => CaseTypeSchema),
        ])
        .optional(),
      color: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      name: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      imageUrl: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      included_PSU_W: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number(),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      side_panel: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      external_volume: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      internal_35_bays: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number(),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const PSUWhereInputSchema: z.ZodType<Prisma.PSUWhereInput> = z
  .object({
    AND: z
      .union([
        z.lazy(() => PSUWhereInputSchema),
        z.lazy(() => PSUWhereInputSchema).array(),
      ])
      .optional(),
    OR: z
      .lazy(() => PSUWhereInputSchema)
      .array()
      .optional(),
    NOT: z
      .union([
        z.lazy(() => PSUWhereInputSchema),
        z.lazy(() => PSUWhereInputSchema).array(),
      ])
      .optional(),
    id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    type: z
      .union([
        z.lazy(() => EnumPSUTypeFilterSchema),
        z.lazy(() => PSUTypeSchema),
      ])
      .optional(),
    name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    imageUrl: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    efficiency: z
      .union([z.lazy(() => EnumPSUEffFilterSchema), z.lazy(() => PSUEffSchema)])
      .optional(),
    amazonLink: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    wattage: z
      .union([z.lazy(() => IntNullableFilterSchema), z.number()])
      .optional()
      .nullable(),
    modular: z
      .union([
        z.lazy(() => EnumPSUModulFilterSchema),
        z.lazy(() => PSUModulSchema),
      ])
      .optional(),
    color: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    setups: z.lazy(() => SetupListRelationFilterSchema).optional(),
  })
  .strict();

export const PSUOrderByWithRelationInputSchema: z.ZodType<Prisma.PSUOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      type: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      efficiency: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      wattage: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      modular: z.lazy(() => SortOrderSchema).optional(),
      color: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      setups: z.lazy(() => SetupOrderByRelationAggregateInputSchema).optional(),
    })
    .strict();

export const PSUWhereUniqueInputSchema: z.ZodType<Prisma.PSUWhereUniqueInput> =
  z
    .object({
      id: z.string().cuid(),
    })
    .and(
      z
        .object({
          id: z.string().cuid().optional(),
          AND: z
            .union([
              z.lazy(() => PSUWhereInputSchema),
              z.lazy(() => PSUWhereInputSchema).array(),
            ])
            .optional(),
          OR: z
            .lazy(() => PSUWhereInputSchema)
            .array()
            .optional(),
          NOT: z
            .union([
              z.lazy(() => PSUWhereInputSchema),
              z.lazy(() => PSUWhereInputSchema).array(),
            ])
            .optional(),
          type: z
            .union([
              z.lazy(() => EnumPSUTypeFilterSchema),
              z.lazy(() => PSUTypeSchema),
            ])
            .optional(),
          name: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          imageUrl: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          efficiency: z
            .union([
              z.lazy(() => EnumPSUEffFilterSchema),
              z.lazy(() => PSUEffSchema),
            ])
            .optional(),
          amazonLink: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          wattage: z
            .union([z.lazy(() => IntNullableFilterSchema), z.number().int()])
            .optional()
            .nullable(),
          modular: z
            .union([
              z.lazy(() => EnumPSUModulFilterSchema),
              z.lazy(() => PSUModulSchema),
            ])
            .optional(),
          color: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          setups: z.lazy(() => SetupListRelationFilterSchema).optional(),
        })
        .strict(),
    );

export const PSUOrderByWithAggregationInputSchema: z.ZodType<Prisma.PSUOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      type: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      efficiency: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      wattage: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      modular: z.lazy(() => SortOrderSchema).optional(),
      color: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      _count: z.lazy(() => PSUCountOrderByAggregateInputSchema).optional(),
      _avg: z.lazy(() => PSUAvgOrderByAggregateInputSchema).optional(),
      _max: z.lazy(() => PSUMaxOrderByAggregateInputSchema).optional(),
      _min: z.lazy(() => PSUMinOrderByAggregateInputSchema).optional(),
      _sum: z.lazy(() => PSUSumOrderByAggregateInputSchema).optional(),
    })
    .strict();

export const PSUScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PSUScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => PSUScalarWhereWithAggregatesInputSchema),
          z.lazy(() => PSUScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      OR: z
        .lazy(() => PSUScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => PSUScalarWhereWithAggregatesInputSchema),
          z.lazy(() => PSUScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      type: z
        .union([
          z.lazy(() => EnumPSUTypeWithAggregatesFilterSchema),
          z.lazy(() => PSUTypeSchema),
        ])
        .optional(),
      name: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      imageUrl: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      efficiency: z
        .union([
          z.lazy(() => EnumPSUEffWithAggregatesFilterSchema),
          z.lazy(() => PSUEffSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      wattage: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number(),
        ])
        .optional()
        .nullable(),
      modular: z
        .union([
          z.lazy(() => EnumPSUModulWithAggregatesFilterSchema),
          z.lazy(() => PSUModulSchema),
        ])
        .optional(),
      color: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const SetupWhereInputSchema: z.ZodType<Prisma.SetupWhereInput> = z
  .object({
    AND: z
      .union([
        z.lazy(() => SetupWhereInputSchema),
        z.lazy(() => SetupWhereInputSchema).array(),
      ])
      .optional(),
    OR: z
      .lazy(() => SetupWhereInputSchema)
      .array()
      .optional(),
    NOT: z
      .union([
        z.lazy(() => SetupWhereInputSchema),
        z.lazy(() => SetupWhereInputSchema).array(),
      ])
      .optional(),
    id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    cpu_id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    gpu_id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    hdd_id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    case_id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    psu_id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    ram_id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    name: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    sound_card_id: z
      .union([z.lazy(() => StringFilterSchema), z.string()])
      .optional(),
    cpu_cooler_id: z
      .union([z.lazy(() => StringFilterSchema), z.string()])
      .optional(),
    motherboard_id: z
      .union([z.lazy(() => StringFilterSchema), z.string()])
      .optional(),
    headphones_id: z
      .union([z.lazy(() => StringFilterSchema), z.string()])
      .optional(),
    keyboard_id: z
      .union([z.lazy(() => StringFilterSchema), z.string()])
      .optional(),
    mouse_id: z
      .union([z.lazy(() => StringFilterSchema), z.string()])
      .optional(),
    webcam_id: z
      .union([z.lazy(() => StringFilterSchema), z.string()])
      .optional(),
    user_id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    cpu: z
      .union([
        z.lazy(() => CPURelationFilterSchema),
        z.lazy(() => CPUWhereInputSchema),
      ])
      .optional(),
    gpu: z
      .union([
        z.lazy(() => GPURelationFilterSchema),
        z.lazy(() => GPUWhereInputSchema),
      ])
      .optional(),
    hdd: z
      .union([
        z.lazy(() => HDDRelationFilterSchema),
        z.lazy(() => HDDWhereInputSchema),
      ])
      .optional(),
    case: z
      .union([
        z.lazy(() => CaseRelationFilterSchema),
        z.lazy(() => CaseWhereInputSchema),
      ])
      .optional(),
    ram: z
      .union([
        z.lazy(() => RAMRelationFilterSchema),
        z.lazy(() => RAMWhereInputSchema),
      ])
      .optional(),
    psu: z
      .union([
        z.lazy(() => PSURelationFilterSchema),
        z.lazy(() => PSUWhereInputSchema),
      ])
      .optional(),
    monitors: z.lazy(() => MonitorsOfSetupListRelationFilterSchema).optional(),
    sdds: z.lazy(() => SSDOfSetupListRelationFilterSchema).optional(),
    sound_card: z
      .union([
        z.lazy(() => SoundCardRelationFilterSchema),
        z.lazy(() => SoundCardWhereInputSchema),
      ])
      .optional(),
    cpu_cooler: z
      .union([
        z.lazy(() => CPUCoolerRelationFilterSchema),
        z.lazy(() => CPUCoolerWhereInputSchema),
      ])
      .optional(),
    motherboard: z
      .union([
        z.lazy(() => MotherboardRelationFilterSchema),
        z.lazy(() => MotherboardWhereInputSchema),
      ])
      .optional(),
    headphones: z
      .union([
        z.lazy(() => HeadphonesRelationFilterSchema),
        z.lazy(() => HeadphonesWhereInputSchema),
      ])
      .optional(),
    keyboard: z
      .union([
        z.lazy(() => KeyboardRelationFilterSchema),
        z.lazy(() => KeyboardWhereInputSchema),
      ])
      .optional(),
    mouse: z
      .union([
        z.lazy(() => MouseRelationFilterSchema),
        z.lazy(() => MouseWhereInputSchema),
      ])
      .optional(),
    speakers: z.lazy(() => SpeakersOfSetupListRelationFilterSchema).optional(),
    webcam: z
      .union([
        z.lazy(() => WebcamRelationFilterSchema),
        z.lazy(() => WebcamWhereInputSchema),
      ])
      .optional(),
    case_fans: z.lazy(() => CaseFanOfSetupListRelationFilterSchema).optional(),
    user: z
      .union([
        z.lazy(() => UserRelationFilterSchema),
        z.lazy(() => UserWhereInputSchema),
      ])
      .optional(),
  })
  .strict();

export const SetupOrderByWithRelationInputSchema: z.ZodType<Prisma.SetupOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      cpu_id: z.lazy(() => SortOrderSchema).optional(),
      gpu_id: z.lazy(() => SortOrderSchema).optional(),
      hdd_id: z.lazy(() => SortOrderSchema).optional(),
      case_id: z.lazy(() => SortOrderSchema).optional(),
      psu_id: z.lazy(() => SortOrderSchema).optional(),
      ram_id: z.lazy(() => SortOrderSchema).optional(),
      name: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      sound_card_id: z.lazy(() => SortOrderSchema).optional(),
      cpu_cooler_id: z.lazy(() => SortOrderSchema).optional(),
      motherboard_id: z.lazy(() => SortOrderSchema).optional(),
      headphones_id: z.lazy(() => SortOrderSchema).optional(),
      keyboard_id: z.lazy(() => SortOrderSchema).optional(),
      mouse_id: z.lazy(() => SortOrderSchema).optional(),
      webcam_id: z.lazy(() => SortOrderSchema).optional(),
      user_id: z.lazy(() => SortOrderSchema).optional(),
      cpu: z.lazy(() => CPUOrderByWithRelationInputSchema).optional(),
      gpu: z.lazy(() => GPUOrderByWithRelationInputSchema).optional(),
      hdd: z.lazy(() => HDDOrderByWithRelationInputSchema).optional(),
      case: z.lazy(() => CaseOrderByWithRelationInputSchema).optional(),
      ram: z.lazy(() => RAMOrderByWithRelationInputSchema).optional(),
      psu: z.lazy(() => PSUOrderByWithRelationInputSchema).optional(),
      monitors: z
        .lazy(() => MonitorsOfSetupOrderByRelationAggregateInputSchema)
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupOrderByRelationAggregateInputSchema)
        .optional(),
      sound_card: z
        .lazy(() => SoundCardOrderByWithRelationInputSchema)
        .optional(),
      cpu_cooler: z
        .lazy(() => CPUCoolerOrderByWithRelationInputSchema)
        .optional(),
      motherboard: z
        .lazy(() => MotherboardOrderByWithRelationInputSchema)
        .optional(),
      headphones: z
        .lazy(() => HeadphonesOrderByWithRelationInputSchema)
        .optional(),
      keyboard: z.lazy(() => KeyboardOrderByWithRelationInputSchema).optional(),
      mouse: z.lazy(() => MouseOrderByWithRelationInputSchema).optional(),
      speakers: z
        .lazy(() => SpeakersOfSetupOrderByRelationAggregateInputSchema)
        .optional(),
      webcam: z.lazy(() => WebcamOrderByWithRelationInputSchema).optional(),
      case_fans: z
        .lazy(() => CaseFanOfSetupOrderByRelationAggregateInputSchema)
        .optional(),
      user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
    })
    .strict();

export const SetupWhereUniqueInputSchema: z.ZodType<Prisma.SetupWhereUniqueInput> =
  z
    .object({
      id: z.string().cuid(),
    })
    .and(
      z
        .object({
          id: z.string().cuid().optional(),
          AND: z
            .union([
              z.lazy(() => SetupWhereInputSchema),
              z.lazy(() => SetupWhereInputSchema).array(),
            ])
            .optional(),
          OR: z
            .lazy(() => SetupWhereInputSchema)
            .array()
            .optional(),
          NOT: z
            .union([
              z.lazy(() => SetupWhereInputSchema),
              z.lazy(() => SetupWhereInputSchema).array(),
            ])
            .optional(),
          cpu_id: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          gpu_id: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          hdd_id: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          case_id: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          psu_id: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          ram_id: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          name: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          sound_card_id: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          cpu_cooler_id: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          motherboard_id: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          headphones_id: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          keyboard_id: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          mouse_id: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          webcam_id: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          user_id: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          cpu: z
            .union([
              z.lazy(() => CPURelationFilterSchema),
              z.lazy(() => CPUWhereInputSchema),
            ])
            .optional(),
          gpu: z
            .union([
              z.lazy(() => GPURelationFilterSchema),
              z.lazy(() => GPUWhereInputSchema),
            ])
            .optional(),
          hdd: z
            .union([
              z.lazy(() => HDDRelationFilterSchema),
              z.lazy(() => HDDWhereInputSchema),
            ])
            .optional(),
          case: z
            .union([
              z.lazy(() => CaseRelationFilterSchema),
              z.lazy(() => CaseWhereInputSchema),
            ])
            .optional(),
          ram: z
            .union([
              z.lazy(() => RAMRelationFilterSchema),
              z.lazy(() => RAMWhereInputSchema),
            ])
            .optional(),
          psu: z
            .union([
              z.lazy(() => PSURelationFilterSchema),
              z.lazy(() => PSUWhereInputSchema),
            ])
            .optional(),
          monitors: z
            .lazy(() => MonitorsOfSetupListRelationFilterSchema)
            .optional(),
          sdds: z.lazy(() => SSDOfSetupListRelationFilterSchema).optional(),
          sound_card: z
            .union([
              z.lazy(() => SoundCardRelationFilterSchema),
              z.lazy(() => SoundCardWhereInputSchema),
            ])
            .optional(),
          cpu_cooler: z
            .union([
              z.lazy(() => CPUCoolerRelationFilterSchema),
              z.lazy(() => CPUCoolerWhereInputSchema),
            ])
            .optional(),
          motherboard: z
            .union([
              z.lazy(() => MotherboardRelationFilterSchema),
              z.lazy(() => MotherboardWhereInputSchema),
            ])
            .optional(),
          headphones: z
            .union([
              z.lazy(() => HeadphonesRelationFilterSchema),
              z.lazy(() => HeadphonesWhereInputSchema),
            ])
            .optional(),
          keyboard: z
            .union([
              z.lazy(() => KeyboardRelationFilterSchema),
              z.lazy(() => KeyboardWhereInputSchema),
            ])
            .optional(),
          mouse: z
            .union([
              z.lazy(() => MouseRelationFilterSchema),
              z.lazy(() => MouseWhereInputSchema),
            ])
            .optional(),
          speakers: z
            .lazy(() => SpeakersOfSetupListRelationFilterSchema)
            .optional(),
          webcam: z
            .union([
              z.lazy(() => WebcamRelationFilterSchema),
              z.lazy(() => WebcamWhereInputSchema),
            ])
            .optional(),
          case_fans: z
            .lazy(() => CaseFanOfSetupListRelationFilterSchema)
            .optional(),
          user: z
            .union([
              z.lazy(() => UserRelationFilterSchema),
              z.lazy(() => UserWhereInputSchema),
            ])
            .optional(),
        })
        .strict(),
    );

export const SetupOrderByWithAggregationInputSchema: z.ZodType<Prisma.SetupOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      cpu_id: z.lazy(() => SortOrderSchema).optional(),
      gpu_id: z.lazy(() => SortOrderSchema).optional(),
      hdd_id: z.lazy(() => SortOrderSchema).optional(),
      case_id: z.lazy(() => SortOrderSchema).optional(),
      psu_id: z.lazy(() => SortOrderSchema).optional(),
      ram_id: z.lazy(() => SortOrderSchema).optional(),
      name: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      sound_card_id: z.lazy(() => SortOrderSchema).optional(),
      cpu_cooler_id: z.lazy(() => SortOrderSchema).optional(),
      motherboard_id: z.lazy(() => SortOrderSchema).optional(),
      headphones_id: z.lazy(() => SortOrderSchema).optional(),
      keyboard_id: z.lazy(() => SortOrderSchema).optional(),
      mouse_id: z.lazy(() => SortOrderSchema).optional(),
      webcam_id: z.lazy(() => SortOrderSchema).optional(),
      user_id: z.lazy(() => SortOrderSchema).optional(),
      _count: z.lazy(() => SetupCountOrderByAggregateInputSchema).optional(),
      _max: z.lazy(() => SetupMaxOrderByAggregateInputSchema).optional(),
      _min: z.lazy(() => SetupMinOrderByAggregateInputSchema).optional(),
    })
    .strict();

export const SetupScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SetupScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => SetupScalarWhereWithAggregatesInputSchema),
          z.lazy(() => SetupScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      OR: z
        .lazy(() => SetupScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => SetupScalarWhereWithAggregatesInputSchema),
          z.lazy(() => SetupScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      cpu_id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      gpu_id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      hdd_id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      case_id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      psu_id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      ram_id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      name: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      sound_card_id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      cpu_cooler_id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      motherboard_id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      headphones_id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      keyboard_id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      mouse_id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      webcam_id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      user_id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
    })
    .strict();

export const SSDOfSetupWhereInputSchema: z.ZodType<Prisma.SSDOfSetupWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => SSDOfSetupWhereInputSchema),
          z.lazy(() => SSDOfSetupWhereInputSchema).array(),
        ])
        .optional(),
      OR: z
        .lazy(() => SSDOfSetupWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => SSDOfSetupWhereInputSchema),
          z.lazy(() => SSDOfSetupWhereInputSchema).array(),
        ])
        .optional(),
      ssd_id: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      setup_id: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      ssd: z
        .union([
          z.lazy(() => SSDRelationFilterSchema),
          z.lazy(() => SSDWhereInputSchema),
        ])
        .optional(),
      setup: z
        .union([
          z.lazy(() => SetupRelationFilterSchema),
          z.lazy(() => SetupWhereInputSchema),
        ])
        .optional(),
    })
    .strict();

export const SSDOfSetupOrderByWithRelationInputSchema: z.ZodType<Prisma.SSDOfSetupOrderByWithRelationInput> =
  z
    .object({
      ssd_id: z.lazy(() => SortOrderSchema).optional(),
      setup_id: z.lazy(() => SortOrderSchema).optional(),
      ssd: z.lazy(() => SSDOrderByWithRelationInputSchema).optional(),
      setup: z.lazy(() => SetupOrderByWithRelationInputSchema).optional(),
    })
    .strict();

export const SSDOfSetupWhereUniqueInputSchema: z.ZodType<Prisma.SSDOfSetupWhereUniqueInput> =
  z
    .object({
      ssd_id_setup_id: z.lazy(
        () => SSDOfSetupSsd_idSetup_idCompoundUniqueInputSchema,
      ),
    })
    .and(
      z
        .object({
          ssd_id_setup_id: z
            .lazy(() => SSDOfSetupSsd_idSetup_idCompoundUniqueInputSchema)
            .optional(),
          AND: z
            .union([
              z.lazy(() => SSDOfSetupWhereInputSchema),
              z.lazy(() => SSDOfSetupWhereInputSchema).array(),
            ])
            .optional(),
          OR: z
            .lazy(() => SSDOfSetupWhereInputSchema)
            .array()
            .optional(),
          NOT: z
            .union([
              z.lazy(() => SSDOfSetupWhereInputSchema),
              z.lazy(() => SSDOfSetupWhereInputSchema).array(),
            ])
            .optional(),
          ssd_id: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          setup_id: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          ssd: z
            .union([
              z.lazy(() => SSDRelationFilterSchema),
              z.lazy(() => SSDWhereInputSchema),
            ])
            .optional(),
          setup: z
            .union([
              z.lazy(() => SetupRelationFilterSchema),
              z.lazy(() => SetupWhereInputSchema),
            ])
            .optional(),
        })
        .strict(),
    );

export const SSDOfSetupOrderByWithAggregationInputSchema: z.ZodType<Prisma.SSDOfSetupOrderByWithAggregationInput> =
  z
    .object({
      ssd_id: z.lazy(() => SortOrderSchema).optional(),
      setup_id: z.lazy(() => SortOrderSchema).optional(),
      _count: z
        .lazy(() => SSDOfSetupCountOrderByAggregateInputSchema)
        .optional(),
      _max: z.lazy(() => SSDOfSetupMaxOrderByAggregateInputSchema).optional(),
      _min: z.lazy(() => SSDOfSetupMinOrderByAggregateInputSchema).optional(),
    })
    .strict();

export const SSDOfSetupScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SSDOfSetupScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => SSDOfSetupScalarWhereWithAggregatesInputSchema),
          z.lazy(() => SSDOfSetupScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      OR: z
        .lazy(() => SSDOfSetupScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => SSDOfSetupScalarWhereWithAggregatesInputSchema),
          z.lazy(() => SSDOfSetupScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      ssd_id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      setup_id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
    })
    .strict();

export const CaseFanOfSetupWhereInputSchema: z.ZodType<Prisma.CaseFanOfSetupWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => CaseFanOfSetupWhereInputSchema),
          z.lazy(() => CaseFanOfSetupWhereInputSchema).array(),
        ])
        .optional(),
      OR: z
        .lazy(() => CaseFanOfSetupWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => CaseFanOfSetupWhereInputSchema),
          z.lazy(() => CaseFanOfSetupWhereInputSchema).array(),
        ])
        .optional(),
      case_fan_id: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      setup_id: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      quantity: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      case_fan: z
        .union([
          z.lazy(() => CaseFanRelationFilterSchema),
          z.lazy(() => CaseFanWhereInputSchema),
        ])
        .optional(),
      setup: z
        .union([
          z.lazy(() => SetupRelationFilterSchema),
          z.lazy(() => SetupWhereInputSchema),
        ])
        .optional(),
    })
    .strict();

export const CaseFanOfSetupOrderByWithRelationInputSchema: z.ZodType<Prisma.CaseFanOfSetupOrderByWithRelationInput> =
  z
    .object({
      case_fan_id: z.lazy(() => SortOrderSchema).optional(),
      setup_id: z.lazy(() => SortOrderSchema).optional(),
      quantity: z.lazy(() => SortOrderSchema).optional(),
      case_fan: z.lazy(() => CaseFanOrderByWithRelationInputSchema).optional(),
      setup: z.lazy(() => SetupOrderByWithRelationInputSchema).optional(),
    })
    .strict();

export const CaseFanOfSetupWhereUniqueInputSchema: z.ZodType<Prisma.CaseFanOfSetupWhereUniqueInput> =
  z
    .object({
      case_fan_id_setup_id: z.lazy(
        () => CaseFanOfSetupCase_fan_idSetup_idCompoundUniqueInputSchema,
      ),
    })
    .and(
      z
        .object({
          case_fan_id_setup_id: z
            .lazy(
              () => CaseFanOfSetupCase_fan_idSetup_idCompoundUniqueInputSchema,
            )
            .optional(),
          AND: z
            .union([
              z.lazy(() => CaseFanOfSetupWhereInputSchema),
              z.lazy(() => CaseFanOfSetupWhereInputSchema).array(),
            ])
            .optional(),
          OR: z
            .lazy(() => CaseFanOfSetupWhereInputSchema)
            .array()
            .optional(),
          NOT: z
            .union([
              z.lazy(() => CaseFanOfSetupWhereInputSchema),
              z.lazy(() => CaseFanOfSetupWhereInputSchema).array(),
            ])
            .optional(),
          case_fan_id: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          setup_id: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          quantity: z
            .union([z.lazy(() => IntFilterSchema), z.number().int()])
            .optional(),
          case_fan: z
            .union([
              z.lazy(() => CaseFanRelationFilterSchema),
              z.lazy(() => CaseFanWhereInputSchema),
            ])
            .optional(),
          setup: z
            .union([
              z.lazy(() => SetupRelationFilterSchema),
              z.lazy(() => SetupWhereInputSchema),
            ])
            .optional(),
        })
        .strict(),
    );

export const CaseFanOfSetupOrderByWithAggregationInputSchema: z.ZodType<Prisma.CaseFanOfSetupOrderByWithAggregationInput> =
  z
    .object({
      case_fan_id: z.lazy(() => SortOrderSchema).optional(),
      setup_id: z.lazy(() => SortOrderSchema).optional(),
      quantity: z.lazy(() => SortOrderSchema).optional(),
      _count: z
        .lazy(() => CaseFanOfSetupCountOrderByAggregateInputSchema)
        .optional(),
      _avg: z
        .lazy(() => CaseFanOfSetupAvgOrderByAggregateInputSchema)
        .optional(),
      _max: z
        .lazy(() => CaseFanOfSetupMaxOrderByAggregateInputSchema)
        .optional(),
      _min: z
        .lazy(() => CaseFanOfSetupMinOrderByAggregateInputSchema)
        .optional(),
      _sum: z
        .lazy(() => CaseFanOfSetupSumOrderByAggregateInputSchema)
        .optional(),
    })
    .strict();

export const CaseFanOfSetupScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CaseFanOfSetupScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => CaseFanOfSetupScalarWhereWithAggregatesInputSchema),
          z
            .lazy(() => CaseFanOfSetupScalarWhereWithAggregatesInputSchema)
            .array(),
        ])
        .optional(),
      OR: z
        .lazy(() => CaseFanOfSetupScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => CaseFanOfSetupScalarWhereWithAggregatesInputSchema),
          z
            .lazy(() => CaseFanOfSetupScalarWhereWithAggregatesInputSchema)
            .array(),
        ])
        .optional(),
      case_fan_id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      setup_id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      quantity: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
    })
    .strict();

export const SpeakersOfSetupWhereInputSchema: z.ZodType<Prisma.SpeakersOfSetupWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => SpeakersOfSetupWhereInputSchema),
          z.lazy(() => SpeakersOfSetupWhereInputSchema).array(),
        ])
        .optional(),
      OR: z
        .lazy(() => SpeakersOfSetupWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => SpeakersOfSetupWhereInputSchema),
          z.lazy(() => SpeakersOfSetupWhereInputSchema).array(),
        ])
        .optional(),
      speakers_id: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      setup_id: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      quantity: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      speakers: z
        .union([
          z.lazy(() => SpeakersRelationFilterSchema),
          z.lazy(() => SpeakersWhereInputSchema),
        ])
        .optional(),
      setup: z
        .union([
          z.lazy(() => SetupRelationFilterSchema),
          z.lazy(() => SetupWhereInputSchema),
        ])
        .optional(),
    })
    .strict();

export const SpeakersOfSetupOrderByWithRelationInputSchema: z.ZodType<Prisma.SpeakersOfSetupOrderByWithRelationInput> =
  z
    .object({
      speakers_id: z.lazy(() => SortOrderSchema).optional(),
      setup_id: z.lazy(() => SortOrderSchema).optional(),
      quantity: z.lazy(() => SortOrderSchema).optional(),
      speakers: z.lazy(() => SpeakersOrderByWithRelationInputSchema).optional(),
      setup: z.lazy(() => SetupOrderByWithRelationInputSchema).optional(),
    })
    .strict();

export const SpeakersOfSetupWhereUniqueInputSchema: z.ZodType<Prisma.SpeakersOfSetupWhereUniqueInput> =
  z
    .object({
      speakers_id_setup_id: z.lazy(
        () => SpeakersOfSetupSpeakers_idSetup_idCompoundUniqueInputSchema,
      ),
    })
    .and(
      z
        .object({
          speakers_id_setup_id: z
            .lazy(
              () => SpeakersOfSetupSpeakers_idSetup_idCompoundUniqueInputSchema,
            )
            .optional(),
          AND: z
            .union([
              z.lazy(() => SpeakersOfSetupWhereInputSchema),
              z.lazy(() => SpeakersOfSetupWhereInputSchema).array(),
            ])
            .optional(),
          OR: z
            .lazy(() => SpeakersOfSetupWhereInputSchema)
            .array()
            .optional(),
          NOT: z
            .union([
              z.lazy(() => SpeakersOfSetupWhereInputSchema),
              z.lazy(() => SpeakersOfSetupWhereInputSchema).array(),
            ])
            .optional(),
          speakers_id: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          setup_id: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          quantity: z
            .union([z.lazy(() => IntFilterSchema), z.number().int()])
            .optional(),
          speakers: z
            .union([
              z.lazy(() => SpeakersRelationFilterSchema),
              z.lazy(() => SpeakersWhereInputSchema),
            ])
            .optional(),
          setup: z
            .union([
              z.lazy(() => SetupRelationFilterSchema),
              z.lazy(() => SetupWhereInputSchema),
            ])
            .optional(),
        })
        .strict(),
    );

export const SpeakersOfSetupOrderByWithAggregationInputSchema: z.ZodType<Prisma.SpeakersOfSetupOrderByWithAggregationInput> =
  z
    .object({
      speakers_id: z.lazy(() => SortOrderSchema).optional(),
      setup_id: z.lazy(() => SortOrderSchema).optional(),
      quantity: z.lazy(() => SortOrderSchema).optional(),
      _count: z
        .lazy(() => SpeakersOfSetupCountOrderByAggregateInputSchema)
        .optional(),
      _avg: z
        .lazy(() => SpeakersOfSetupAvgOrderByAggregateInputSchema)
        .optional(),
      _max: z
        .lazy(() => SpeakersOfSetupMaxOrderByAggregateInputSchema)
        .optional(),
      _min: z
        .lazy(() => SpeakersOfSetupMinOrderByAggregateInputSchema)
        .optional(),
      _sum: z
        .lazy(() => SpeakersOfSetupSumOrderByAggregateInputSchema)
        .optional(),
    })
    .strict();

export const SpeakersOfSetupScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SpeakersOfSetupScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => SpeakersOfSetupScalarWhereWithAggregatesInputSchema),
          z
            .lazy(() => SpeakersOfSetupScalarWhereWithAggregatesInputSchema)
            .array(),
        ])
        .optional(),
      OR: z
        .lazy(() => SpeakersOfSetupScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => SpeakersOfSetupScalarWhereWithAggregatesInputSchema),
          z
            .lazy(() => SpeakersOfSetupScalarWhereWithAggregatesInputSchema)
            .array(),
        ])
        .optional(),
      speakers_id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      setup_id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      quantity: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
    })
    .strict();

export const MonitorsOfSetupWhereInputSchema: z.ZodType<Prisma.MonitorsOfSetupWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => MonitorsOfSetupWhereInputSchema),
          z.lazy(() => MonitorsOfSetupWhereInputSchema).array(),
        ])
        .optional(),
      OR: z
        .lazy(() => MonitorsOfSetupWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => MonitorsOfSetupWhereInputSchema),
          z.lazy(() => MonitorsOfSetupWhereInputSchema).array(),
        ])
        .optional(),
      monitor_id: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      setup_id: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      quantity: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
      monitor: z
        .union([
          z.lazy(() => MonitorRelationFilterSchema),
          z.lazy(() => MonitorWhereInputSchema),
        ])
        .optional(),
      setup: z
        .union([
          z.lazy(() => SetupRelationFilterSchema),
          z.lazy(() => SetupWhereInputSchema),
        ])
        .optional(),
    })
    .strict();

export const MonitorsOfSetupOrderByWithRelationInputSchema: z.ZodType<Prisma.MonitorsOfSetupOrderByWithRelationInput> =
  z
    .object({
      monitor_id: z.lazy(() => SortOrderSchema).optional(),
      setup_id: z.lazy(() => SortOrderSchema).optional(),
      quantity: z.lazy(() => SortOrderSchema).optional(),
      monitor: z.lazy(() => MonitorOrderByWithRelationInputSchema).optional(),
      setup: z.lazy(() => SetupOrderByWithRelationInputSchema).optional(),
    })
    .strict();

export const MonitorsOfSetupWhereUniqueInputSchema: z.ZodType<Prisma.MonitorsOfSetupWhereUniqueInput> =
  z
    .object({
      monitor_id_setup_id: z.lazy(
        () => MonitorsOfSetupMonitor_idSetup_idCompoundUniqueInputSchema,
      ),
    })
    .and(
      z
        .object({
          monitor_id_setup_id: z
            .lazy(
              () => MonitorsOfSetupMonitor_idSetup_idCompoundUniqueInputSchema,
            )
            .optional(),
          AND: z
            .union([
              z.lazy(() => MonitorsOfSetupWhereInputSchema),
              z.lazy(() => MonitorsOfSetupWhereInputSchema).array(),
            ])
            .optional(),
          OR: z
            .lazy(() => MonitorsOfSetupWhereInputSchema)
            .array()
            .optional(),
          NOT: z
            .union([
              z.lazy(() => MonitorsOfSetupWhereInputSchema),
              z.lazy(() => MonitorsOfSetupWhereInputSchema).array(),
            ])
            .optional(),
          monitor_id: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          setup_id: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          quantity: z
            .union([z.lazy(() => IntFilterSchema), z.number().int()])
            .optional(),
          monitor: z
            .union([
              z.lazy(() => MonitorRelationFilterSchema),
              z.lazy(() => MonitorWhereInputSchema),
            ])
            .optional(),
          setup: z
            .union([
              z.lazy(() => SetupRelationFilterSchema),
              z.lazy(() => SetupWhereInputSchema),
            ])
            .optional(),
        })
        .strict(),
    );

export const MonitorsOfSetupOrderByWithAggregationInputSchema: z.ZodType<Prisma.MonitorsOfSetupOrderByWithAggregationInput> =
  z
    .object({
      monitor_id: z.lazy(() => SortOrderSchema).optional(),
      setup_id: z.lazy(() => SortOrderSchema).optional(),
      quantity: z.lazy(() => SortOrderSchema).optional(),
      _count: z
        .lazy(() => MonitorsOfSetupCountOrderByAggregateInputSchema)
        .optional(),
      _avg: z
        .lazy(() => MonitorsOfSetupAvgOrderByAggregateInputSchema)
        .optional(),
      _max: z
        .lazy(() => MonitorsOfSetupMaxOrderByAggregateInputSchema)
        .optional(),
      _min: z
        .lazy(() => MonitorsOfSetupMinOrderByAggregateInputSchema)
        .optional(),
      _sum: z
        .lazy(() => MonitorsOfSetupSumOrderByAggregateInputSchema)
        .optional(),
    })
    .strict();

export const MonitorsOfSetupScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.MonitorsOfSetupScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => MonitorsOfSetupScalarWhereWithAggregatesInputSchema),
          z
            .lazy(() => MonitorsOfSetupScalarWhereWithAggregatesInputSchema)
            .array(),
        ])
        .optional(),
      OR: z
        .lazy(() => MonitorsOfSetupScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => MonitorsOfSetupScalarWhereWithAggregatesInputSchema),
          z
            .lazy(() => MonitorsOfSetupScalarWhereWithAggregatesInputSchema)
            .array(),
        ])
        .optional(),
      monitor_id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      setup_id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      quantity: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
    })
    .strict();

export const MonitorWhereInputSchema: z.ZodType<Prisma.MonitorWhereInput> = z
  .object({
    AND: z
      .union([
        z.lazy(() => MonitorWhereInputSchema),
        z.lazy(() => MonitorWhereInputSchema).array(),
      ])
      .optional(),
    OR: z
      .lazy(() => MonitorWhereInputSchema)
      .array()
      .optional(),
    NOT: z
      .union([
        z.lazy(() => MonitorWhereInputSchema),
        z.lazy(() => MonitorWhereInputSchema).array(),
      ])
      .optional(),
    id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    screen_size: z
      .union([z.lazy(() => IntNullableFilterSchema), z.number()])
      .optional()
      .nullable(),
    resolution: z.lazy(() => IntNullableListFilterSchema).optional(),
    amazonLink: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    imageUrl: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    refresh_rate: z
      .union([z.lazy(() => IntNullableFilterSchema), z.number()])
      .optional()
      .nullable(),
    response_time: z
      .union([z.lazy(() => IntNullableFilterSchema), z.number()])
      .optional()
      .nullable(),
    panel_type: z
      .union([
        z.lazy(() => EnumMonitorPanelTypeFilterSchema),
        z.lazy(() => MonitorPanelTypeSchema),
      ])
      .optional(),
    aspect_ratio: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    setups: z.lazy(() => MonitorsOfSetupListRelationFilterSchema).optional(),
  })
  .strict();

export const MonitorOrderByWithRelationInputSchema: z.ZodType<Prisma.MonitorOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      screen_size: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      resolution: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      refresh_rate: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      response_time: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      panel_type: z.lazy(() => SortOrderSchema).optional(),
      aspect_ratio: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      setups: z
        .lazy(() => MonitorsOfSetupOrderByRelationAggregateInputSchema)
        .optional(),
    })
    .strict();

export const MonitorWhereUniqueInputSchema: z.ZodType<Prisma.MonitorWhereUniqueInput> =
  z
    .object({
      id: z.string().cuid(),
    })
    .and(
      z
        .object({
          id: z.string().cuid().optional(),
          AND: z
            .union([
              z.lazy(() => MonitorWhereInputSchema),
              z.lazy(() => MonitorWhereInputSchema).array(),
            ])
            .optional(),
          OR: z
            .lazy(() => MonitorWhereInputSchema)
            .array()
            .optional(),
          NOT: z
            .union([
              z.lazy(() => MonitorWhereInputSchema),
              z.lazy(() => MonitorWhereInputSchema).array(),
            ])
            .optional(),
          screen_size: z
            .union([z.lazy(() => IntNullableFilterSchema), z.number().int()])
            .optional()
            .nullable(),
          resolution: z.lazy(() => IntNullableListFilterSchema).optional(),
          amazonLink: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          name: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          imageUrl: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          refresh_rate: z
            .union([z.lazy(() => IntNullableFilterSchema), z.number().int()])
            .optional()
            .nullable(),
          response_time: z
            .union([z.lazy(() => IntNullableFilterSchema), z.number().int()])
            .optional()
            .nullable(),
          panel_type: z
            .union([
              z.lazy(() => EnumMonitorPanelTypeFilterSchema),
              z.lazy(() => MonitorPanelTypeSchema),
            ])
            .optional(),
          aspect_ratio: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          setups: z
            .lazy(() => MonitorsOfSetupListRelationFilterSchema)
            .optional(),
        })
        .strict(),
    );

export const MonitorOrderByWithAggregationInputSchema: z.ZodType<Prisma.MonitorOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      screen_size: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      resolution: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      refresh_rate: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      response_time: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      panel_type: z.lazy(() => SortOrderSchema).optional(),
      aspect_ratio: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      _count: z.lazy(() => MonitorCountOrderByAggregateInputSchema).optional(),
      _avg: z.lazy(() => MonitorAvgOrderByAggregateInputSchema).optional(),
      _max: z.lazy(() => MonitorMaxOrderByAggregateInputSchema).optional(),
      _min: z.lazy(() => MonitorMinOrderByAggregateInputSchema).optional(),
      _sum: z.lazy(() => MonitorSumOrderByAggregateInputSchema).optional(),
    })
    .strict();

export const MonitorScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.MonitorScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => MonitorScalarWhereWithAggregatesInputSchema),
          z.lazy(() => MonitorScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      OR: z
        .lazy(() => MonitorScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => MonitorScalarWhereWithAggregatesInputSchema),
          z.lazy(() => MonitorScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      screen_size: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number(),
        ])
        .optional()
        .nullable(),
      resolution: z.lazy(() => IntNullableListFilterSchema).optional(),
      amazonLink: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      name: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      imageUrl: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      refresh_rate: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number(),
        ])
        .optional()
        .nullable(),
      response_time: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number(),
        ])
        .optional()
        .nullable(),
      panel_type: z
        .union([
          z.lazy(() => EnumMonitorPanelTypeWithAggregatesFilterSchema),
          z.lazy(() => MonitorPanelTypeSchema),
        ])
        .optional(),
      aspect_ratio: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const SoundCardWhereInputSchema: z.ZodType<Prisma.SoundCardWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => SoundCardWhereInputSchema),
          z.lazy(() => SoundCardWhereInputSchema).array(),
        ])
        .optional(),
      OR: z
        .lazy(() => SoundCardWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => SoundCardWhereInputSchema),
          z.lazy(() => SoundCardWhereInputSchema).array(),
        ])
        .optional(),
      id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
      channels: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      digital_audio: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
      imageUrl: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      amazonLink: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      snr: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      sample_rate: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      chipset: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      interface: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      setups: z.lazy(() => SetupListRelationFilterSchema).optional(),
    })
    .strict();

export const SoundCardOrderByWithRelationInputSchema: z.ZodType<Prisma.SoundCardOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      channels: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      digital_audio: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      snr: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      sample_rate: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      chipset: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      interface: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      setups: z.lazy(() => SetupOrderByRelationAggregateInputSchema).optional(),
    })
    .strict();

export const SoundCardWhereUniqueInputSchema: z.ZodType<Prisma.SoundCardWhereUniqueInput> =
  z
    .object({
      id: z.string().cuid(),
    })
    .and(
      z
        .object({
          id: z.string().cuid().optional(),
          AND: z
            .union([
              z.lazy(() => SoundCardWhereInputSchema),
              z.lazy(() => SoundCardWhereInputSchema).array(),
            ])
            .optional(),
          OR: z
            .lazy(() => SoundCardWhereInputSchema)
            .array()
            .optional(),
          NOT: z
            .union([
              z.lazy(() => SoundCardWhereInputSchema),
              z.lazy(() => SoundCardWhereInputSchema).array(),
            ])
            .optional(),
          channels: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          digital_audio: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          name: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          imageUrl: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          amazonLink: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          snr: z
            .union([z.lazy(() => IntNullableFilterSchema), z.number().int()])
            .optional()
            .nullable(),
          sample_rate: z
            .union([z.lazy(() => IntNullableFilterSchema), z.number().int()])
            .optional()
            .nullable(),
          chipset: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          interface: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          setups: z.lazy(() => SetupListRelationFilterSchema).optional(),
        })
        .strict(),
    );

export const SoundCardOrderByWithAggregationInputSchema: z.ZodType<Prisma.SoundCardOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      channels: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      digital_audio: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      snr: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      sample_rate: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      chipset: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      interface: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      _count: z
        .lazy(() => SoundCardCountOrderByAggregateInputSchema)
        .optional(),
      _avg: z.lazy(() => SoundCardAvgOrderByAggregateInputSchema).optional(),
      _max: z.lazy(() => SoundCardMaxOrderByAggregateInputSchema).optional(),
      _min: z.lazy(() => SoundCardMinOrderByAggregateInputSchema).optional(),
      _sum: z.lazy(() => SoundCardSumOrderByAggregateInputSchema).optional(),
    })
    .strict();

export const SoundCardScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SoundCardScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => SoundCardScalarWhereWithAggregatesInputSchema),
          z.lazy(() => SoundCardScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      OR: z
        .lazy(() => SoundCardScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => SoundCardScalarWhereWithAggregatesInputSchema),
          z.lazy(() => SoundCardScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      channels: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      digital_audio: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      name: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      imageUrl: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      snr: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number(),
        ])
        .optional()
        .nullable(),
      sample_rate: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number(),
        ])
        .optional()
        .nullable(),
      chipset: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      interface: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const HeadphonesWhereInputSchema: z.ZodType<Prisma.HeadphonesWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => HeadphonesWhereInputSchema),
          z.lazy(() => HeadphonesWhereInputSchema).array(),
        ])
        .optional(),
      OR: z
        .lazy(() => HeadphonesWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => HeadphonesWhereInputSchema),
          z.lazy(() => HeadphonesWhereInputSchema).array(),
        ])
        .optional(),
      id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
      type: z
        .union([
          z.lazy(() => EnumHeadphoneTypesFilterSchema),
          z.lazy(() => HeadphoneTypesSchema),
        ])
        .optional(),
      frequency_response: z.lazy(() => IntNullableListFilterSchema).optional(),
      microphone: z
        .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
        .optional()
        .nullable(),
      wireless: z
        .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
        .optional()
        .nullable(),
      amazonLink: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
      imageUrl: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      noise_cancellation: z
        .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
        .optional()
        .nullable(),
      enclosure_type: z
        .union([
          z.lazy(() => EnumEnclosureTypeFilterSchema),
          z.lazy(() => EnclosureTypeSchema),
        ])
        .optional(),
      color: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      setups: z.lazy(() => SetupListRelationFilterSchema).optional(),
    })
    .strict();

export const HeadphonesOrderByWithRelationInputSchema: z.ZodType<Prisma.HeadphonesOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      type: z.lazy(() => SortOrderSchema).optional(),
      frequency_response: z.lazy(() => SortOrderSchema).optional(),
      microphone: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      wireless: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      noise_cancellation: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      enclosure_type: z.lazy(() => SortOrderSchema).optional(),
      color: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      setups: z.lazy(() => SetupOrderByRelationAggregateInputSchema).optional(),
    })
    .strict();

export const HeadphonesWhereUniqueInputSchema: z.ZodType<Prisma.HeadphonesWhereUniqueInput> =
  z
    .object({
      id: z.string().cuid(),
    })
    .and(
      z
        .object({
          id: z.string().cuid().optional(),
          AND: z
            .union([
              z.lazy(() => HeadphonesWhereInputSchema),
              z.lazy(() => HeadphonesWhereInputSchema).array(),
            ])
            .optional(),
          OR: z
            .lazy(() => HeadphonesWhereInputSchema)
            .array()
            .optional(),
          NOT: z
            .union([
              z.lazy(() => HeadphonesWhereInputSchema),
              z.lazy(() => HeadphonesWhereInputSchema).array(),
            ])
            .optional(),
          type: z
            .union([
              z.lazy(() => EnumHeadphoneTypesFilterSchema),
              z.lazy(() => HeadphoneTypesSchema),
            ])
            .optional(),
          frequency_response: z
            .lazy(() => IntNullableListFilterSchema)
            .optional(),
          microphone: z
            .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
            .optional()
            .nullable(),
          wireless: z
            .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
            .optional()
            .nullable(),
          amazonLink: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          name: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          imageUrl: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          noise_cancellation: z
            .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
            .optional()
            .nullable(),
          enclosure_type: z
            .union([
              z.lazy(() => EnumEnclosureTypeFilterSchema),
              z.lazy(() => EnclosureTypeSchema),
            ])
            .optional(),
          color: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          setups: z.lazy(() => SetupListRelationFilterSchema).optional(),
        })
        .strict(),
    );

export const HeadphonesOrderByWithAggregationInputSchema: z.ZodType<Prisma.HeadphonesOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      type: z.lazy(() => SortOrderSchema).optional(),
      frequency_response: z.lazy(() => SortOrderSchema).optional(),
      microphone: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      wireless: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      noise_cancellation: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      enclosure_type: z.lazy(() => SortOrderSchema).optional(),
      color: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      _count: z
        .lazy(() => HeadphonesCountOrderByAggregateInputSchema)
        .optional(),
      _avg: z.lazy(() => HeadphonesAvgOrderByAggregateInputSchema).optional(),
      _max: z.lazy(() => HeadphonesMaxOrderByAggregateInputSchema).optional(),
      _min: z.lazy(() => HeadphonesMinOrderByAggregateInputSchema).optional(),
      _sum: z.lazy(() => HeadphonesSumOrderByAggregateInputSchema).optional(),
    })
    .strict();

export const HeadphonesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.HeadphonesScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => HeadphonesScalarWhereWithAggregatesInputSchema),
          z.lazy(() => HeadphonesScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      OR: z
        .lazy(() => HeadphonesScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => HeadphonesScalarWhereWithAggregatesInputSchema),
          z.lazy(() => HeadphonesScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      type: z
        .union([
          z.lazy(() => EnumHeadphoneTypesWithAggregatesFilterSchema),
          z.lazy(() => HeadphoneTypesSchema),
        ])
        .optional(),
      frequency_response: z.lazy(() => IntNullableListFilterSchema).optional(),
      microphone: z
        .union([
          z.lazy(() => BoolNullableWithAggregatesFilterSchema),
          z.boolean(),
        ])
        .optional()
        .nullable(),
      wireless: z
        .union([
          z.lazy(() => BoolNullableWithAggregatesFilterSchema),
          z.boolean(),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      name: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      imageUrl: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      noise_cancellation: z
        .union([
          z.lazy(() => BoolNullableWithAggregatesFilterSchema),
          z.boolean(),
        ])
        .optional()
        .nullable(),
      enclosure_type: z
        .union([
          z.lazy(() => EnumEnclosureTypeWithAggregatesFilterSchema),
          z.lazy(() => EnclosureTypeSchema),
        ])
        .optional(),
      color: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const KeyboardWhereInputSchema: z.ZodType<Prisma.KeyboardWhereInput> = z
  .object({
    AND: z
      .union([
        z.lazy(() => KeyboardWhereInputSchema),
        z.lazy(() => KeyboardWhereInputSchema).array(),
      ])
      .optional(),
    OR: z
      .lazy(() => KeyboardWhereInputSchema)
      .array()
      .optional(),
    NOT: z
      .union([
        z.lazy(() => KeyboardWhereInputSchema),
        z.lazy(() => KeyboardWhereInputSchema).array(),
      ])
      .optional(),
    id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    style: z
      .union([
        z.lazy(() => EnumKeyboardStyleFilterSchema),
        z.lazy(() => KeyboardStyleSchema),
      ])
      .optional(),
    switches: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    backlit: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    amazonLink: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    imageUrl: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    tenkeyless: z
      .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
      .optional()
      .nullable(),
    connection_type: z
      .union([
        z.lazy(() => EnumConnectionTypeFilterSchema),
        z.lazy(() => ConnectionTypeSchema),
      ])
      .optional(),
    color: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    setups: z.lazy(() => SetupListRelationFilterSchema).optional(),
  })
  .strict();

export const KeyboardOrderByWithRelationInputSchema: z.ZodType<Prisma.KeyboardOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      style: z.lazy(() => SortOrderSchema).optional(),
      switches: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      backlit: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      tenkeyless: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      connection_type: z.lazy(() => SortOrderSchema).optional(),
      color: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      setups: z.lazy(() => SetupOrderByRelationAggregateInputSchema).optional(),
    })
    .strict();

export const KeyboardWhereUniqueInputSchema: z.ZodType<Prisma.KeyboardWhereUniqueInput> =
  z
    .object({
      id: z.string().cuid(),
    })
    .and(
      z
        .object({
          id: z.string().cuid().optional(),
          AND: z
            .union([
              z.lazy(() => KeyboardWhereInputSchema),
              z.lazy(() => KeyboardWhereInputSchema).array(),
            ])
            .optional(),
          OR: z
            .lazy(() => KeyboardWhereInputSchema)
            .array()
            .optional(),
          NOT: z
            .union([
              z.lazy(() => KeyboardWhereInputSchema),
              z.lazy(() => KeyboardWhereInputSchema).array(),
            ])
            .optional(),
          style: z
            .union([
              z.lazy(() => EnumKeyboardStyleFilterSchema),
              z.lazy(() => KeyboardStyleSchema),
            ])
            .optional(),
          switches: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          backlit: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          name: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          amazonLink: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          imageUrl: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          tenkeyless: z
            .union([z.lazy(() => BoolNullableFilterSchema), z.boolean()])
            .optional()
            .nullable(),
          connection_type: z
            .union([
              z.lazy(() => EnumConnectionTypeFilterSchema),
              z.lazy(() => ConnectionTypeSchema),
            ])
            .optional(),
          color: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          setups: z.lazy(() => SetupListRelationFilterSchema).optional(),
        })
        .strict(),
    );

export const KeyboardOrderByWithAggregationInputSchema: z.ZodType<Prisma.KeyboardOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      style: z.lazy(() => SortOrderSchema).optional(),
      switches: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      backlit: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      tenkeyless: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      connection_type: z.lazy(() => SortOrderSchema).optional(),
      color: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      _count: z.lazy(() => KeyboardCountOrderByAggregateInputSchema).optional(),
      _max: z.lazy(() => KeyboardMaxOrderByAggregateInputSchema).optional(),
      _min: z.lazy(() => KeyboardMinOrderByAggregateInputSchema).optional(),
    })
    .strict();

export const KeyboardScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.KeyboardScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => KeyboardScalarWhereWithAggregatesInputSchema),
          z.lazy(() => KeyboardScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      OR: z
        .lazy(() => KeyboardScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => KeyboardScalarWhereWithAggregatesInputSchema),
          z.lazy(() => KeyboardScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      style: z
        .union([
          z.lazy(() => EnumKeyboardStyleWithAggregatesFilterSchema),
          z.lazy(() => KeyboardStyleSchema),
        ])
        .optional(),
      switches: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      backlit: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      name: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      amazonLink: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      imageUrl: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      tenkeyless: z
        .union([
          z.lazy(() => BoolNullableWithAggregatesFilterSchema),
          z.boolean(),
        ])
        .optional()
        .nullable(),
      connection_type: z
        .union([
          z.lazy(() => EnumConnectionTypeWithAggregatesFilterSchema),
          z.lazy(() => ConnectionTypeSchema),
        ])
        .optional(),
      color: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const MouseWhereInputSchema: z.ZodType<Prisma.MouseWhereInput> = z
  .object({
    AND: z
      .union([
        z.lazy(() => MouseWhereInputSchema),
        z.lazy(() => MouseWhereInputSchema).array(),
      ])
      .optional(),
    OR: z
      .lazy(() => MouseWhereInputSchema)
      .array()
      .optional(),
    NOT: z
      .union([
        z.lazy(() => MouseWhereInputSchema),
        z.lazy(() => MouseWhereInputSchema).array(),
      ])
      .optional(),
    id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    tracking_method: z
      .union([
        z.lazy(() => EnumMouseTrackMethodFilterSchema),
        z.lazy(() => MouseTrackMethodSchema),
      ])
      .optional(),
    connection_type: z
      .union([
        z.lazy(() => EnumConnectionTypeFilterSchema),
        z.lazy(() => ConnectionTypeSchema),
      ])
      .optional(),
    max_dpi: z
      .union([z.lazy(() => IntNullableFilterSchema), z.number()])
      .optional()
      .nullable(),
    amazonLink: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    imageUrl: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    hand_orientation: z
      .union([
        z.lazy(() => EnumMouseOrientationFilterSchema),
        z.lazy(() => MouseOrientationSchema),
      ])
      .optional(),
    color: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    setups: z.lazy(() => SetupListRelationFilterSchema).optional(),
  })
  .strict();

export const MouseOrderByWithRelationInputSchema: z.ZodType<Prisma.MouseOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tracking_method: z.lazy(() => SortOrderSchema).optional(),
      connection_type: z.lazy(() => SortOrderSchema).optional(),
      max_dpi: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      hand_orientation: z.lazy(() => SortOrderSchema).optional(),
      color: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      setups: z.lazy(() => SetupOrderByRelationAggregateInputSchema).optional(),
    })
    .strict();

export const MouseWhereUniqueInputSchema: z.ZodType<Prisma.MouseWhereUniqueInput> =
  z
    .object({
      id: z.string().cuid(),
    })
    .and(
      z
        .object({
          id: z.string().cuid().optional(),
          AND: z
            .union([
              z.lazy(() => MouseWhereInputSchema),
              z.lazy(() => MouseWhereInputSchema).array(),
            ])
            .optional(),
          OR: z
            .lazy(() => MouseWhereInputSchema)
            .array()
            .optional(),
          NOT: z
            .union([
              z.lazy(() => MouseWhereInputSchema),
              z.lazy(() => MouseWhereInputSchema).array(),
            ])
            .optional(),
          tracking_method: z
            .union([
              z.lazy(() => EnumMouseTrackMethodFilterSchema),
              z.lazy(() => MouseTrackMethodSchema),
            ])
            .optional(),
          connection_type: z
            .union([
              z.lazy(() => EnumConnectionTypeFilterSchema),
              z.lazy(() => ConnectionTypeSchema),
            ])
            .optional(),
          max_dpi: z
            .union([z.lazy(() => IntNullableFilterSchema), z.number().int()])
            .optional()
            .nullable(),
          amazonLink: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          name: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          imageUrl: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          hand_orientation: z
            .union([
              z.lazy(() => EnumMouseOrientationFilterSchema),
              z.lazy(() => MouseOrientationSchema),
            ])
            .optional(),
          color: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          setups: z.lazy(() => SetupListRelationFilterSchema).optional(),
        })
        .strict(),
    );

export const MouseOrderByWithAggregationInputSchema: z.ZodType<Prisma.MouseOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tracking_method: z.lazy(() => SortOrderSchema).optional(),
      connection_type: z.lazy(() => SortOrderSchema).optional(),
      max_dpi: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      hand_orientation: z.lazy(() => SortOrderSchema).optional(),
      color: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      _count: z.lazy(() => MouseCountOrderByAggregateInputSchema).optional(),
      _avg: z.lazy(() => MouseAvgOrderByAggregateInputSchema).optional(),
      _max: z.lazy(() => MouseMaxOrderByAggregateInputSchema).optional(),
      _min: z.lazy(() => MouseMinOrderByAggregateInputSchema).optional(),
      _sum: z.lazy(() => MouseSumOrderByAggregateInputSchema).optional(),
    })
    .strict();

export const MouseScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.MouseScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => MouseScalarWhereWithAggregatesInputSchema),
          z.lazy(() => MouseScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      OR: z
        .lazy(() => MouseScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => MouseScalarWhereWithAggregatesInputSchema),
          z.lazy(() => MouseScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      tracking_method: z
        .union([
          z.lazy(() => EnumMouseTrackMethodWithAggregatesFilterSchema),
          z.lazy(() => MouseTrackMethodSchema),
        ])
        .optional(),
      connection_type: z
        .union([
          z.lazy(() => EnumConnectionTypeWithAggregatesFilterSchema),
          z.lazy(() => ConnectionTypeSchema),
        ])
        .optional(),
      max_dpi: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number(),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      name: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      imageUrl: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      hand_orientation: z
        .union([
          z.lazy(() => EnumMouseOrientationWithAggregatesFilterSchema),
          z.lazy(() => MouseOrientationSchema),
        ])
        .optional(),
      color: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const SpeakersWhereInputSchema: z.ZodType<Prisma.SpeakersWhereInput> = z
  .object({
    AND: z
      .union([
        z.lazy(() => SpeakersWhereInputSchema),
        z.lazy(() => SpeakersWhereInputSchema).array(),
      ])
      .optional(),
    OR: z
      .lazy(() => SpeakersWhereInputSchema)
      .array()
      .optional(),
    NOT: z
      .union([
        z.lazy(() => SpeakersWhereInputSchema),
        z.lazy(() => SpeakersWhereInputSchema).array(),
      ])
      .optional(),
    id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    configuration: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    imageUrl: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    wattage: z
      .union([z.lazy(() => IntNullableFilterSchema), z.number()])
      .optional()
      .nullable(),
    frequency_response: z
      .union([z.lazy(() => IntNullableFilterSchema), z.number()])
      .optional()
      .nullable(),
    amazonLink: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    color: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    setups: z.lazy(() => SpeakersOfSetupListRelationFilterSchema).optional(),
  })
  .strict();

export const SpeakersOrderByWithRelationInputSchema: z.ZodType<Prisma.SpeakersOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      configuration: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      wattage: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      frequency_response: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      color: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      setups: z
        .lazy(() => SpeakersOfSetupOrderByRelationAggregateInputSchema)
        .optional(),
    })
    .strict();

export const SpeakersWhereUniqueInputSchema: z.ZodType<Prisma.SpeakersWhereUniqueInput> =
  z
    .object({
      id: z.string().cuid(),
    })
    .and(
      z
        .object({
          id: z.string().cuid().optional(),
          AND: z
            .union([
              z.lazy(() => SpeakersWhereInputSchema),
              z.lazy(() => SpeakersWhereInputSchema).array(),
            ])
            .optional(),
          OR: z
            .lazy(() => SpeakersWhereInputSchema)
            .array()
            .optional(),
          NOT: z
            .union([
              z.lazy(() => SpeakersWhereInputSchema),
              z.lazy(() => SpeakersWhereInputSchema).array(),
            ])
            .optional(),
          configuration: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          name: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          imageUrl: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          wattage: z
            .union([z.lazy(() => IntNullableFilterSchema), z.number().int()])
            .optional()
            .nullable(),
          frequency_response: z
            .union([z.lazy(() => IntNullableFilterSchema), z.number().int()])
            .optional()
            .nullable(),
          amazonLink: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          color: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          setups: z
            .lazy(() => SpeakersOfSetupListRelationFilterSchema)
            .optional(),
        })
        .strict(),
    );

export const SpeakersOrderByWithAggregationInputSchema: z.ZodType<Prisma.SpeakersOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      configuration: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      wattage: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      frequency_response: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      color: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      _count: z.lazy(() => SpeakersCountOrderByAggregateInputSchema).optional(),
      _avg: z.lazy(() => SpeakersAvgOrderByAggregateInputSchema).optional(),
      _max: z.lazy(() => SpeakersMaxOrderByAggregateInputSchema).optional(),
      _min: z.lazy(() => SpeakersMinOrderByAggregateInputSchema).optional(),
      _sum: z.lazy(() => SpeakersSumOrderByAggregateInputSchema).optional(),
    })
    .strict();

export const SpeakersScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SpeakersScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => SpeakersScalarWhereWithAggregatesInputSchema),
          z.lazy(() => SpeakersScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      OR: z
        .lazy(() => SpeakersScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => SpeakersScalarWhereWithAggregatesInputSchema),
          z.lazy(() => SpeakersScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      configuration: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      name: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      imageUrl: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      wattage: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number(),
        ])
        .optional()
        .nullable(),
      frequency_response: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number(),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      color: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const WebcamWhereInputSchema: z.ZodType<Prisma.WebcamWhereInput> = z
  .object({
    AND: z
      .union([
        z.lazy(() => WebcamWhereInputSchema),
        z.lazy(() => WebcamWhereInputSchema).array(),
      ])
      .optional(),
    OR: z
      .lazy(() => WebcamWhereInputSchema)
      .array()
      .optional(),
    NOT: z
      .union([
        z.lazy(() => WebcamWhereInputSchema),
        z.lazy(() => WebcamWhereInputSchema).array(),
      ])
      .optional(),
    id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    resolutions: z.lazy(() => StringNullableListFilterSchema).optional(),
    name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    imageUrl: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    connection: z
      .union([
        z.lazy(() => EnumConnectionTypeFilterSchema),
        z.lazy(() => ConnectionTypeSchema),
      ])
      .optional(),
    focus_type: z
      .union([
        z.lazy(() => EnumFocusTypeFilterSchema),
        z.lazy(() => FocusTypeSchema),
      ])
      .optional(),
    os: z.lazy(() => StringNullableListFilterSchema).optional(),
    amazonLink: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    fov: z
      .union([z.lazy(() => IntNullableFilterSchema), z.number()])
      .optional()
      .nullable(),
    setups: z.lazy(() => SetupListRelationFilterSchema).optional(),
  })
  .strict();

export const WebcamOrderByWithRelationInputSchema: z.ZodType<Prisma.WebcamOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      resolutions: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      connection: z.lazy(() => SortOrderSchema).optional(),
      focus_type: z.lazy(() => SortOrderSchema).optional(),
      os: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      fov: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      setups: z.lazy(() => SetupOrderByRelationAggregateInputSchema).optional(),
    })
    .strict();

export const WebcamWhereUniqueInputSchema: z.ZodType<Prisma.WebcamWhereUniqueInput> =
  z
    .object({
      id: z.string().cuid(),
    })
    .and(
      z
        .object({
          id: z.string().cuid().optional(),
          AND: z
            .union([
              z.lazy(() => WebcamWhereInputSchema),
              z.lazy(() => WebcamWhereInputSchema).array(),
            ])
            .optional(),
          OR: z
            .lazy(() => WebcamWhereInputSchema)
            .array()
            .optional(),
          NOT: z
            .union([
              z.lazy(() => WebcamWhereInputSchema),
              z.lazy(() => WebcamWhereInputSchema).array(),
            ])
            .optional(),
          resolutions: z.lazy(() => StringNullableListFilterSchema).optional(),
          name: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          imageUrl: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          connection: z
            .union([
              z.lazy(() => EnumConnectionTypeFilterSchema),
              z.lazy(() => ConnectionTypeSchema),
            ])
            .optional(),
          focus_type: z
            .union([
              z.lazy(() => EnumFocusTypeFilterSchema),
              z.lazy(() => FocusTypeSchema),
            ])
            .optional(),
          os: z.lazy(() => StringNullableListFilterSchema).optional(),
          amazonLink: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          fov: z
            .union([z.lazy(() => IntNullableFilterSchema), z.number().int()])
            .optional()
            .nullable(),
          setups: z.lazy(() => SetupListRelationFilterSchema).optional(),
        })
        .strict(),
    );

export const WebcamOrderByWithAggregationInputSchema: z.ZodType<Prisma.WebcamOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      resolutions: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      connection: z.lazy(() => SortOrderSchema).optional(),
      focus_type: z.lazy(() => SortOrderSchema).optional(),
      os: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      fov: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      _count: z.lazy(() => WebcamCountOrderByAggregateInputSchema).optional(),
      _avg: z.lazy(() => WebcamAvgOrderByAggregateInputSchema).optional(),
      _max: z.lazy(() => WebcamMaxOrderByAggregateInputSchema).optional(),
      _min: z.lazy(() => WebcamMinOrderByAggregateInputSchema).optional(),
      _sum: z.lazy(() => WebcamSumOrderByAggregateInputSchema).optional(),
    })
    .strict();

export const WebcamScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.WebcamScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => WebcamScalarWhereWithAggregatesInputSchema),
          z.lazy(() => WebcamScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      OR: z
        .lazy(() => WebcamScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => WebcamScalarWhereWithAggregatesInputSchema),
          z.lazy(() => WebcamScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      resolutions: z.lazy(() => StringNullableListFilterSchema).optional(),
      name: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      imageUrl: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      connection: z
        .union([
          z.lazy(() => EnumConnectionTypeWithAggregatesFilterSchema),
          z.lazy(() => ConnectionTypeSchema),
        ])
        .optional(),
      focus_type: z
        .union([
          z.lazy(() => EnumFocusTypeWithAggregatesFilterSchema),
          z.lazy(() => FocusTypeSchema),
        ])
        .optional(),
      os: z.lazy(() => StringNullableListFilterSchema).optional(),
      amazonLink: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      fov: z
        .union([
          z.lazy(() => IntNullableWithAggregatesFilterSchema),
          z.number(),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const CaseFanWhereInputSchema: z.ZodType<Prisma.CaseFanWhereInput> = z
  .object({
    AND: z
      .union([
        z.lazy(() => CaseFanWhereInputSchema),
        z.lazy(() => CaseFanWhereInputSchema).array(),
      ])
      .optional(),
    OR: z
      .lazy(() => CaseFanWhereInputSchema)
      .array()
      .optional(),
    NOT: z
      .union([
        z.lazy(() => CaseFanWhereInputSchema),
        z.lazy(() => CaseFanWhereInputSchema).array(),
      ])
      .optional(),
    id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    size: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
    name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
    imageUrl: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    color: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    amazonLink: z
      .union([z.lazy(() => StringNullableFilterSchema), z.string()])
      .optional()
      .nullable(),
    rpm: z.lazy(() => IntNullableListFilterSchema).optional(),
    airflow: z.lazy(() => IntNullableListFilterSchema).optional(),
    setups: z.lazy(() => CaseFanOfSetupListRelationFilterSchema).optional(),
  })
  .strict();

export const CaseFanOrderByWithRelationInputSchema: z.ZodType<Prisma.CaseFanOrderByWithRelationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      size: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      color: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      rpm: z.lazy(() => SortOrderSchema).optional(),
      airflow: z.lazy(() => SortOrderSchema).optional(),
      setups: z
        .lazy(() => CaseFanOfSetupOrderByRelationAggregateInputSchema)
        .optional(),
    })
    .strict();

export const CaseFanWhereUniqueInputSchema: z.ZodType<Prisma.CaseFanWhereUniqueInput> =
  z
    .object({
      id: z.string().cuid(),
    })
    .and(
      z
        .object({
          id: z.string().cuid().optional(),
          AND: z
            .union([
              z.lazy(() => CaseFanWhereInputSchema),
              z.lazy(() => CaseFanWhereInputSchema).array(),
            ])
            .optional(),
          OR: z
            .lazy(() => CaseFanWhereInputSchema)
            .array()
            .optional(),
          NOT: z
            .union([
              z.lazy(() => CaseFanWhereInputSchema),
              z.lazy(() => CaseFanWhereInputSchema).array(),
            ])
            .optional(),
          size: z
            .union([z.lazy(() => IntFilterSchema), z.number().int()])
            .optional(),
          name: z
            .union([z.lazy(() => StringFilterSchema), z.string()])
            .optional(),
          imageUrl: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          color: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          amazonLink: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
          rpm: z.lazy(() => IntNullableListFilterSchema).optional(),
          airflow: z.lazy(() => IntNullableListFilterSchema).optional(),
          setups: z
            .lazy(() => CaseFanOfSetupListRelationFilterSchema)
            .optional(),
        })
        .strict(),
    );

export const CaseFanOrderByWithAggregationInputSchema: z.ZodType<Prisma.CaseFanOrderByWithAggregationInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      size: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      color: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.lazy(() => SortOrderSchema),
          z.lazy(() => SortOrderInputSchema),
        ])
        .optional(),
      rpm: z.lazy(() => SortOrderSchema).optional(),
      airflow: z.lazy(() => SortOrderSchema).optional(),
      _count: z.lazy(() => CaseFanCountOrderByAggregateInputSchema).optional(),
      _avg: z.lazy(() => CaseFanAvgOrderByAggregateInputSchema).optional(),
      _max: z.lazy(() => CaseFanMaxOrderByAggregateInputSchema).optional(),
      _min: z.lazy(() => CaseFanMinOrderByAggregateInputSchema).optional(),
      _sum: z.lazy(() => CaseFanSumOrderByAggregateInputSchema).optional(),
    })
    .strict();

export const CaseFanScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CaseFanScalarWhereWithAggregatesInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => CaseFanScalarWhereWithAggregatesInputSchema),
          z.lazy(() => CaseFanScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      OR: z
        .lazy(() => CaseFanScalarWhereWithAggregatesInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => CaseFanScalarWhereWithAggregatesInputSchema),
          z.lazy(() => CaseFanScalarWhereWithAggregatesInputSchema).array(),
        ])
        .optional(),
      id: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      size: z
        .union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()])
        .optional(),
      name: z
        .union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()])
        .optional(),
      imageUrl: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      color: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.lazy(() => StringNullableWithAggregatesFilterSchema),
          z.string(),
        ])
        .optional()
        .nullable(),
      rpm: z.lazy(() => IntNullableListFilterSchema).optional(),
      airflow: z.lazy(() => IntNullableListFilterSchema).optional(),
    })
    .strict();

export const AccountCreateInputSchema: z.ZodType<Prisma.AccountCreateInput> = z
  .object({
    id: z.string().cuid().optional(),
    type: z.string(),
    provider: z.string(),
    providerAccountId: z.string(),
    refresh_token: z.string().optional().nullable(),
    access_token: z.string().optional().nullable(),
    expires_at: z.number().int().optional().nullable(),
    token_type: z.string().optional().nullable(),
    scope: z.string().optional().nullable(),
    id_token: z.string().optional().nullable(),
    session_state: z.string().optional().nullable(),
    user: z.lazy(() => UserCreateNestedOneWithoutAccountsInputSchema),
  })
  .strict();

export const AccountUncheckedCreateInputSchema: z.ZodType<Prisma.AccountUncheckedCreateInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      userId: z.string(),
      type: z.string(),
      provider: z.string(),
      providerAccountId: z.string(),
      refresh_token: z.string().optional().nullable(),
      access_token: z.string().optional().nullable(),
      expires_at: z.number().int().optional().nullable(),
      token_type: z.string().optional().nullable(),
      scope: z.string().optional().nullable(),
      id_token: z.string().optional().nullable(),
      session_state: z.string().optional().nullable(),
    })
    .strict();

export const AccountUpdateInputSchema: z.ZodType<Prisma.AccountUpdateInput> = z
  .object({
    id: z
      .union([
        z.string().cuid(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema),
      ])
      .optional(),
    type: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    provider: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    providerAccountId: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    refresh_token: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    access_token: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    expires_at: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    token_type: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    scope: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    id_token: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    session_state: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    user: z
      .lazy(() => UserUpdateOneRequiredWithoutAccountsNestedInputSchema)
      .optional(),
  })
  .strict();

export const AccountUncheckedUpdateInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      userId: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      type: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      provider: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      providerAccountId: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      refresh_token: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      access_token: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      expires_at: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      token_type: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      scope: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      id_token: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      session_state: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const AccountCreateManyInputSchema: z.ZodType<Prisma.AccountCreateManyInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      userId: z.string(),
      type: z.string(),
      provider: z.string(),
      providerAccountId: z.string(),
      refresh_token: z.string().optional().nullable(),
      access_token: z.string().optional().nullable(),
      expires_at: z.number().int().optional().nullable(),
      token_type: z.string().optional().nullable(),
      scope: z.string().optional().nullable(),
      id_token: z.string().optional().nullable(),
      session_state: z.string().optional().nullable(),
    })
    .strict();

export const AccountUpdateManyMutationInputSchema: z.ZodType<Prisma.AccountUpdateManyMutationInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      type: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      provider: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      providerAccountId: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      refresh_token: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      access_token: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      expires_at: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      token_type: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      scope: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      id_token: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      session_state: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const AccountUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateManyInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      userId: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      type: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      provider: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      providerAccountId: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      refresh_token: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      access_token: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      expires_at: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      token_type: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      scope: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      id_token: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      session_state: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const SessionCreateInputSchema: z.ZodType<Prisma.SessionCreateInput> = z
  .object({
    id: z.string().cuid().optional(),
    sessionToken: z.string(),
    expires: z.coerce.date(),
    user: z.lazy(() => UserCreateNestedOneWithoutSessionsInputSchema),
  })
  .strict();

export const SessionUncheckedCreateInputSchema: z.ZodType<Prisma.SessionUncheckedCreateInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      sessionToken: z.string(),
      userId: z.string(),
      expires: z.coerce.date(),
    })
    .strict();

export const SessionUpdateInputSchema: z.ZodType<Prisma.SessionUpdateInput> = z
  .object({
    id: z
      .union([
        z.string().cuid(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema),
      ])
      .optional(),
    sessionToken: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    expires: z
      .union([
        z.coerce.date(),
        z.lazy(() => DateTimeFieldUpdateOperationsInputSchema),
      ])
      .optional(),
    user: z
      .lazy(() => UserUpdateOneRequiredWithoutSessionsNestedInputSchema)
      .optional(),
  })
  .strict();

export const SessionUncheckedUpdateInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      sessionToken: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      userId: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      expires: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const SessionCreateManyInputSchema: z.ZodType<Prisma.SessionCreateManyInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      sessionToken: z.string(),
      userId: z.string(),
      expires: z.coerce.date(),
    })
    .strict();

export const SessionUpdateManyMutationInputSchema: z.ZodType<Prisma.SessionUpdateManyMutationInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      sessionToken: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      expires: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const SessionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      sessionToken: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      userId: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      expires: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const UserCreateInputSchema: z.ZodType<Prisma.UserCreateInput> = z
  .object({
    id: z.string().cuid().optional(),
    name: z.string().optional().nullable(),
    email: z.string().optional().nullable(),
    emailVerified: z.coerce.date().optional().nullable(),
    image: z.string().optional().nullable(),
    role: z.lazy(() => UserRoleSchema).optional(),
    setups: z
      .lazy(() => SetupCreateNestedManyWithoutUserInputSchema)
      .optional(),
    accounts: z
      .lazy(() => AccountCreateNestedManyWithoutUserInputSchema)
      .optional(),
    sessions: z
      .lazy(() => SessionCreateNestedManyWithoutUserInputSchema)
      .optional(),
  })
  .strict();

export const UserUncheckedCreateInputSchema: z.ZodType<Prisma.UserUncheckedCreateInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      name: z.string().optional().nullable(),
      email: z.string().optional().nullable(),
      emailVerified: z.coerce.date().optional().nullable(),
      image: z.string().optional().nullable(),
      role: z.lazy(() => UserRoleSchema).optional(),
      setups: z
        .lazy(() => SetupUncheckedCreateNestedManyWithoutUserInputSchema)
        .optional(),
      accounts: z
        .lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema)
        .optional(),
      sessions: z
        .lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema)
        .optional(),
    })
    .strict();

export const UserUpdateInputSchema: z.ZodType<Prisma.UserUpdateInput> = z
  .object({
    id: z
      .union([
        z.string().cuid(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema),
      ])
      .optional(),
    name: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    email: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    emailVerified: z
      .union([
        z.coerce.date(),
        z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    image: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    role: z
      .union([
        z.lazy(() => UserRoleSchema),
        z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema),
      ])
      .optional(),
    setups: z
      .lazy(() => SetupUpdateManyWithoutUserNestedInputSchema)
      .optional(),
    accounts: z
      .lazy(() => AccountUpdateManyWithoutUserNestedInputSchema)
      .optional(),
    sessions: z
      .lazy(() => SessionUpdateManyWithoutUserNestedInputSchema)
      .optional(),
  })
  .strict();

export const UserUncheckedUpdateInputSchema: z.ZodType<Prisma.UserUncheckedUpdateInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      emailVerified: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      image: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      role: z
        .union([
          z.lazy(() => UserRoleSchema),
          z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      setups: z
        .lazy(() => SetupUncheckedUpdateManyWithoutUserNestedInputSchema)
        .optional(),
      accounts: z
        .lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema)
        .optional(),
      sessions: z
        .lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema)
        .optional(),
    })
    .strict();

export const UserCreateManyInputSchema: z.ZodType<Prisma.UserCreateManyInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      name: z.string().optional().nullable(),
      email: z.string().optional().nullable(),
      emailVerified: z.coerce.date().optional().nullable(),
      image: z.string().optional().nullable(),
      role: z.lazy(() => UserRoleSchema).optional(),
    })
    .strict();

export const UserUpdateManyMutationInputSchema: z.ZodType<Prisma.UserUpdateManyMutationInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      emailVerified: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      image: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      role: z
        .union([
          z.lazy(() => UserRoleSchema),
          z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const UserUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      emailVerified: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      image: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      role: z
        .union([
          z.lazy(() => UserRoleSchema),
          z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const VerificationTokenCreateInputSchema: z.ZodType<Prisma.VerificationTokenCreateInput> =
  z
    .object({
      identifier: z.string(),
      token: z.string(),
      expires: z.coerce.date(),
    })
    .strict();

export const VerificationTokenUncheckedCreateInputSchema: z.ZodType<Prisma.VerificationTokenUncheckedCreateInput> =
  z
    .object({
      identifier: z.string(),
      token: z.string(),
      expires: z.coerce.date(),
    })
    .strict();

export const VerificationTokenUpdateInputSchema: z.ZodType<Prisma.VerificationTokenUpdateInput> =
  z
    .object({
      identifier: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      token: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      expires: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const VerificationTokenUncheckedUpdateInputSchema: z.ZodType<Prisma.VerificationTokenUncheckedUpdateInput> =
  z
    .object({
      identifier: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      token: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      expires: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const VerificationTokenCreateManyInputSchema: z.ZodType<Prisma.VerificationTokenCreateManyInput> =
  z
    .object({
      identifier: z.string(),
      token: z.string(),
      expires: z.coerce.date(),
    })
    .strict();

export const VerificationTokenUpdateManyMutationInputSchema: z.ZodType<Prisma.VerificationTokenUpdateManyMutationInput> =
  z
    .object({
      identifier: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      token: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      expires: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const VerificationTokenUncheckedUpdateManyInputSchema: z.ZodType<Prisma.VerificationTokenUncheckedUpdateManyInput> =
  z
    .object({
      identifier: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      token: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      expires: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const CPUCoolerCreateInputSchema: z.ZodType<Prisma.CPUCoolerCreateInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      rpm: z.number().int().optional().nullable(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      noise_level: z.number().int().optional().nullable(),
      color: z.string().optional().nullable(),
      size: z.number().int().optional().nullable(),
      setups: z
        .lazy(() => SetupCreateNestedManyWithoutCpu_coolerInputSchema)
        .optional(),
    })
    .strict();

export const CPUCoolerUncheckedCreateInputSchema: z.ZodType<Prisma.CPUCoolerUncheckedCreateInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      rpm: z.number().int().optional().nullable(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      noise_level: z.number().int().optional().nullable(),
      color: z.string().optional().nullable(),
      size: z.number().int().optional().nullable(),
      setups: z
        .lazy(() => SetupUncheckedCreateNestedManyWithoutCpu_coolerInputSchema)
        .optional(),
    })
    .strict();

export const CPUCoolerUpdateInputSchema: z.ZodType<Prisma.CPUCoolerUpdateInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      rpm: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      noise_level: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      size: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      setups: z
        .lazy(() => SetupUpdateManyWithoutCpu_coolerNestedInputSchema)
        .optional(),
    })
    .strict();

export const CPUCoolerUncheckedUpdateInputSchema: z.ZodType<Prisma.CPUCoolerUncheckedUpdateInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      rpm: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      noise_level: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      size: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      setups: z
        .lazy(() => SetupUncheckedUpdateManyWithoutCpu_coolerNestedInputSchema)
        .optional(),
    })
    .strict();

export const CPUCoolerCreateManyInputSchema: z.ZodType<Prisma.CPUCoolerCreateManyInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      rpm: z.number().int().optional().nullable(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      noise_level: z.number().int().optional().nullable(),
      color: z.string().optional().nullable(),
      size: z.number().int().optional().nullable(),
    })
    .strict();

export const CPUCoolerUpdateManyMutationInputSchema: z.ZodType<Prisma.CPUCoolerUpdateManyMutationInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      rpm: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      noise_level: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      size: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const CPUCoolerUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CPUCoolerUncheckedUpdateManyInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      rpm: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      noise_level: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      size: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const MotherboardCreateInputSchema: z.ZodType<Prisma.MotherboardCreateInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      socket: z
        .union([
          z.lazy(() => MotherboardCreatesocketInputSchema),
          z.string().array(),
        ])
        .optional(),
      form_factor: z.string(),
      max_memory: z.number().int().optional(),
      memory_slots: z.number().int().optional(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      color: z.string().optional().nullable(),
      setups: z
        .lazy(() => SetupCreateNestedManyWithoutMotherboardInputSchema)
        .optional(),
    })
    .strict();

export const MotherboardUncheckedCreateInputSchema: z.ZodType<Prisma.MotherboardUncheckedCreateInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      socket: z
        .union([
          z.lazy(() => MotherboardCreatesocketInputSchema),
          z.string().array(),
        ])
        .optional(),
      form_factor: z.string(),
      max_memory: z.number().int().optional(),
      memory_slots: z.number().int().optional(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      color: z.string().optional().nullable(),
      setups: z
        .lazy(() => SetupUncheckedCreateNestedManyWithoutMotherboardInputSchema)
        .optional(),
    })
    .strict();

export const MotherboardUpdateInputSchema: z.ZodType<Prisma.MotherboardUpdateInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      socket: z
        .union([
          z.lazy(() => MotherboardUpdatesocketInputSchema),
          z.string().array(),
        ])
        .optional(),
      form_factor: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      max_memory: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      memory_slots: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      setups: z
        .lazy(() => SetupUpdateManyWithoutMotherboardNestedInputSchema)
        .optional(),
    })
    .strict();

export const MotherboardUncheckedUpdateInputSchema: z.ZodType<Prisma.MotherboardUncheckedUpdateInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      socket: z
        .union([
          z.lazy(() => MotherboardUpdatesocketInputSchema),
          z.string().array(),
        ])
        .optional(),
      form_factor: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      max_memory: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      memory_slots: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      setups: z
        .lazy(() => SetupUncheckedUpdateManyWithoutMotherboardNestedInputSchema)
        .optional(),
    })
    .strict();

export const MotherboardCreateManyInputSchema: z.ZodType<Prisma.MotherboardCreateManyInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      socket: z
        .union([
          z.lazy(() => MotherboardCreatesocketInputSchema),
          z.string().array(),
        ])
        .optional(),
      form_factor: z.string(),
      max_memory: z.number().int().optional(),
      memory_slots: z.number().int().optional(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      color: z.string().optional().nullable(),
    })
    .strict();

export const MotherboardUpdateManyMutationInputSchema: z.ZodType<Prisma.MotherboardUpdateManyMutationInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      socket: z
        .union([
          z.lazy(() => MotherboardUpdatesocketInputSchema),
          z.string().array(),
        ])
        .optional(),
      form_factor: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      max_memory: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      memory_slots: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const MotherboardUncheckedUpdateManyInputSchema: z.ZodType<Prisma.MotherboardUncheckedUpdateManyInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      socket: z
        .union([
          z.lazy(() => MotherboardUpdatesocketInputSchema),
          z.string().array(),
        ])
        .optional(),
      form_factor: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      max_memory: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      memory_slots: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const RAMCreateInputSchema: z.ZodType<Prisma.RAMCreateInput> = z
  .object({
    id: z.string().cuid().optional(),
    speed: z
      .union([
        z.lazy(() => RAMCreatespeedInputSchema),
        z.number().int().array(),
      ])
      .optional(),
    modules: z
      .union([
        z.lazy(() => RAMCreatemodulesInputSchema),
        z.number().int().array(),
      ])
      .optional(),
    price_per_gb: z.number().int().optional(),
    color: z.string().optional().nullable(),
    imageUrl: z.string().optional().nullable(),
    amazonLink: z.string().optional().nullable(),
    name: z.string(),
    first_word_latency: z.string().optional().nullable(),
    cas_latency: z.string().optional().nullable(),
    setups: z.lazy(() => SetupCreateNestedManyWithoutRamInputSchema).optional(),
  })
  .strict();

export const RAMUncheckedCreateInputSchema: z.ZodType<Prisma.RAMUncheckedCreateInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      speed: z
        .union([
          z.lazy(() => RAMCreatespeedInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      modules: z
        .union([
          z.lazy(() => RAMCreatemodulesInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      price_per_gb: z.number().int().optional(),
      color: z.string().optional().nullable(),
      imageUrl: z.string().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      name: z.string(),
      first_word_latency: z.string().optional().nullable(),
      cas_latency: z.string().optional().nullable(),
      setups: z
        .lazy(() => SetupUncheckedCreateNestedManyWithoutRamInputSchema)
        .optional(),
    })
    .strict();

export const RAMUpdateInputSchema: z.ZodType<Prisma.RAMUpdateInput> = z
  .object({
    id: z
      .union([
        z.string().cuid(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema),
      ])
      .optional(),
    speed: z
      .union([
        z.lazy(() => RAMUpdatespeedInputSchema),
        z.number().int().array(),
      ])
      .optional(),
    modules: z
      .union([
        z.lazy(() => RAMUpdatemodulesInputSchema),
        z.number().int().array(),
      ])
      .optional(),
    price_per_gb: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema),
      ])
      .optional(),
    color: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    imageUrl: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    amazonLink: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    name: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    first_word_latency: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    cas_latency: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    setups: z.lazy(() => SetupUpdateManyWithoutRamNestedInputSchema).optional(),
  })
  .strict();

export const RAMUncheckedUpdateInputSchema: z.ZodType<Prisma.RAMUncheckedUpdateInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      speed: z
        .union([
          z.lazy(() => RAMUpdatespeedInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      modules: z
        .union([
          z.lazy(() => RAMUpdatemodulesInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      price_per_gb: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      first_word_latency: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      cas_latency: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      setups: z
        .lazy(() => SetupUncheckedUpdateManyWithoutRamNestedInputSchema)
        .optional(),
    })
    .strict();

export const RAMCreateManyInputSchema: z.ZodType<Prisma.RAMCreateManyInput> = z
  .object({
    id: z.string().cuid().optional(),
    speed: z
      .union([
        z.lazy(() => RAMCreatespeedInputSchema),
        z.number().int().array(),
      ])
      .optional(),
    modules: z
      .union([
        z.lazy(() => RAMCreatemodulesInputSchema),
        z.number().int().array(),
      ])
      .optional(),
    price_per_gb: z.number().int().optional(),
    color: z.string().optional().nullable(),
    imageUrl: z.string().optional().nullable(),
    amazonLink: z.string().optional().nullable(),
    name: z.string(),
    first_word_latency: z.string().optional().nullable(),
    cas_latency: z.string().optional().nullable(),
  })
  .strict();

export const RAMUpdateManyMutationInputSchema: z.ZodType<Prisma.RAMUpdateManyMutationInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      speed: z
        .union([
          z.lazy(() => RAMUpdatespeedInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      modules: z
        .union([
          z.lazy(() => RAMUpdatemodulesInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      price_per_gb: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      first_word_latency: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      cas_latency: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const RAMUncheckedUpdateManyInputSchema: z.ZodType<Prisma.RAMUncheckedUpdateManyInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      speed: z
        .union([
          z.lazy(() => RAMUpdatespeedInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      modules: z
        .union([
          z.lazy(() => RAMUpdatemodulesInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      price_per_gb: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      first_word_latency: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      cas_latency: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const CPUCreateInputSchema: z.ZodType<Prisma.CPUCreateInput> = z
  .object({
    id: z.string().cuid().optional(),
    core_count: z.number().int().optional(),
    threads_count: z.number().int().optional(),
    name: z.string(),
    imageUrl: z.string().optional().nullable(),
    core_clock: z.number().optional(),
    boost_clock: z.number().optional(),
    amazonLink: z.string().optional().nullable(),
    tdp: z.number().int().optional().nullable(),
    graphics: z.boolean().optional().nullable(),
    smt: z.boolean().optional().nullable(),
    setups: z.lazy(() => SetupCreateNestedManyWithoutCpuInputSchema).optional(),
  })
  .strict();

export const CPUUncheckedCreateInputSchema: z.ZodType<Prisma.CPUUncheckedCreateInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      core_count: z.number().int().optional(),
      threads_count: z.number().int().optional(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      core_clock: z.number().optional(),
      boost_clock: z.number().optional(),
      amazonLink: z.string().optional().nullable(),
      tdp: z.number().int().optional().nullable(),
      graphics: z.boolean().optional().nullable(),
      smt: z.boolean().optional().nullable(),
      setups: z
        .lazy(() => SetupUncheckedCreateNestedManyWithoutCpuInputSchema)
        .optional(),
    })
    .strict();

export const CPUUpdateInputSchema: z.ZodType<Prisma.CPUUpdateInput> = z
  .object({
    id: z
      .union([
        z.string().cuid(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema),
      ])
      .optional(),
    core_count: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema),
      ])
      .optional(),
    threads_count: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema),
      ])
      .optional(),
    name: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    imageUrl: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    core_clock: z
      .union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)])
      .optional(),
    boost_clock: z
      .union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)])
      .optional(),
    amazonLink: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    tdp: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    graphics: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    smt: z
      .union([
        z.boolean(),
        z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    setups: z.lazy(() => SetupUpdateManyWithoutCpuNestedInputSchema).optional(),
  })
  .strict();

export const CPUUncheckedUpdateInputSchema: z.ZodType<Prisma.CPUUncheckedUpdateInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      core_count: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      threads_count: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      core_clock: z
        .union([
          z.number(),
          z.lazy(() => FloatFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      boost_clock: z
        .union([
          z.number(),
          z.lazy(() => FloatFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      tdp: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      graphics: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      smt: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      setups: z
        .lazy(() => SetupUncheckedUpdateManyWithoutCpuNestedInputSchema)
        .optional(),
    })
    .strict();

export const CPUCreateManyInputSchema: z.ZodType<Prisma.CPUCreateManyInput> = z
  .object({
    id: z.string().cuid().optional(),
    core_count: z.number().int().optional(),
    threads_count: z.number().int().optional(),
    name: z.string(),
    imageUrl: z.string().optional().nullable(),
    core_clock: z.number().optional(),
    boost_clock: z.number().optional(),
    amazonLink: z.string().optional().nullable(),
    tdp: z.number().int().optional().nullable(),
    graphics: z.boolean().optional().nullable(),
    smt: z.boolean().optional().nullable(),
  })
  .strict();

export const CPUUpdateManyMutationInputSchema: z.ZodType<Prisma.CPUUpdateManyMutationInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      core_count: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      threads_count: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      core_clock: z
        .union([
          z.number(),
          z.lazy(() => FloatFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      boost_clock: z
        .union([
          z.number(),
          z.lazy(() => FloatFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      tdp: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      graphics: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      smt: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const CPUUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CPUUncheckedUpdateManyInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      core_count: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      threads_count: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      core_clock: z
        .union([
          z.number(),
          z.lazy(() => FloatFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      boost_clock: z
        .union([
          z.number(),
          z.lazy(() => FloatFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      tdp: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      graphics: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      smt: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const HDDCreateInputSchema: z.ZodType<Prisma.HDDCreateInput> = z
  .object({
    id: z.string().cuid().optional(),
    capacity: z.number().int().optional(),
    price_per_gb: z.number().int().optional(),
    amazonLink: z.string().optional().nullable(),
    name: z.string(),
    imageUrl: z.string().optional().nullable(),
    type: z.string().optional().nullable(),
    cache: z.number().int().optional().nullable(),
    form_factor: z.string().optional().nullable(),
    interface: z.string().optional().nullable(),
    setups: z.lazy(() => SetupCreateNestedManyWithoutHddInputSchema).optional(),
  })
  .strict();

export const HDDUncheckedCreateInputSchema: z.ZodType<Prisma.HDDUncheckedCreateInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      capacity: z.number().int().optional(),
      price_per_gb: z.number().int().optional(),
      amazonLink: z.string().optional().nullable(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      type: z.string().optional().nullable(),
      cache: z.number().int().optional().nullable(),
      form_factor: z.string().optional().nullable(),
      interface: z.string().optional().nullable(),
      setups: z
        .lazy(() => SetupUncheckedCreateNestedManyWithoutHddInputSchema)
        .optional(),
    })
    .strict();

export const HDDUpdateInputSchema: z.ZodType<Prisma.HDDUpdateInput> = z
  .object({
    id: z
      .union([
        z.string().cuid(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema),
      ])
      .optional(),
    capacity: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema),
      ])
      .optional(),
    price_per_gb: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema),
      ])
      .optional(),
    amazonLink: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    name: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    imageUrl: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    type: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    cache: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    form_factor: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    interface: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    setups: z.lazy(() => SetupUpdateManyWithoutHddNestedInputSchema).optional(),
  })
  .strict();

export const HDDUncheckedUpdateInputSchema: z.ZodType<Prisma.HDDUncheckedUpdateInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      capacity: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      price_per_gb: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      type: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      cache: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      form_factor: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      interface: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      setups: z
        .lazy(() => SetupUncheckedUpdateManyWithoutHddNestedInputSchema)
        .optional(),
    })
    .strict();

export const HDDCreateManyInputSchema: z.ZodType<Prisma.HDDCreateManyInput> = z
  .object({
    id: z.string().cuid().optional(),
    capacity: z.number().int().optional(),
    price_per_gb: z.number().int().optional(),
    amazonLink: z.string().optional().nullable(),
    name: z.string(),
    imageUrl: z.string().optional().nullable(),
    type: z.string().optional().nullable(),
    cache: z.number().int().optional().nullable(),
    form_factor: z.string().optional().nullable(),
    interface: z.string().optional().nullable(),
  })
  .strict();

export const HDDUpdateManyMutationInputSchema: z.ZodType<Prisma.HDDUpdateManyMutationInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      capacity: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      price_per_gb: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      type: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      cache: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      form_factor: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      interface: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const HDDUncheckedUpdateManyInputSchema: z.ZodType<Prisma.HDDUncheckedUpdateManyInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      capacity: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      price_per_gb: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      type: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      cache: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      form_factor: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      interface: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const SSDCreateInputSchema: z.ZodType<Prisma.SSDCreateInput> = z
  .object({
    id: z.string().cuid().optional(),
    capacity: z.number().int().optional(),
    price_per_gb: z.number().int().optional(),
    name: z.string(),
    imageUrl: z.string().optional().nullable(),
    amazonLink: z.string().optional().nullable(),
    type: z.string().optional().nullable(),
    cache: z.number().int().optional().nullable(),
    form_factor: z.string().optional().nullable(),
    interface: z.string().optional().nullable(),
    setups: z
      .lazy(() => SSDOfSetupCreateNestedManyWithoutSsdInputSchema)
      .optional(),
  })
  .strict();

export const SSDUncheckedCreateInputSchema: z.ZodType<Prisma.SSDUncheckedCreateInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      capacity: z.number().int().optional(),
      price_per_gb: z.number().int().optional(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      type: z.string().optional().nullable(),
      cache: z.number().int().optional().nullable(),
      form_factor: z.string().optional().nullable(),
      interface: z.string().optional().nullable(),
      setups: z
        .lazy(() => SSDOfSetupUncheckedCreateNestedManyWithoutSsdInputSchema)
        .optional(),
    })
    .strict();

export const SSDUpdateInputSchema: z.ZodType<Prisma.SSDUpdateInput> = z
  .object({
    id: z
      .union([
        z.string().cuid(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema),
      ])
      .optional(),
    capacity: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema),
      ])
      .optional(),
    price_per_gb: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema),
      ])
      .optional(),
    name: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    imageUrl: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    amazonLink: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    type: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    cache: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    form_factor: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    interface: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    setups: z
      .lazy(() => SSDOfSetupUpdateManyWithoutSsdNestedInputSchema)
      .optional(),
  })
  .strict();

export const SSDUncheckedUpdateInputSchema: z.ZodType<Prisma.SSDUncheckedUpdateInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      capacity: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      price_per_gb: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      type: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      cache: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      form_factor: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      interface: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      setups: z
        .lazy(() => SSDOfSetupUncheckedUpdateManyWithoutSsdNestedInputSchema)
        .optional(),
    })
    .strict();

export const SSDCreateManyInputSchema: z.ZodType<Prisma.SSDCreateManyInput> = z
  .object({
    id: z.string().cuid().optional(),
    capacity: z.number().int().optional(),
    price_per_gb: z.number().int().optional(),
    name: z.string(),
    imageUrl: z.string().optional().nullable(),
    amazonLink: z.string().optional().nullable(),
    type: z.string().optional().nullable(),
    cache: z.number().int().optional().nullable(),
    form_factor: z.string().optional().nullable(),
    interface: z.string().optional().nullable(),
  })
  .strict();

export const SSDUpdateManyMutationInputSchema: z.ZodType<Prisma.SSDUpdateManyMutationInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      capacity: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      price_per_gb: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      type: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      cache: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      form_factor: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      interface: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const SSDUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SSDUncheckedUpdateManyInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      capacity: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      price_per_gb: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      type: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      cache: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      form_factor: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      interface: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const GPUCreateInputSchema: z.ZodType<Prisma.GPUCreateInput> = z
  .object({
    id: z.string().cuid().optional(),
    chipset: z.string().optional().nullable(),
    memory: z.number().int().optional().nullable(),
    name: z.string(),
    imageUrl: z.string().optional().nullable(),
    amazonLink: z.string().optional().nullable(),
    core_clock: z.number().int().optional().nullable(),
    boost_clock: z.number().int().optional().nullable(),
    color: z.string().optional().nullable(),
    length: z.number().int().optional().nullable(),
    setups: z.lazy(() => SetupCreateNestedManyWithoutGpuInputSchema).optional(),
  })
  .strict();

export const GPUUncheckedCreateInputSchema: z.ZodType<Prisma.GPUUncheckedCreateInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      chipset: z.string().optional().nullable(),
      memory: z.number().int().optional().nullable(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      core_clock: z.number().int().optional().nullable(),
      boost_clock: z.number().int().optional().nullable(),
      color: z.string().optional().nullable(),
      length: z.number().int().optional().nullable(),
      setups: z
        .lazy(() => SetupUncheckedCreateNestedManyWithoutGpuInputSchema)
        .optional(),
    })
    .strict();

export const GPUUpdateInputSchema: z.ZodType<Prisma.GPUUpdateInput> = z
  .object({
    id: z
      .union([
        z.string().cuid(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema),
      ])
      .optional(),
    chipset: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    memory: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    name: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    imageUrl: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    amazonLink: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    core_clock: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    boost_clock: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    color: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    length: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    setups: z.lazy(() => SetupUpdateManyWithoutGpuNestedInputSchema).optional(),
  })
  .strict();

export const GPUUncheckedUpdateInputSchema: z.ZodType<Prisma.GPUUncheckedUpdateInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      chipset: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      memory: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      core_clock: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      boost_clock: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      length: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      setups: z
        .lazy(() => SetupUncheckedUpdateManyWithoutGpuNestedInputSchema)
        .optional(),
    })
    .strict();

export const GPUCreateManyInputSchema: z.ZodType<Prisma.GPUCreateManyInput> = z
  .object({
    id: z.string().cuid().optional(),
    chipset: z.string().optional().nullable(),
    memory: z.number().int().optional().nullable(),
    name: z.string(),
    imageUrl: z.string().optional().nullable(),
    amazonLink: z.string().optional().nullable(),
    core_clock: z.number().int().optional().nullable(),
    boost_clock: z.number().int().optional().nullable(),
    color: z.string().optional().nullable(),
    length: z.number().int().optional().nullable(),
  })
  .strict();

export const GPUUpdateManyMutationInputSchema: z.ZodType<Prisma.GPUUpdateManyMutationInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      chipset: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      memory: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      core_clock: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      boost_clock: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      length: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const GPUUncheckedUpdateManyInputSchema: z.ZodType<Prisma.GPUUncheckedUpdateManyInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      chipset: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      memory: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      core_clock: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      boost_clock: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      length: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const CaseCreateInputSchema: z.ZodType<Prisma.CaseCreateInput> = z
  .object({
    id: z.string().cuid().optional(),
    type: z.lazy(() => CaseTypeSchema).optional(),
    color: z.string().optional().nullable(),
    name: z.string(),
    imageUrl: z.string().optional().nullable(),
    included_PSU_W: z.number().int().optional().nullable(),
    amazonLink: z.string().optional().nullable(),
    side_panel: z.string().optional().nullable(),
    external_volume: z.string().optional().nullable(),
    internal_35_bays: z.number().int().optional().nullable(),
    setups: z
      .lazy(() => SetupCreateNestedManyWithoutCaseInputSchema)
      .optional(),
  })
  .strict();

export const CaseUncheckedCreateInputSchema: z.ZodType<Prisma.CaseUncheckedCreateInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      type: z.lazy(() => CaseTypeSchema).optional(),
      color: z.string().optional().nullable(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      included_PSU_W: z.number().int().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      side_panel: z.string().optional().nullable(),
      external_volume: z.string().optional().nullable(),
      internal_35_bays: z.number().int().optional().nullable(),
      setups: z
        .lazy(() => SetupUncheckedCreateNestedManyWithoutCaseInputSchema)
        .optional(),
    })
    .strict();

export const CaseUpdateInputSchema: z.ZodType<Prisma.CaseUpdateInput> = z
  .object({
    id: z
      .union([
        z.string().cuid(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema),
      ])
      .optional(),
    type: z
      .union([
        z.lazy(() => CaseTypeSchema),
        z.lazy(() => EnumCaseTypeFieldUpdateOperationsInputSchema),
      ])
      .optional(),
    color: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    name: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    imageUrl: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    included_PSU_W: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    amazonLink: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    side_panel: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    external_volume: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    internal_35_bays: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    setups: z
      .lazy(() => SetupUpdateManyWithoutCaseNestedInputSchema)
      .optional(),
  })
  .strict();

export const CaseUncheckedUpdateInputSchema: z.ZodType<Prisma.CaseUncheckedUpdateInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      type: z
        .union([
          z.lazy(() => CaseTypeSchema),
          z.lazy(() => EnumCaseTypeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      included_PSU_W: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      side_panel: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      external_volume: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      internal_35_bays: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      setups: z
        .lazy(() => SetupUncheckedUpdateManyWithoutCaseNestedInputSchema)
        .optional(),
    })
    .strict();

export const CaseCreateManyInputSchema: z.ZodType<Prisma.CaseCreateManyInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      type: z.lazy(() => CaseTypeSchema).optional(),
      color: z.string().optional().nullable(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      included_PSU_W: z.number().int().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      side_panel: z.string().optional().nullable(),
      external_volume: z.string().optional().nullable(),
      internal_35_bays: z.number().int().optional().nullable(),
    })
    .strict();

export const CaseUpdateManyMutationInputSchema: z.ZodType<Prisma.CaseUpdateManyMutationInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      type: z
        .union([
          z.lazy(() => CaseTypeSchema),
          z.lazy(() => EnumCaseTypeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      included_PSU_W: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      side_panel: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      external_volume: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      internal_35_bays: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const CaseUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CaseUncheckedUpdateManyInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      type: z
        .union([
          z.lazy(() => CaseTypeSchema),
          z.lazy(() => EnumCaseTypeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      included_PSU_W: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      side_panel: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      external_volume: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      internal_35_bays: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const PSUCreateInputSchema: z.ZodType<Prisma.PSUCreateInput> = z
  .object({
    id: z.string().cuid().optional(),
    type: z.lazy(() => PSUTypeSchema).optional(),
    name: z.string(),
    imageUrl: z.string().optional().nullable(),
    efficiency: z.lazy(() => PSUEffSchema).optional(),
    amazonLink: z.string().optional().nullable(),
    wattage: z.number().int().optional().nullable(),
    modular: z.lazy(() => PSUModulSchema).optional(),
    color: z.string().optional().nullable(),
    setups: z.lazy(() => SetupCreateNestedManyWithoutPsuInputSchema).optional(),
  })
  .strict();

export const PSUUncheckedCreateInputSchema: z.ZodType<Prisma.PSUUncheckedCreateInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      type: z.lazy(() => PSUTypeSchema).optional(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      efficiency: z.lazy(() => PSUEffSchema).optional(),
      amazonLink: z.string().optional().nullable(),
      wattage: z.number().int().optional().nullable(),
      modular: z.lazy(() => PSUModulSchema).optional(),
      color: z.string().optional().nullable(),
      setups: z
        .lazy(() => SetupUncheckedCreateNestedManyWithoutPsuInputSchema)
        .optional(),
    })
    .strict();

export const PSUUpdateInputSchema: z.ZodType<Prisma.PSUUpdateInput> = z
  .object({
    id: z
      .union([
        z.string().cuid(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema),
      ])
      .optional(),
    type: z
      .union([
        z.lazy(() => PSUTypeSchema),
        z.lazy(() => EnumPSUTypeFieldUpdateOperationsInputSchema),
      ])
      .optional(),
    name: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    imageUrl: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    efficiency: z
      .union([
        z.lazy(() => PSUEffSchema),
        z.lazy(() => EnumPSUEffFieldUpdateOperationsInputSchema),
      ])
      .optional(),
    amazonLink: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    wattage: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    modular: z
      .union([
        z.lazy(() => PSUModulSchema),
        z.lazy(() => EnumPSUModulFieldUpdateOperationsInputSchema),
      ])
      .optional(),
    color: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    setups: z.lazy(() => SetupUpdateManyWithoutPsuNestedInputSchema).optional(),
  })
  .strict();

export const PSUUncheckedUpdateInputSchema: z.ZodType<Prisma.PSUUncheckedUpdateInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      type: z
        .union([
          z.lazy(() => PSUTypeSchema),
          z.lazy(() => EnumPSUTypeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      efficiency: z
        .union([
          z.lazy(() => PSUEffSchema),
          z.lazy(() => EnumPSUEffFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      wattage: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      modular: z
        .union([
          z.lazy(() => PSUModulSchema),
          z.lazy(() => EnumPSUModulFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      setups: z
        .lazy(() => SetupUncheckedUpdateManyWithoutPsuNestedInputSchema)
        .optional(),
    })
    .strict();

export const PSUCreateManyInputSchema: z.ZodType<Prisma.PSUCreateManyInput> = z
  .object({
    id: z.string().cuid().optional(),
    type: z.lazy(() => PSUTypeSchema).optional(),
    name: z.string(),
    imageUrl: z.string().optional().nullable(),
    efficiency: z.lazy(() => PSUEffSchema).optional(),
    amazonLink: z.string().optional().nullable(),
    wattage: z.number().int().optional().nullable(),
    modular: z.lazy(() => PSUModulSchema).optional(),
    color: z.string().optional().nullable(),
  })
  .strict();

export const PSUUpdateManyMutationInputSchema: z.ZodType<Prisma.PSUUpdateManyMutationInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      type: z
        .union([
          z.lazy(() => PSUTypeSchema),
          z.lazy(() => EnumPSUTypeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      efficiency: z
        .union([
          z.lazy(() => PSUEffSchema),
          z.lazy(() => EnumPSUEffFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      wattage: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      modular: z
        .union([
          z.lazy(() => PSUModulSchema),
          z.lazy(() => EnumPSUModulFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const PSUUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PSUUncheckedUpdateManyInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      type: z
        .union([
          z.lazy(() => PSUTypeSchema),
          z.lazy(() => EnumPSUTypeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      efficiency: z
        .union([
          z.lazy(() => PSUEffSchema),
          z.lazy(() => EnumPSUEffFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      wattage: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      modular: z
        .union([
          z.lazy(() => PSUModulSchema),
          z.lazy(() => EnumPSUModulFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const SetupCreateInputSchema: z.ZodType<Prisma.SetupCreateInput> = z
  .object({
    id: z.string().cuid().optional(),
    name: z.string().optional().nullable(),
    cpu: z.lazy(() => CPUCreateNestedOneWithoutSetupsInputSchema),
    gpu: z.lazy(() => GPUCreateNestedOneWithoutSetupsInputSchema),
    hdd: z.lazy(() => HDDCreateNestedOneWithoutSetupsInputSchema),
    case: z.lazy(() => CaseCreateNestedOneWithoutSetupsInputSchema),
    ram: z.lazy(() => RAMCreateNestedOneWithoutSetupsInputSchema),
    psu: z.lazy(() => PSUCreateNestedOneWithoutSetupsInputSchema),
    monitors: z
      .lazy(() => MonitorsOfSetupCreateNestedManyWithoutSetupInputSchema)
      .optional(),
    sdds: z
      .lazy(() => SSDOfSetupCreateNestedManyWithoutSetupInputSchema)
      .optional(),
    sound_card: z.lazy(() => SoundCardCreateNestedOneWithoutSetupsInputSchema),
    cpu_cooler: z.lazy(() => CPUCoolerCreateNestedOneWithoutSetupsInputSchema),
    motherboard: z.lazy(
      () => MotherboardCreateNestedOneWithoutSetupsInputSchema,
    ),
    headphones: z.lazy(() => HeadphonesCreateNestedOneWithoutSetupsInputSchema),
    keyboard: z.lazy(() => KeyboardCreateNestedOneWithoutSetupsInputSchema),
    mouse: z.lazy(() => MouseCreateNestedOneWithoutSetupsInputSchema),
    speakers: z
      .lazy(() => SpeakersOfSetupCreateNestedManyWithoutSetupInputSchema)
      .optional(),
    webcam: z.lazy(() => WebcamCreateNestedOneWithoutSetupsInputSchema),
    case_fans: z
      .lazy(() => CaseFanOfSetupCreateNestedManyWithoutSetupInputSchema)
      .optional(),
    user: z.lazy(() => UserCreateNestedOneWithoutSetupsInputSchema),
  })
  .strict();

export const SetupUncheckedCreateInputSchema: z.ZodType<Prisma.SetupUncheckedCreateInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      cpu_id: z.string(),
      gpu_id: z.string(),
      hdd_id: z.string(),
      case_id: z.string(),
      psu_id: z.string(),
      ram_id: z.string(),
      name: z.string().optional().nullable(),
      sound_card_id: z.string(),
      cpu_cooler_id: z.string(),
      motherboard_id: z.string(),
      headphones_id: z.string(),
      keyboard_id: z.string(),
      mouse_id: z.string(),
      webcam_id: z.string(),
      user_id: z.string(),
      monitors: z
        .lazy(
          () => MonitorsOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      speakers: z
        .lazy(
          () => SpeakersOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
      case_fans: z
        .lazy(
          () => CaseFanOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
    })
    .strict();

export const SetupUpdateInputSchema: z.ZodType<Prisma.SetupUpdateInput> = z
  .object({
    id: z
      .union([
        z.string().cuid(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema),
      ])
      .optional(),
    name: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    cpu: z
      .lazy(() => CPUUpdateOneRequiredWithoutSetupsNestedInputSchema)
      .optional(),
    gpu: z
      .lazy(() => GPUUpdateOneRequiredWithoutSetupsNestedInputSchema)
      .optional(),
    hdd: z
      .lazy(() => HDDUpdateOneRequiredWithoutSetupsNestedInputSchema)
      .optional(),
    case: z
      .lazy(() => CaseUpdateOneRequiredWithoutSetupsNestedInputSchema)
      .optional(),
    ram: z
      .lazy(() => RAMUpdateOneRequiredWithoutSetupsNestedInputSchema)
      .optional(),
    psu: z
      .lazy(() => PSUUpdateOneRequiredWithoutSetupsNestedInputSchema)
      .optional(),
    monitors: z
      .lazy(() => MonitorsOfSetupUpdateManyWithoutSetupNestedInputSchema)
      .optional(),
    sdds: z
      .lazy(() => SSDOfSetupUpdateManyWithoutSetupNestedInputSchema)
      .optional(),
    sound_card: z
      .lazy(() => SoundCardUpdateOneRequiredWithoutSetupsNestedInputSchema)
      .optional(),
    cpu_cooler: z
      .lazy(() => CPUCoolerUpdateOneRequiredWithoutSetupsNestedInputSchema)
      .optional(),
    motherboard: z
      .lazy(() => MotherboardUpdateOneRequiredWithoutSetupsNestedInputSchema)
      .optional(),
    headphones: z
      .lazy(() => HeadphonesUpdateOneRequiredWithoutSetupsNestedInputSchema)
      .optional(),
    keyboard: z
      .lazy(() => KeyboardUpdateOneRequiredWithoutSetupsNestedInputSchema)
      .optional(),
    mouse: z
      .lazy(() => MouseUpdateOneRequiredWithoutSetupsNestedInputSchema)
      .optional(),
    speakers: z
      .lazy(() => SpeakersOfSetupUpdateManyWithoutSetupNestedInputSchema)
      .optional(),
    webcam: z
      .lazy(() => WebcamUpdateOneRequiredWithoutSetupsNestedInputSchema)
      .optional(),
    case_fans: z
      .lazy(() => CaseFanOfSetupUpdateManyWithoutSetupNestedInputSchema)
      .optional(),
    user: z
      .lazy(() => UserUpdateOneRequiredWithoutSetupsNestedInputSchema)
      .optional(),
  })
  .strict();

export const SetupUncheckedUpdateInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      gpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      hdd_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      case_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      psu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      ram_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      sound_card_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_cooler_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      motherboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      headphones_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      keyboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      mouse_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      webcam_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      user_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      monitors: z
        .lazy(
          () => MonitorsOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      speakers: z
        .lazy(
          () => SpeakersOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
      case_fans: z
        .lazy(
          () => CaseFanOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
    })
    .strict();

export const SetupCreateManyInputSchema: z.ZodType<Prisma.SetupCreateManyInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      cpu_id: z.string(),
      gpu_id: z.string(),
      hdd_id: z.string(),
      case_id: z.string(),
      psu_id: z.string(),
      ram_id: z.string(),
      name: z.string().optional().nullable(),
      sound_card_id: z.string(),
      cpu_cooler_id: z.string(),
      motherboard_id: z.string(),
      headphones_id: z.string(),
      keyboard_id: z.string(),
      mouse_id: z.string(),
      webcam_id: z.string(),
      user_id: z.string(),
    })
    .strict();

export const SetupUpdateManyMutationInputSchema: z.ZodType<Prisma.SetupUpdateManyMutationInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const SetupUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateManyInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      gpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      hdd_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      case_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      psu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      ram_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      sound_card_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_cooler_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      motherboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      headphones_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      keyboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      mouse_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      webcam_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      user_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const SSDOfSetupCreateInputSchema: z.ZodType<Prisma.SSDOfSetupCreateInput> =
  z
    .object({
      ssd: z.lazy(() => SSDCreateNestedOneWithoutSetupsInputSchema),
      setup: z.lazy(() => SetupCreateNestedOneWithoutSddsInputSchema),
    })
    .strict();

export const SSDOfSetupUncheckedCreateInputSchema: z.ZodType<Prisma.SSDOfSetupUncheckedCreateInput> =
  z
    .object({
      ssd_id: z.string(),
      setup_id: z.string(),
    })
    .strict();

export const SSDOfSetupUpdateInputSchema: z.ZodType<Prisma.SSDOfSetupUpdateInput> =
  z
    .object({
      ssd: z
        .lazy(() => SSDUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      setup: z
        .lazy(() => SetupUpdateOneRequiredWithoutSddsNestedInputSchema)
        .optional(),
    })
    .strict();

export const SSDOfSetupUncheckedUpdateInputSchema: z.ZodType<Prisma.SSDOfSetupUncheckedUpdateInput> =
  z
    .object({
      ssd_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      setup_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const SSDOfSetupCreateManyInputSchema: z.ZodType<Prisma.SSDOfSetupCreateManyInput> =
  z
    .object({
      ssd_id: z.string(),
      setup_id: z.string(),
    })
    .strict();

export const SSDOfSetupUpdateManyMutationInputSchema: z.ZodType<Prisma.SSDOfSetupUpdateManyMutationInput> =
  z.object({}).strict();

export const SSDOfSetupUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SSDOfSetupUncheckedUpdateManyInput> =
  z
    .object({
      ssd_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      setup_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const CaseFanOfSetupCreateInputSchema: z.ZodType<Prisma.CaseFanOfSetupCreateInput> =
  z
    .object({
      quantity: z.number().int(),
      case_fan: z.lazy(() => CaseFanCreateNestedOneWithoutSetupsInputSchema),
      setup: z.lazy(() => SetupCreateNestedOneWithoutCase_fansInputSchema),
    })
    .strict();

export const CaseFanOfSetupUncheckedCreateInputSchema: z.ZodType<Prisma.CaseFanOfSetupUncheckedCreateInput> =
  z
    .object({
      case_fan_id: z.string(),
      setup_id: z.string(),
      quantity: z.number().int(),
    })
    .strict();

export const CaseFanOfSetupUpdateInputSchema: z.ZodType<Prisma.CaseFanOfSetupUpdateInput> =
  z
    .object({
      quantity: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      case_fan: z
        .lazy(() => CaseFanUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      setup: z
        .lazy(() => SetupUpdateOneRequiredWithoutCase_fansNestedInputSchema)
        .optional(),
    })
    .strict();

export const CaseFanOfSetupUncheckedUpdateInputSchema: z.ZodType<Prisma.CaseFanOfSetupUncheckedUpdateInput> =
  z
    .object({
      case_fan_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      setup_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      quantity: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const CaseFanOfSetupCreateManyInputSchema: z.ZodType<Prisma.CaseFanOfSetupCreateManyInput> =
  z
    .object({
      case_fan_id: z.string(),
      setup_id: z.string(),
      quantity: z.number().int(),
    })
    .strict();

export const CaseFanOfSetupUpdateManyMutationInputSchema: z.ZodType<Prisma.CaseFanOfSetupUpdateManyMutationInput> =
  z
    .object({
      quantity: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const CaseFanOfSetupUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CaseFanOfSetupUncheckedUpdateManyInput> =
  z
    .object({
      case_fan_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      setup_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      quantity: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const SpeakersOfSetupCreateInputSchema: z.ZodType<Prisma.SpeakersOfSetupCreateInput> =
  z
    .object({
      quantity: z.number().int(),
      speakers: z.lazy(() => SpeakersCreateNestedOneWithoutSetupsInputSchema),
      setup: z.lazy(() => SetupCreateNestedOneWithoutSpeakersInputSchema),
    })
    .strict();

export const SpeakersOfSetupUncheckedCreateInputSchema: z.ZodType<Prisma.SpeakersOfSetupUncheckedCreateInput> =
  z
    .object({
      speakers_id: z.string(),
      setup_id: z.string(),
      quantity: z.number().int(),
    })
    .strict();

export const SpeakersOfSetupUpdateInputSchema: z.ZodType<Prisma.SpeakersOfSetupUpdateInput> =
  z
    .object({
      quantity: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      speakers: z
        .lazy(() => SpeakersUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      setup: z
        .lazy(() => SetupUpdateOneRequiredWithoutSpeakersNestedInputSchema)
        .optional(),
    })
    .strict();

export const SpeakersOfSetupUncheckedUpdateInputSchema: z.ZodType<Prisma.SpeakersOfSetupUncheckedUpdateInput> =
  z
    .object({
      speakers_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      setup_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      quantity: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const SpeakersOfSetupCreateManyInputSchema: z.ZodType<Prisma.SpeakersOfSetupCreateManyInput> =
  z
    .object({
      speakers_id: z.string(),
      setup_id: z.string(),
      quantity: z.number().int(),
    })
    .strict();

export const SpeakersOfSetupUpdateManyMutationInputSchema: z.ZodType<Prisma.SpeakersOfSetupUpdateManyMutationInput> =
  z
    .object({
      quantity: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const SpeakersOfSetupUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SpeakersOfSetupUncheckedUpdateManyInput> =
  z
    .object({
      speakers_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      setup_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      quantity: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const MonitorsOfSetupCreateInputSchema: z.ZodType<Prisma.MonitorsOfSetupCreateInput> =
  z
    .object({
      quantity: z.number().int(),
      monitor: z.lazy(() => MonitorCreateNestedOneWithoutSetupsInputSchema),
      setup: z.lazy(() => SetupCreateNestedOneWithoutMonitorsInputSchema),
    })
    .strict();

export const MonitorsOfSetupUncheckedCreateInputSchema: z.ZodType<Prisma.MonitorsOfSetupUncheckedCreateInput> =
  z
    .object({
      monitor_id: z.string(),
      setup_id: z.string(),
      quantity: z.number().int(),
    })
    .strict();

export const MonitorsOfSetupUpdateInputSchema: z.ZodType<Prisma.MonitorsOfSetupUpdateInput> =
  z
    .object({
      quantity: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      monitor: z
        .lazy(() => MonitorUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      setup: z
        .lazy(() => SetupUpdateOneRequiredWithoutMonitorsNestedInputSchema)
        .optional(),
    })
    .strict();

export const MonitorsOfSetupUncheckedUpdateInputSchema: z.ZodType<Prisma.MonitorsOfSetupUncheckedUpdateInput> =
  z
    .object({
      monitor_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      setup_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      quantity: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const MonitorsOfSetupCreateManyInputSchema: z.ZodType<Prisma.MonitorsOfSetupCreateManyInput> =
  z
    .object({
      monitor_id: z.string(),
      setup_id: z.string(),
      quantity: z.number().int(),
    })
    .strict();

export const MonitorsOfSetupUpdateManyMutationInputSchema: z.ZodType<Prisma.MonitorsOfSetupUpdateManyMutationInput> =
  z
    .object({
      quantity: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const MonitorsOfSetupUncheckedUpdateManyInputSchema: z.ZodType<Prisma.MonitorsOfSetupUncheckedUpdateManyInput> =
  z
    .object({
      monitor_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      setup_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      quantity: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const MonitorCreateInputSchema: z.ZodType<Prisma.MonitorCreateInput> = z
  .object({
    id: z.string().cuid().optional(),
    screen_size: z.number().int().optional().nullable(),
    resolution: z
      .union([
        z.lazy(() => MonitorCreateresolutionInputSchema),
        z.number().int().array(),
      ])
      .optional(),
    amazonLink: z.string().optional().nullable(),
    name: z.string(),
    imageUrl: z.string().optional().nullable(),
    refresh_rate: z.number().int().optional().nullable(),
    response_time: z.number().int().optional().nullable(),
    panel_type: z.lazy(() => MonitorPanelTypeSchema).optional(),
    aspect_ratio: z.string().optional().nullable(),
    setups: z
      .lazy(() => MonitorsOfSetupCreateNestedManyWithoutMonitorInputSchema)
      .optional(),
  })
  .strict();

export const MonitorUncheckedCreateInputSchema: z.ZodType<Prisma.MonitorUncheckedCreateInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      screen_size: z.number().int().optional().nullable(),
      resolution: z
        .union([
          z.lazy(() => MonitorCreateresolutionInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      amazonLink: z.string().optional().nullable(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      refresh_rate: z.number().int().optional().nullable(),
      response_time: z.number().int().optional().nullable(),
      panel_type: z.lazy(() => MonitorPanelTypeSchema).optional(),
      aspect_ratio: z.string().optional().nullable(),
      setups: z
        .lazy(
          () =>
            MonitorsOfSetupUncheckedCreateNestedManyWithoutMonitorInputSchema,
        )
        .optional(),
    })
    .strict();

export const MonitorUpdateInputSchema: z.ZodType<Prisma.MonitorUpdateInput> = z
  .object({
    id: z
      .union([
        z.string().cuid(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema),
      ])
      .optional(),
    screen_size: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    resolution: z
      .union([
        z.lazy(() => MonitorUpdateresolutionInputSchema),
        z.number().int().array(),
      ])
      .optional(),
    amazonLink: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    name: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    imageUrl: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    refresh_rate: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    response_time: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    panel_type: z
      .union([
        z.lazy(() => MonitorPanelTypeSchema),
        z.lazy(() => EnumMonitorPanelTypeFieldUpdateOperationsInputSchema),
      ])
      .optional(),
    aspect_ratio: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    setups: z
      .lazy(() => MonitorsOfSetupUpdateManyWithoutMonitorNestedInputSchema)
      .optional(),
  })
  .strict();

export const MonitorUncheckedUpdateInputSchema: z.ZodType<Prisma.MonitorUncheckedUpdateInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      screen_size: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      resolution: z
        .union([
          z.lazy(() => MonitorUpdateresolutionInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      refresh_rate: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      response_time: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      panel_type: z
        .union([
          z.lazy(() => MonitorPanelTypeSchema),
          z.lazy(() => EnumMonitorPanelTypeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      aspect_ratio: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      setups: z
        .lazy(
          () =>
            MonitorsOfSetupUncheckedUpdateManyWithoutMonitorNestedInputSchema,
        )
        .optional(),
    })
    .strict();

export const MonitorCreateManyInputSchema: z.ZodType<Prisma.MonitorCreateManyInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      screen_size: z.number().int().optional().nullable(),
      resolution: z
        .union([
          z.lazy(() => MonitorCreateresolutionInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      amazonLink: z.string().optional().nullable(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      refresh_rate: z.number().int().optional().nullable(),
      response_time: z.number().int().optional().nullable(),
      panel_type: z.lazy(() => MonitorPanelTypeSchema).optional(),
      aspect_ratio: z.string().optional().nullable(),
    })
    .strict();

export const MonitorUpdateManyMutationInputSchema: z.ZodType<Prisma.MonitorUpdateManyMutationInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      screen_size: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      resolution: z
        .union([
          z.lazy(() => MonitorUpdateresolutionInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      refresh_rate: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      response_time: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      panel_type: z
        .union([
          z.lazy(() => MonitorPanelTypeSchema),
          z.lazy(() => EnumMonitorPanelTypeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      aspect_ratio: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const MonitorUncheckedUpdateManyInputSchema: z.ZodType<Prisma.MonitorUncheckedUpdateManyInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      screen_size: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      resolution: z
        .union([
          z.lazy(() => MonitorUpdateresolutionInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      refresh_rate: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      response_time: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      panel_type: z
        .union([
          z.lazy(() => MonitorPanelTypeSchema),
          z.lazy(() => EnumMonitorPanelTypeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      aspect_ratio: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const SoundCardCreateInputSchema: z.ZodType<Prisma.SoundCardCreateInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      channels: z.string().optional().nullable(),
      digital_audio: z.string().optional().nullable(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      snr: z.number().int().optional().nullable(),
      sample_rate: z.number().int().optional().nullable(),
      chipset: z.string().optional().nullable(),
      interface: z.string().optional().nullable(),
      setups: z
        .lazy(() => SetupCreateNestedManyWithoutSound_cardInputSchema)
        .optional(),
    })
    .strict();

export const SoundCardUncheckedCreateInputSchema: z.ZodType<Prisma.SoundCardUncheckedCreateInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      channels: z.string().optional().nullable(),
      digital_audio: z.string().optional().nullable(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      snr: z.number().int().optional().nullable(),
      sample_rate: z.number().int().optional().nullable(),
      chipset: z.string().optional().nullable(),
      interface: z.string().optional().nullable(),
      setups: z
        .lazy(() => SetupUncheckedCreateNestedManyWithoutSound_cardInputSchema)
        .optional(),
    })
    .strict();

export const SoundCardUpdateInputSchema: z.ZodType<Prisma.SoundCardUpdateInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      channels: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      digital_audio: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      snr: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      sample_rate: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      chipset: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      interface: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      setups: z
        .lazy(() => SetupUpdateManyWithoutSound_cardNestedInputSchema)
        .optional(),
    })
    .strict();

export const SoundCardUncheckedUpdateInputSchema: z.ZodType<Prisma.SoundCardUncheckedUpdateInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      channels: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      digital_audio: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      snr: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      sample_rate: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      chipset: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      interface: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      setups: z
        .lazy(() => SetupUncheckedUpdateManyWithoutSound_cardNestedInputSchema)
        .optional(),
    })
    .strict();

export const SoundCardCreateManyInputSchema: z.ZodType<Prisma.SoundCardCreateManyInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      channels: z.string().optional().nullable(),
      digital_audio: z.string().optional().nullable(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      snr: z.number().int().optional().nullable(),
      sample_rate: z.number().int().optional().nullable(),
      chipset: z.string().optional().nullable(),
      interface: z.string().optional().nullable(),
    })
    .strict();

export const SoundCardUpdateManyMutationInputSchema: z.ZodType<Prisma.SoundCardUpdateManyMutationInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      channels: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      digital_audio: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      snr: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      sample_rate: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      chipset: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      interface: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const SoundCardUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SoundCardUncheckedUpdateManyInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      channels: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      digital_audio: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      snr: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      sample_rate: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      chipset: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      interface: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const HeadphonesCreateInputSchema: z.ZodType<Prisma.HeadphonesCreateInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      type: z.lazy(() => HeadphoneTypesSchema).optional(),
      frequency_response: z
        .union([
          z.lazy(() => HeadphonesCreatefrequency_responseInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      microphone: z.boolean().optional().nullable(),
      wireless: z.boolean().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      noise_cancellation: z.boolean().optional().nullable(),
      enclosure_type: z.lazy(() => EnclosureTypeSchema).optional(),
      color: z.string().optional().nullable(),
      setups: z
        .lazy(() => SetupCreateNestedManyWithoutHeadphonesInputSchema)
        .optional(),
    })
    .strict();

export const HeadphonesUncheckedCreateInputSchema: z.ZodType<Prisma.HeadphonesUncheckedCreateInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      type: z.lazy(() => HeadphoneTypesSchema).optional(),
      frequency_response: z
        .union([
          z.lazy(() => HeadphonesCreatefrequency_responseInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      microphone: z.boolean().optional().nullable(),
      wireless: z.boolean().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      noise_cancellation: z.boolean().optional().nullable(),
      enclosure_type: z.lazy(() => EnclosureTypeSchema).optional(),
      color: z.string().optional().nullable(),
      setups: z
        .lazy(() => SetupUncheckedCreateNestedManyWithoutHeadphonesInputSchema)
        .optional(),
    })
    .strict();

export const HeadphonesUpdateInputSchema: z.ZodType<Prisma.HeadphonesUpdateInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      type: z
        .union([
          z.lazy(() => HeadphoneTypesSchema),
          z.lazy(() => EnumHeadphoneTypesFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      frequency_response: z
        .union([
          z.lazy(() => HeadphonesUpdatefrequency_responseInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      microphone: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      wireless: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      noise_cancellation: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      enclosure_type: z
        .union([
          z.lazy(() => EnclosureTypeSchema),
          z.lazy(() => EnumEnclosureTypeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      setups: z
        .lazy(() => SetupUpdateManyWithoutHeadphonesNestedInputSchema)
        .optional(),
    })
    .strict();

export const HeadphonesUncheckedUpdateInputSchema: z.ZodType<Prisma.HeadphonesUncheckedUpdateInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      type: z
        .union([
          z.lazy(() => HeadphoneTypesSchema),
          z.lazy(() => EnumHeadphoneTypesFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      frequency_response: z
        .union([
          z.lazy(() => HeadphonesUpdatefrequency_responseInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      microphone: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      wireless: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      noise_cancellation: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      enclosure_type: z
        .union([
          z.lazy(() => EnclosureTypeSchema),
          z.lazy(() => EnumEnclosureTypeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      setups: z
        .lazy(() => SetupUncheckedUpdateManyWithoutHeadphonesNestedInputSchema)
        .optional(),
    })
    .strict();

export const HeadphonesCreateManyInputSchema: z.ZodType<Prisma.HeadphonesCreateManyInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      type: z.lazy(() => HeadphoneTypesSchema).optional(),
      frequency_response: z
        .union([
          z.lazy(() => HeadphonesCreatefrequency_responseInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      microphone: z.boolean().optional().nullable(),
      wireless: z.boolean().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      noise_cancellation: z.boolean().optional().nullable(),
      enclosure_type: z.lazy(() => EnclosureTypeSchema).optional(),
      color: z.string().optional().nullable(),
    })
    .strict();

export const HeadphonesUpdateManyMutationInputSchema: z.ZodType<Prisma.HeadphonesUpdateManyMutationInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      type: z
        .union([
          z.lazy(() => HeadphoneTypesSchema),
          z.lazy(() => EnumHeadphoneTypesFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      frequency_response: z
        .union([
          z.lazy(() => HeadphonesUpdatefrequency_responseInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      microphone: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      wireless: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      noise_cancellation: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      enclosure_type: z
        .union([
          z.lazy(() => EnclosureTypeSchema),
          z.lazy(() => EnumEnclosureTypeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const HeadphonesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.HeadphonesUncheckedUpdateManyInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      type: z
        .union([
          z.lazy(() => HeadphoneTypesSchema),
          z.lazy(() => EnumHeadphoneTypesFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      frequency_response: z
        .union([
          z.lazy(() => HeadphonesUpdatefrequency_responseInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      microphone: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      wireless: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      noise_cancellation: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      enclosure_type: z
        .union([
          z.lazy(() => EnclosureTypeSchema),
          z.lazy(() => EnumEnclosureTypeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const KeyboardCreateInputSchema: z.ZodType<Prisma.KeyboardCreateInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      style: z.lazy(() => KeyboardStyleSchema).optional(),
      switches: z.string().optional().nullable(),
      backlit: z.string().optional().nullable(),
      name: z.string(),
      amazonLink: z.string().optional().nullable(),
      imageUrl: z.string().optional().nullable(),
      tenkeyless: z.boolean().optional().nullable(),
      connection_type: z.lazy(() => ConnectionTypeSchema).optional(),
      color: z.string().optional().nullable(),
      setups: z
        .lazy(() => SetupCreateNestedManyWithoutKeyboardInputSchema)
        .optional(),
    })
    .strict();

export const KeyboardUncheckedCreateInputSchema: z.ZodType<Prisma.KeyboardUncheckedCreateInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      style: z.lazy(() => KeyboardStyleSchema).optional(),
      switches: z.string().optional().nullable(),
      backlit: z.string().optional().nullable(),
      name: z.string(),
      amazonLink: z.string().optional().nullable(),
      imageUrl: z.string().optional().nullable(),
      tenkeyless: z.boolean().optional().nullable(),
      connection_type: z.lazy(() => ConnectionTypeSchema).optional(),
      color: z.string().optional().nullable(),
      setups: z
        .lazy(() => SetupUncheckedCreateNestedManyWithoutKeyboardInputSchema)
        .optional(),
    })
    .strict();

export const KeyboardUpdateInputSchema: z.ZodType<Prisma.KeyboardUpdateInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      style: z
        .union([
          z.lazy(() => KeyboardStyleSchema),
          z.lazy(() => EnumKeyboardStyleFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      switches: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      backlit: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      tenkeyless: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      connection_type: z
        .union([
          z.lazy(() => ConnectionTypeSchema),
          z.lazy(() => EnumConnectionTypeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      setups: z
        .lazy(() => SetupUpdateManyWithoutKeyboardNestedInputSchema)
        .optional(),
    })
    .strict();

export const KeyboardUncheckedUpdateInputSchema: z.ZodType<Prisma.KeyboardUncheckedUpdateInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      style: z
        .union([
          z.lazy(() => KeyboardStyleSchema),
          z.lazy(() => EnumKeyboardStyleFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      switches: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      backlit: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      tenkeyless: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      connection_type: z
        .union([
          z.lazy(() => ConnectionTypeSchema),
          z.lazy(() => EnumConnectionTypeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      setups: z
        .lazy(() => SetupUncheckedUpdateManyWithoutKeyboardNestedInputSchema)
        .optional(),
    })
    .strict();

export const KeyboardCreateManyInputSchema: z.ZodType<Prisma.KeyboardCreateManyInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      style: z.lazy(() => KeyboardStyleSchema).optional(),
      switches: z.string().optional().nullable(),
      backlit: z.string().optional().nullable(),
      name: z.string(),
      amazonLink: z.string().optional().nullable(),
      imageUrl: z.string().optional().nullable(),
      tenkeyless: z.boolean().optional().nullable(),
      connection_type: z.lazy(() => ConnectionTypeSchema).optional(),
      color: z.string().optional().nullable(),
    })
    .strict();

export const KeyboardUpdateManyMutationInputSchema: z.ZodType<Prisma.KeyboardUpdateManyMutationInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      style: z
        .union([
          z.lazy(() => KeyboardStyleSchema),
          z.lazy(() => EnumKeyboardStyleFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      switches: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      backlit: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      tenkeyless: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      connection_type: z
        .union([
          z.lazy(() => ConnectionTypeSchema),
          z.lazy(() => EnumConnectionTypeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const KeyboardUncheckedUpdateManyInputSchema: z.ZodType<Prisma.KeyboardUncheckedUpdateManyInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      style: z
        .union([
          z.lazy(() => KeyboardStyleSchema),
          z.lazy(() => EnumKeyboardStyleFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      switches: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      backlit: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      tenkeyless: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      connection_type: z
        .union([
          z.lazy(() => ConnectionTypeSchema),
          z.lazy(() => EnumConnectionTypeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const MouseCreateInputSchema: z.ZodType<Prisma.MouseCreateInput> = z
  .object({
    id: z.string().cuid().optional(),
    tracking_method: z.lazy(() => MouseTrackMethodSchema).optional(),
    connection_type: z.lazy(() => ConnectionTypeSchema).optional(),
    max_dpi: z.number().int().optional().nullable(),
    amazonLink: z.string().optional().nullable(),
    name: z.string(),
    imageUrl: z.string().optional().nullable(),
    hand_orientation: z.lazy(() => MouseOrientationSchema).optional(),
    color: z.string().optional().nullable(),
    setups: z
      .lazy(() => SetupCreateNestedManyWithoutMouseInputSchema)
      .optional(),
  })
  .strict();

export const MouseUncheckedCreateInputSchema: z.ZodType<Prisma.MouseUncheckedCreateInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      tracking_method: z.lazy(() => MouseTrackMethodSchema).optional(),
      connection_type: z.lazy(() => ConnectionTypeSchema).optional(),
      max_dpi: z.number().int().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      hand_orientation: z.lazy(() => MouseOrientationSchema).optional(),
      color: z.string().optional().nullable(),
      setups: z
        .lazy(() => SetupUncheckedCreateNestedManyWithoutMouseInputSchema)
        .optional(),
    })
    .strict();

export const MouseUpdateInputSchema: z.ZodType<Prisma.MouseUpdateInput> = z
  .object({
    id: z
      .union([
        z.string().cuid(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema),
      ])
      .optional(),
    tracking_method: z
      .union([
        z.lazy(() => MouseTrackMethodSchema),
        z.lazy(() => EnumMouseTrackMethodFieldUpdateOperationsInputSchema),
      ])
      .optional(),
    connection_type: z
      .union([
        z.lazy(() => ConnectionTypeSchema),
        z.lazy(() => EnumConnectionTypeFieldUpdateOperationsInputSchema),
      ])
      .optional(),
    max_dpi: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    amazonLink: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    name: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    imageUrl: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    hand_orientation: z
      .union([
        z.lazy(() => MouseOrientationSchema),
        z.lazy(() => EnumMouseOrientationFieldUpdateOperationsInputSchema),
      ])
      .optional(),
    color: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    setups: z
      .lazy(() => SetupUpdateManyWithoutMouseNestedInputSchema)
      .optional(),
  })
  .strict();

export const MouseUncheckedUpdateInputSchema: z.ZodType<Prisma.MouseUncheckedUpdateInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      tracking_method: z
        .union([
          z.lazy(() => MouseTrackMethodSchema),
          z.lazy(() => EnumMouseTrackMethodFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      connection_type: z
        .union([
          z.lazy(() => ConnectionTypeSchema),
          z.lazy(() => EnumConnectionTypeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      max_dpi: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      hand_orientation: z
        .union([
          z.lazy(() => MouseOrientationSchema),
          z.lazy(() => EnumMouseOrientationFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      setups: z
        .lazy(() => SetupUncheckedUpdateManyWithoutMouseNestedInputSchema)
        .optional(),
    })
    .strict();

export const MouseCreateManyInputSchema: z.ZodType<Prisma.MouseCreateManyInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      tracking_method: z.lazy(() => MouseTrackMethodSchema).optional(),
      connection_type: z.lazy(() => ConnectionTypeSchema).optional(),
      max_dpi: z.number().int().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      hand_orientation: z.lazy(() => MouseOrientationSchema).optional(),
      color: z.string().optional().nullable(),
    })
    .strict();

export const MouseUpdateManyMutationInputSchema: z.ZodType<Prisma.MouseUpdateManyMutationInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      tracking_method: z
        .union([
          z.lazy(() => MouseTrackMethodSchema),
          z.lazy(() => EnumMouseTrackMethodFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      connection_type: z
        .union([
          z.lazy(() => ConnectionTypeSchema),
          z.lazy(() => EnumConnectionTypeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      max_dpi: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      hand_orientation: z
        .union([
          z.lazy(() => MouseOrientationSchema),
          z.lazy(() => EnumMouseOrientationFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const MouseUncheckedUpdateManyInputSchema: z.ZodType<Prisma.MouseUncheckedUpdateManyInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      tracking_method: z
        .union([
          z.lazy(() => MouseTrackMethodSchema),
          z.lazy(() => EnumMouseTrackMethodFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      connection_type: z
        .union([
          z.lazy(() => ConnectionTypeSchema),
          z.lazy(() => EnumConnectionTypeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      max_dpi: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      hand_orientation: z
        .union([
          z.lazy(() => MouseOrientationSchema),
          z.lazy(() => EnumMouseOrientationFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const SpeakersCreateInputSchema: z.ZodType<Prisma.SpeakersCreateInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      configuration: z.string().optional().nullable(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      wattage: z.number().int().optional().nullable(),
      frequency_response: z.number().int().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      color: z.string().optional().nullable(),
      setups: z
        .lazy(() => SpeakersOfSetupCreateNestedManyWithoutSpeakersInputSchema)
        .optional(),
    })
    .strict();

export const SpeakersUncheckedCreateInputSchema: z.ZodType<Prisma.SpeakersUncheckedCreateInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      configuration: z.string().optional().nullable(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      wattage: z.number().int().optional().nullable(),
      frequency_response: z.number().int().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      color: z.string().optional().nullable(),
      setups: z
        .lazy(
          () =>
            SpeakersOfSetupUncheckedCreateNestedManyWithoutSpeakersInputSchema,
        )
        .optional(),
    })
    .strict();

export const SpeakersUpdateInputSchema: z.ZodType<Prisma.SpeakersUpdateInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      configuration: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      wattage: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      frequency_response: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      setups: z
        .lazy(() => SpeakersOfSetupUpdateManyWithoutSpeakersNestedInputSchema)
        .optional(),
    })
    .strict();

export const SpeakersUncheckedUpdateInputSchema: z.ZodType<Prisma.SpeakersUncheckedUpdateInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      configuration: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      wattage: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      frequency_response: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      setups: z
        .lazy(
          () =>
            SpeakersOfSetupUncheckedUpdateManyWithoutSpeakersNestedInputSchema,
        )
        .optional(),
    })
    .strict();

export const SpeakersCreateManyInputSchema: z.ZodType<Prisma.SpeakersCreateManyInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      configuration: z.string().optional().nullable(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      wattage: z.number().int().optional().nullable(),
      frequency_response: z.number().int().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      color: z.string().optional().nullable(),
    })
    .strict();

export const SpeakersUpdateManyMutationInputSchema: z.ZodType<Prisma.SpeakersUpdateManyMutationInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      configuration: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      wattage: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      frequency_response: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const SpeakersUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SpeakersUncheckedUpdateManyInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      configuration: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      wattage: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      frequency_response: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const WebcamCreateInputSchema: z.ZodType<Prisma.WebcamCreateInput> = z
  .object({
    id: z.string().cuid().optional(),
    resolutions: z
      .union([
        z.lazy(() => WebcamCreateresolutionsInputSchema),
        z.string().array(),
      ])
      .optional(),
    name: z.string(),
    imageUrl: z.string().optional().nullable(),
    connection: z.lazy(() => ConnectionTypeSchema).optional(),
    focus_type: z.lazy(() => FocusTypeSchema).optional(),
    os: z
      .union([z.lazy(() => WebcamCreateosInputSchema), z.string().array()])
      .optional(),
    amazonLink: z.string().optional().nullable(),
    fov: z.number().int().optional().nullable(),
    setups: z
      .lazy(() => SetupCreateNestedManyWithoutWebcamInputSchema)
      .optional(),
  })
  .strict();

export const WebcamUncheckedCreateInputSchema: z.ZodType<Prisma.WebcamUncheckedCreateInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      resolutions: z
        .union([
          z.lazy(() => WebcamCreateresolutionsInputSchema),
          z.string().array(),
        ])
        .optional(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      connection: z.lazy(() => ConnectionTypeSchema).optional(),
      focus_type: z.lazy(() => FocusTypeSchema).optional(),
      os: z
        .union([z.lazy(() => WebcamCreateosInputSchema), z.string().array()])
        .optional(),
      amazonLink: z.string().optional().nullable(),
      fov: z.number().int().optional().nullable(),
      setups: z
        .lazy(() => SetupUncheckedCreateNestedManyWithoutWebcamInputSchema)
        .optional(),
    })
    .strict();

export const WebcamUpdateInputSchema: z.ZodType<Prisma.WebcamUpdateInput> = z
  .object({
    id: z
      .union([
        z.string().cuid(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema),
      ])
      .optional(),
    resolutions: z
      .union([
        z.lazy(() => WebcamUpdateresolutionsInputSchema),
        z.string().array(),
      ])
      .optional(),
    name: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    imageUrl: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    connection: z
      .union([
        z.lazy(() => ConnectionTypeSchema),
        z.lazy(() => EnumConnectionTypeFieldUpdateOperationsInputSchema),
      ])
      .optional(),
    focus_type: z
      .union([
        z.lazy(() => FocusTypeSchema),
        z.lazy(() => EnumFocusTypeFieldUpdateOperationsInputSchema),
      ])
      .optional(),
    os: z
      .union([z.lazy(() => WebcamUpdateosInputSchema), z.string().array()])
      .optional(),
    amazonLink: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    fov: z
      .union([
        z.number().int(),
        z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    setups: z
      .lazy(() => SetupUpdateManyWithoutWebcamNestedInputSchema)
      .optional(),
  })
  .strict();

export const WebcamUncheckedUpdateInputSchema: z.ZodType<Prisma.WebcamUncheckedUpdateInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      resolutions: z
        .union([
          z.lazy(() => WebcamUpdateresolutionsInputSchema),
          z.string().array(),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      connection: z
        .union([
          z.lazy(() => ConnectionTypeSchema),
          z.lazy(() => EnumConnectionTypeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      focus_type: z
        .union([
          z.lazy(() => FocusTypeSchema),
          z.lazy(() => EnumFocusTypeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      os: z
        .union([z.lazy(() => WebcamUpdateosInputSchema), z.string().array()])
        .optional(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      fov: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      setups: z
        .lazy(() => SetupUncheckedUpdateManyWithoutWebcamNestedInputSchema)
        .optional(),
    })
    .strict();

export const WebcamCreateManyInputSchema: z.ZodType<Prisma.WebcamCreateManyInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      resolutions: z
        .union([
          z.lazy(() => WebcamCreateresolutionsInputSchema),
          z.string().array(),
        ])
        .optional(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      connection: z.lazy(() => ConnectionTypeSchema).optional(),
      focus_type: z.lazy(() => FocusTypeSchema).optional(),
      os: z
        .union([z.lazy(() => WebcamCreateosInputSchema), z.string().array()])
        .optional(),
      amazonLink: z.string().optional().nullable(),
      fov: z.number().int().optional().nullable(),
    })
    .strict();

export const WebcamUpdateManyMutationInputSchema: z.ZodType<Prisma.WebcamUpdateManyMutationInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      resolutions: z
        .union([
          z.lazy(() => WebcamUpdateresolutionsInputSchema),
          z.string().array(),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      connection: z
        .union([
          z.lazy(() => ConnectionTypeSchema),
          z.lazy(() => EnumConnectionTypeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      focus_type: z
        .union([
          z.lazy(() => FocusTypeSchema),
          z.lazy(() => EnumFocusTypeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      os: z
        .union([z.lazy(() => WebcamUpdateosInputSchema), z.string().array()])
        .optional(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      fov: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const WebcamUncheckedUpdateManyInputSchema: z.ZodType<Prisma.WebcamUncheckedUpdateManyInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      resolutions: z
        .union([
          z.lazy(() => WebcamUpdateresolutionsInputSchema),
          z.string().array(),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      connection: z
        .union([
          z.lazy(() => ConnectionTypeSchema),
          z.lazy(() => EnumConnectionTypeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      focus_type: z
        .union([
          z.lazy(() => FocusTypeSchema),
          z.lazy(() => EnumFocusTypeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      os: z
        .union([z.lazy(() => WebcamUpdateosInputSchema), z.string().array()])
        .optional(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      fov: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const CaseFanCreateInputSchema: z.ZodType<Prisma.CaseFanCreateInput> = z
  .object({
    id: z.string().cuid().optional(),
    size: z.number().int().optional(),
    name: z.string(),
    imageUrl: z.string().optional().nullable(),
    color: z.string().optional().nullable(),
    amazonLink: z.string().optional().nullable(),
    rpm: z
      .union([
        z.lazy(() => CaseFanCreaterpmInputSchema),
        z.number().int().array(),
      ])
      .optional(),
    airflow: z
      .union([
        z.lazy(() => CaseFanCreateairflowInputSchema),
        z.number().int().array(),
      ])
      .optional(),
    setups: z
      .lazy(() => CaseFanOfSetupCreateNestedManyWithoutCase_fanInputSchema)
      .optional(),
  })
  .strict();

export const CaseFanUncheckedCreateInputSchema: z.ZodType<Prisma.CaseFanUncheckedCreateInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      size: z.number().int().optional(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      color: z.string().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      rpm: z
        .union([
          z.lazy(() => CaseFanCreaterpmInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      airflow: z
        .union([
          z.lazy(() => CaseFanCreateairflowInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      setups: z
        .lazy(
          () =>
            CaseFanOfSetupUncheckedCreateNestedManyWithoutCase_fanInputSchema,
        )
        .optional(),
    })
    .strict();

export const CaseFanUpdateInputSchema: z.ZodType<Prisma.CaseFanUpdateInput> = z
  .object({
    id: z
      .union([
        z.string().cuid(),
        z.lazy(() => StringFieldUpdateOperationsInputSchema),
      ])
      .optional(),
    size: z
      .union([
        z.number().int(),
        z.lazy(() => IntFieldUpdateOperationsInputSchema),
      ])
      .optional(),
    name: z
      .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
      .optional(),
    imageUrl: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    color: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    amazonLink: z
      .union([
        z.string(),
        z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
      ])
      .optional()
      .nullable(),
    rpm: z
      .union([
        z.lazy(() => CaseFanUpdaterpmInputSchema),
        z.number().int().array(),
      ])
      .optional(),
    airflow: z
      .union([
        z.lazy(() => CaseFanUpdateairflowInputSchema),
        z.number().int().array(),
      ])
      .optional(),
    setups: z
      .lazy(() => CaseFanOfSetupUpdateManyWithoutCase_fanNestedInputSchema)
      .optional(),
  })
  .strict();

export const CaseFanUncheckedUpdateInputSchema: z.ZodType<Prisma.CaseFanUncheckedUpdateInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      size: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      rpm: z
        .union([
          z.lazy(() => CaseFanUpdaterpmInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      airflow: z
        .union([
          z.lazy(() => CaseFanUpdateairflowInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      setups: z
        .lazy(
          () =>
            CaseFanOfSetupUncheckedUpdateManyWithoutCase_fanNestedInputSchema,
        )
        .optional(),
    })
    .strict();

export const CaseFanCreateManyInputSchema: z.ZodType<Prisma.CaseFanCreateManyInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      size: z.number().int().optional(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      color: z.string().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      rpm: z
        .union([
          z.lazy(() => CaseFanCreaterpmInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      airflow: z
        .union([
          z.lazy(() => CaseFanCreateairflowInputSchema),
          z.number().int().array(),
        ])
        .optional(),
    })
    .strict();

export const CaseFanUpdateManyMutationInputSchema: z.ZodType<Prisma.CaseFanUpdateManyMutationInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      size: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      rpm: z
        .union([
          z.lazy(() => CaseFanUpdaterpmInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      airflow: z
        .union([
          z.lazy(() => CaseFanUpdateairflowInputSchema),
          z.number().int().array(),
        ])
        .optional(),
    })
    .strict();

export const CaseFanUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CaseFanUncheckedUpdateManyInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      size: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      rpm: z
        .union([
          z.lazy(() => CaseFanUpdaterpmInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      airflow: z
        .union([
          z.lazy(() => CaseFanUpdateairflowInputSchema),
          z.number().int().array(),
        ])
        .optional(),
    })
    .strict();

export const StringFilterSchema: z.ZodType<Prisma.StringFilter> = z
  .object({
    equals: z.string().optional(),
    in: z.string().array().optional(),
    notIn: z.string().array().optional(),
    lt: z.string().optional(),
    lte: z.string().optional(),
    gt: z.string().optional(),
    gte: z.string().optional(),
    contains: z.string().optional(),
    startsWith: z.string().optional(),
    endsWith: z.string().optional(),
    mode: z.lazy(() => QueryModeSchema).optional(),
    not: z
      .union([z.string(), z.lazy(() => NestedStringFilterSchema)])
      .optional(),
  })
  .strict();

export const StringNullableFilterSchema: z.ZodType<Prisma.StringNullableFilter> =
  z
    .object({
      equals: z.string().optional().nullable(),
      in: z.string().array().optional().nullable(),
      notIn: z.string().array().optional().nullable(),
      lt: z.string().optional(),
      lte: z.string().optional(),
      gt: z.string().optional(),
      gte: z.string().optional(),
      contains: z.string().optional(),
      startsWith: z.string().optional(),
      endsWith: z.string().optional(),
      mode: z.lazy(() => QueryModeSchema).optional(),
      not: z
        .union([z.string(), z.lazy(() => NestedStringNullableFilterSchema)])
        .optional()
        .nullable(),
    })
    .strict();

export const IntNullableFilterSchema: z.ZodType<Prisma.IntNullableFilter> = z
  .object({
    equals: z.number().optional().nullable(),
    in: z.number().array().optional().nullable(),
    notIn: z.number().array().optional().nullable(),
    lt: z.number().optional(),
    lte: z.number().optional(),
    gt: z.number().optional(),
    gte: z.number().optional(),
    not: z
      .union([z.number(), z.lazy(() => NestedIntNullableFilterSchema)])
      .optional()
      .nullable(),
  })
  .strict();

export const UserRelationFilterSchema: z.ZodType<Prisma.UserRelationFilter> = z
  .object({
    is: z.lazy(() => UserWhereInputSchema).optional(),
    isNot: z.lazy(() => UserWhereInputSchema).optional(),
  })
  .strict();

export const SortOrderInputSchema: z.ZodType<Prisma.SortOrderInput> = z
  .object({
    sort: z.lazy(() => SortOrderSchema),
    nulls: z.lazy(() => NullsOrderSchema).optional(),
  })
  .strict();

export const AccountProviderProviderAccountIdCompoundUniqueInputSchema: z.ZodType<Prisma.AccountProviderProviderAccountIdCompoundUniqueInput> =
  z
    .object({
      provider: z.string(),
      providerAccountId: z.string(),
    })
    .strict();

export const AccountCountOrderByAggregateInputSchema: z.ZodType<Prisma.AccountCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      userId: z.lazy(() => SortOrderSchema).optional(),
      type: z.lazy(() => SortOrderSchema).optional(),
      provider: z.lazy(() => SortOrderSchema).optional(),
      providerAccountId: z.lazy(() => SortOrderSchema).optional(),
      refresh_token: z.lazy(() => SortOrderSchema).optional(),
      access_token: z.lazy(() => SortOrderSchema).optional(),
      expires_at: z.lazy(() => SortOrderSchema).optional(),
      token_type: z.lazy(() => SortOrderSchema).optional(),
      scope: z.lazy(() => SortOrderSchema).optional(),
      id_token: z.lazy(() => SortOrderSchema).optional(),
      session_state: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const AccountAvgOrderByAggregateInputSchema: z.ZodType<Prisma.AccountAvgOrderByAggregateInput> =
  z
    .object({
      expires_at: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const AccountMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AccountMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      userId: z.lazy(() => SortOrderSchema).optional(),
      type: z.lazy(() => SortOrderSchema).optional(),
      provider: z.lazy(() => SortOrderSchema).optional(),
      providerAccountId: z.lazy(() => SortOrderSchema).optional(),
      refresh_token: z.lazy(() => SortOrderSchema).optional(),
      access_token: z.lazy(() => SortOrderSchema).optional(),
      expires_at: z.lazy(() => SortOrderSchema).optional(),
      token_type: z.lazy(() => SortOrderSchema).optional(),
      scope: z.lazy(() => SortOrderSchema).optional(),
      id_token: z.lazy(() => SortOrderSchema).optional(),
      session_state: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const AccountMinOrderByAggregateInputSchema: z.ZodType<Prisma.AccountMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      userId: z.lazy(() => SortOrderSchema).optional(),
      type: z.lazy(() => SortOrderSchema).optional(),
      provider: z.lazy(() => SortOrderSchema).optional(),
      providerAccountId: z.lazy(() => SortOrderSchema).optional(),
      refresh_token: z.lazy(() => SortOrderSchema).optional(),
      access_token: z.lazy(() => SortOrderSchema).optional(),
      expires_at: z.lazy(() => SortOrderSchema).optional(),
      token_type: z.lazy(() => SortOrderSchema).optional(),
      scope: z.lazy(() => SortOrderSchema).optional(),
      id_token: z.lazy(() => SortOrderSchema).optional(),
      session_state: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const AccountSumOrderByAggregateInputSchema: z.ZodType<Prisma.AccountSumOrderByAggregateInput> =
  z
    .object({
      expires_at: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const StringWithAggregatesFilterSchema: z.ZodType<Prisma.StringWithAggregatesFilter> =
  z
    .object({
      equals: z.string().optional(),
      in: z.string().array().optional(),
      notIn: z.string().array().optional(),
      lt: z.string().optional(),
      lte: z.string().optional(),
      gt: z.string().optional(),
      gte: z.string().optional(),
      contains: z.string().optional(),
      startsWith: z.string().optional(),
      endsWith: z.string().optional(),
      mode: z.lazy(() => QueryModeSchema).optional(),
      not: z
        .union([
          z.string(),
          z.lazy(() => NestedStringWithAggregatesFilterSchema),
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedStringFilterSchema).optional(),
      _max: z.lazy(() => NestedStringFilterSchema).optional(),
    })
    .strict();

export const StringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.StringNullableWithAggregatesFilter> =
  z
    .object({
      equals: z.string().optional().nullable(),
      in: z.string().array().optional().nullable(),
      notIn: z.string().array().optional().nullable(),
      lt: z.string().optional(),
      lte: z.string().optional(),
      gt: z.string().optional(),
      gte: z.string().optional(),
      contains: z.string().optional(),
      startsWith: z.string().optional(),
      endsWith: z.string().optional(),
      mode: z.lazy(() => QueryModeSchema).optional(),
      not: z
        .union([
          z.string(),
          z.lazy(() => NestedStringNullableWithAggregatesFilterSchema),
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
      _max: z.lazy(() => NestedStringNullableFilterSchema).optional(),
    })
    .strict();

export const IntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.IntNullableWithAggregatesFilter> =
  z
    .object({
      equals: z.number().optional().nullable(),
      in: z.number().array().optional().nullable(),
      notIn: z.number().array().optional().nullable(),
      lt: z.number().optional(),
      lte: z.number().optional(),
      gt: z.number().optional(),
      gte: z.number().optional(),
      not: z
        .union([
          z.number(),
          z.lazy(() => NestedIntNullableWithAggregatesFilterSchema),
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
      _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _max: z.lazy(() => NestedIntNullableFilterSchema).optional(),
    })
    .strict();

export const DateTimeFilterSchema: z.ZodType<Prisma.DateTimeFilter> = z
  .object({
    equals: z.coerce.date().optional(),
    in: z.coerce.date().array().optional(),
    notIn: z.coerce.date().array().optional(),
    lt: z.coerce.date().optional(),
    lte: z.coerce.date().optional(),
    gt: z.coerce.date().optional(),
    gte: z.coerce.date().optional(),
    not: z
      .union([z.coerce.date(), z.lazy(() => NestedDateTimeFilterSchema)])
      .optional(),
  })
  .strict();

export const SessionCountOrderByAggregateInputSchema: z.ZodType<Prisma.SessionCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      sessionToken: z.lazy(() => SortOrderSchema).optional(),
      userId: z.lazy(() => SortOrderSchema).optional(),
      expires: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const SessionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SessionMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      sessionToken: z.lazy(() => SortOrderSchema).optional(),
      userId: z.lazy(() => SortOrderSchema).optional(),
      expires: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const SessionMinOrderByAggregateInputSchema: z.ZodType<Prisma.SessionMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      sessionToken: z.lazy(() => SortOrderSchema).optional(),
      userId: z.lazy(() => SortOrderSchema).optional(),
      expires: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const DateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeWithAggregatesFilter> =
  z
    .object({
      equals: z.coerce.date().optional(),
      in: z.coerce.date().array().optional(),
      notIn: z.coerce.date().array().optional(),
      lt: z.coerce.date().optional(),
      lte: z.coerce.date().optional(),
      gt: z.coerce.date().optional(),
      gte: z.coerce.date().optional(),
      not: z
        .union([
          z.coerce.date(),
          z.lazy(() => NestedDateTimeWithAggregatesFilterSchema),
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
      _max: z.lazy(() => NestedDateTimeFilterSchema).optional(),
    })
    .strict();

export const DateTimeNullableFilterSchema: z.ZodType<Prisma.DateTimeNullableFilter> =
  z
    .object({
      equals: z.coerce.date().optional().nullable(),
      in: z.coerce.date().array().optional().nullable(),
      notIn: z.coerce.date().array().optional().nullable(),
      lt: z.coerce.date().optional(),
      lte: z.coerce.date().optional(),
      gt: z.coerce.date().optional(),
      gte: z.coerce.date().optional(),
      not: z
        .union([
          z.coerce.date(),
          z.lazy(() => NestedDateTimeNullableFilterSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const EnumUserRoleFilterSchema: z.ZodType<Prisma.EnumUserRoleFilter> = z
  .object({
    equals: z.lazy(() => UserRoleSchema).optional(),
    in: z
      .lazy(() => UserRoleSchema)
      .array()
      .optional(),
    notIn: z
      .lazy(() => UserRoleSchema)
      .array()
      .optional(),
    not: z
      .union([
        z.lazy(() => UserRoleSchema),
        z.lazy(() => NestedEnumUserRoleFilterSchema),
      ])
      .optional(),
  })
  .strict();

export const SetupListRelationFilterSchema: z.ZodType<Prisma.SetupListRelationFilter> =
  z
    .object({
      every: z.lazy(() => SetupWhereInputSchema).optional(),
      some: z.lazy(() => SetupWhereInputSchema).optional(),
      none: z.lazy(() => SetupWhereInputSchema).optional(),
    })
    .strict();

export const AccountListRelationFilterSchema: z.ZodType<Prisma.AccountListRelationFilter> =
  z
    .object({
      every: z.lazy(() => AccountWhereInputSchema).optional(),
      some: z.lazy(() => AccountWhereInputSchema).optional(),
      none: z.lazy(() => AccountWhereInputSchema).optional(),
    })
    .strict();

export const SessionListRelationFilterSchema: z.ZodType<Prisma.SessionListRelationFilter> =
  z
    .object({
      every: z.lazy(() => SessionWhereInputSchema).optional(),
      some: z.lazy(() => SessionWhereInputSchema).optional(),
      none: z.lazy(() => SessionWhereInputSchema).optional(),
    })
    .strict();

export const SetupOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SetupOrderByRelationAggregateInput> =
  z
    .object({
      _count: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const AccountOrderByRelationAggregateInputSchema: z.ZodType<Prisma.AccountOrderByRelationAggregateInput> =
  z
    .object({
      _count: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const SessionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SessionOrderByRelationAggregateInput> =
  z
    .object({
      _count: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const UserCountOrderByAggregateInputSchema: z.ZodType<Prisma.UserCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      emailVerified: z.lazy(() => SortOrderSchema).optional(),
      image: z.lazy(() => SortOrderSchema).optional(),
      role: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const UserMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UserMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      emailVerified: z.lazy(() => SortOrderSchema).optional(),
      image: z.lazy(() => SortOrderSchema).optional(),
      role: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const UserMinOrderByAggregateInputSchema: z.ZodType<Prisma.UserMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      email: z.lazy(() => SortOrderSchema).optional(),
      emailVerified: z.lazy(() => SortOrderSchema).optional(),
      image: z.lazy(() => SortOrderSchema).optional(),
      role: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const DateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeNullableWithAggregatesFilter> =
  z
    .object({
      equals: z.coerce.date().optional().nullable(),
      in: z.coerce.date().array().optional().nullable(),
      notIn: z.coerce.date().array().optional().nullable(),
      lt: z.coerce.date().optional(),
      lte: z.coerce.date().optional(),
      gt: z.coerce.date().optional(),
      gte: z.coerce.date().optional(),
      not: z
        .union([
          z.coerce.date(),
          z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema),
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
      _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
    })
    .strict();

export const EnumUserRoleWithAggregatesFilterSchema: z.ZodType<Prisma.EnumUserRoleWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => UserRoleSchema).optional(),
      in: z
        .lazy(() => UserRoleSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => UserRoleSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => UserRoleSchema),
          z.lazy(() => NestedEnumUserRoleWithAggregatesFilterSchema),
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumUserRoleFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumUserRoleFilterSchema).optional(),
    })
    .strict();

export const VerificationTokenIdentifierTokenCompoundUniqueInputSchema: z.ZodType<Prisma.VerificationTokenIdentifierTokenCompoundUniqueInput> =
  z
    .object({
      identifier: z.string(),
      token: z.string(),
    })
    .strict();

export const VerificationTokenCountOrderByAggregateInputSchema: z.ZodType<Prisma.VerificationTokenCountOrderByAggregateInput> =
  z
    .object({
      identifier: z.lazy(() => SortOrderSchema).optional(),
      token: z.lazy(() => SortOrderSchema).optional(),
      expires: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const VerificationTokenMaxOrderByAggregateInputSchema: z.ZodType<Prisma.VerificationTokenMaxOrderByAggregateInput> =
  z
    .object({
      identifier: z.lazy(() => SortOrderSchema).optional(),
      token: z.lazy(() => SortOrderSchema).optional(),
      expires: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const VerificationTokenMinOrderByAggregateInputSchema: z.ZodType<Prisma.VerificationTokenMinOrderByAggregateInput> =
  z
    .object({
      identifier: z.lazy(() => SortOrderSchema).optional(),
      token: z.lazy(() => SortOrderSchema).optional(),
      expires: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const CPUCoolerCountOrderByAggregateInputSchema: z.ZodType<Prisma.CPUCoolerCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      rpm: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      noise_level: z.lazy(() => SortOrderSchema).optional(),
      color: z.lazy(() => SortOrderSchema).optional(),
      size: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const CPUCoolerAvgOrderByAggregateInputSchema: z.ZodType<Prisma.CPUCoolerAvgOrderByAggregateInput> =
  z
    .object({
      rpm: z.lazy(() => SortOrderSchema).optional(),
      noise_level: z.lazy(() => SortOrderSchema).optional(),
      size: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const CPUCoolerMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CPUCoolerMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      rpm: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      noise_level: z.lazy(() => SortOrderSchema).optional(),
      color: z.lazy(() => SortOrderSchema).optional(),
      size: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const CPUCoolerMinOrderByAggregateInputSchema: z.ZodType<Prisma.CPUCoolerMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      rpm: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      noise_level: z.lazy(() => SortOrderSchema).optional(),
      color: z.lazy(() => SortOrderSchema).optional(),
      size: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const CPUCoolerSumOrderByAggregateInputSchema: z.ZodType<Prisma.CPUCoolerSumOrderByAggregateInput> =
  z
    .object({
      rpm: z.lazy(() => SortOrderSchema).optional(),
      noise_level: z.lazy(() => SortOrderSchema).optional(),
      size: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const StringNullableListFilterSchema: z.ZodType<Prisma.StringNullableListFilter> =
  z
    .object({
      equals: z.string().array().optional().nullable(),
      has: z.string().optional().nullable(),
      hasEvery: z.string().array().optional(),
      hasSome: z.string().array().optional(),
      isEmpty: z.boolean().optional(),
    })
    .strict();

export const IntFilterSchema: z.ZodType<Prisma.IntFilter> = z
  .object({
    equals: z.number().optional(),
    in: z.number().array().optional(),
    notIn: z.number().array().optional(),
    lt: z.number().optional(),
    lte: z.number().optional(),
    gt: z.number().optional(),
    gte: z.number().optional(),
    not: z.union([z.number(), z.lazy(() => NestedIntFilterSchema)]).optional(),
  })
  .strict();

export const MotherboardCountOrderByAggregateInputSchema: z.ZodType<Prisma.MotherboardCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      socket: z.lazy(() => SortOrderSchema).optional(),
      form_factor: z.lazy(() => SortOrderSchema).optional(),
      max_memory: z.lazy(() => SortOrderSchema).optional(),
      memory_slots: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      color: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const MotherboardAvgOrderByAggregateInputSchema: z.ZodType<Prisma.MotherboardAvgOrderByAggregateInput> =
  z
    .object({
      max_memory: z.lazy(() => SortOrderSchema).optional(),
      memory_slots: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const MotherboardMaxOrderByAggregateInputSchema: z.ZodType<Prisma.MotherboardMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      form_factor: z.lazy(() => SortOrderSchema).optional(),
      max_memory: z.lazy(() => SortOrderSchema).optional(),
      memory_slots: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      color: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const MotherboardMinOrderByAggregateInputSchema: z.ZodType<Prisma.MotherboardMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      form_factor: z.lazy(() => SortOrderSchema).optional(),
      max_memory: z.lazy(() => SortOrderSchema).optional(),
      memory_slots: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      color: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const MotherboardSumOrderByAggregateInputSchema: z.ZodType<Prisma.MotherboardSumOrderByAggregateInput> =
  z
    .object({
      max_memory: z.lazy(() => SortOrderSchema).optional(),
      memory_slots: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const IntWithAggregatesFilterSchema: z.ZodType<Prisma.IntWithAggregatesFilter> =
  z
    .object({
      equals: z.number().optional(),
      in: z.number().array().optional(),
      notIn: z.number().array().optional(),
      lt: z.number().optional(),
      lte: z.number().optional(),
      gt: z.number().optional(),
      gte: z.number().optional(),
      not: z
        .union([z.number(), z.lazy(() => NestedIntWithAggregatesFilterSchema)])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
      _sum: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedIntFilterSchema).optional(),
      _max: z.lazy(() => NestedIntFilterSchema).optional(),
    })
    .strict();

export const IntNullableListFilterSchema: z.ZodType<Prisma.IntNullableListFilter> =
  z
    .object({
      equals: z.number().array().optional().nullable(),
      has: z.number().optional().nullable(),
      hasEvery: z.number().array().optional(),
      hasSome: z.number().array().optional(),
      isEmpty: z.boolean().optional(),
    })
    .strict();

export const RAMCountOrderByAggregateInputSchema: z.ZodType<Prisma.RAMCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      speed: z.lazy(() => SortOrderSchema).optional(),
      modules: z.lazy(() => SortOrderSchema).optional(),
      price_per_gb: z.lazy(() => SortOrderSchema).optional(),
      color: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      first_word_latency: z.lazy(() => SortOrderSchema).optional(),
      cas_latency: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const RAMAvgOrderByAggregateInputSchema: z.ZodType<Prisma.RAMAvgOrderByAggregateInput> =
  z
    .object({
      speed: z.lazy(() => SortOrderSchema).optional(),
      modules: z.lazy(() => SortOrderSchema).optional(),
      price_per_gb: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const RAMMaxOrderByAggregateInputSchema: z.ZodType<Prisma.RAMMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      price_per_gb: z.lazy(() => SortOrderSchema).optional(),
      color: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      first_word_latency: z.lazy(() => SortOrderSchema).optional(),
      cas_latency: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const RAMMinOrderByAggregateInputSchema: z.ZodType<Prisma.RAMMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      price_per_gb: z.lazy(() => SortOrderSchema).optional(),
      color: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      first_word_latency: z.lazy(() => SortOrderSchema).optional(),
      cas_latency: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const RAMSumOrderByAggregateInputSchema: z.ZodType<Prisma.RAMSumOrderByAggregateInput> =
  z
    .object({
      speed: z.lazy(() => SortOrderSchema).optional(),
      modules: z.lazy(() => SortOrderSchema).optional(),
      price_per_gb: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const FloatFilterSchema: z.ZodType<Prisma.FloatFilter> = z
  .object({
    equals: z.number().optional(),
    in: z.number().array().optional(),
    notIn: z.number().array().optional(),
    lt: z.number().optional(),
    lte: z.number().optional(),
    gt: z.number().optional(),
    gte: z.number().optional(),
    not: z
      .union([z.number(), z.lazy(() => NestedFloatFilterSchema)])
      .optional(),
  })
  .strict();

export const BoolNullableFilterSchema: z.ZodType<Prisma.BoolNullableFilter> = z
  .object({
    equals: z.boolean().optional().nullable(),
    not: z
      .union([z.boolean(), z.lazy(() => NestedBoolNullableFilterSchema)])
      .optional()
      .nullable(),
  })
  .strict();

export const CPUCountOrderByAggregateInputSchema: z.ZodType<Prisma.CPUCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      core_count: z.lazy(() => SortOrderSchema).optional(),
      threads_count: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      core_clock: z.lazy(() => SortOrderSchema).optional(),
      boost_clock: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      tdp: z.lazy(() => SortOrderSchema).optional(),
      graphics: z.lazy(() => SortOrderSchema).optional(),
      smt: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const CPUAvgOrderByAggregateInputSchema: z.ZodType<Prisma.CPUAvgOrderByAggregateInput> =
  z
    .object({
      core_count: z.lazy(() => SortOrderSchema).optional(),
      threads_count: z.lazy(() => SortOrderSchema).optional(),
      core_clock: z.lazy(() => SortOrderSchema).optional(),
      boost_clock: z.lazy(() => SortOrderSchema).optional(),
      tdp: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const CPUMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CPUMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      core_count: z.lazy(() => SortOrderSchema).optional(),
      threads_count: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      core_clock: z.lazy(() => SortOrderSchema).optional(),
      boost_clock: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      tdp: z.lazy(() => SortOrderSchema).optional(),
      graphics: z.lazy(() => SortOrderSchema).optional(),
      smt: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const CPUMinOrderByAggregateInputSchema: z.ZodType<Prisma.CPUMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      core_count: z.lazy(() => SortOrderSchema).optional(),
      threads_count: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      core_clock: z.lazy(() => SortOrderSchema).optional(),
      boost_clock: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      tdp: z.lazy(() => SortOrderSchema).optional(),
      graphics: z.lazy(() => SortOrderSchema).optional(),
      smt: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const CPUSumOrderByAggregateInputSchema: z.ZodType<Prisma.CPUSumOrderByAggregateInput> =
  z
    .object({
      core_count: z.lazy(() => SortOrderSchema).optional(),
      threads_count: z.lazy(() => SortOrderSchema).optional(),
      core_clock: z.lazy(() => SortOrderSchema).optional(),
      boost_clock: z.lazy(() => SortOrderSchema).optional(),
      tdp: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const FloatWithAggregatesFilterSchema: z.ZodType<Prisma.FloatWithAggregatesFilter> =
  z
    .object({
      equals: z.number().optional(),
      in: z.number().array().optional(),
      notIn: z.number().array().optional(),
      lt: z.number().optional(),
      lte: z.number().optional(),
      gt: z.number().optional(),
      gte: z.number().optional(),
      not: z
        .union([
          z.number(),
          z.lazy(() => NestedFloatWithAggregatesFilterSchema),
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
      _sum: z.lazy(() => NestedFloatFilterSchema).optional(),
      _min: z.lazy(() => NestedFloatFilterSchema).optional(),
      _max: z.lazy(() => NestedFloatFilterSchema).optional(),
    })
    .strict();

export const BoolNullableWithAggregatesFilterSchema: z.ZodType<Prisma.BoolNullableWithAggregatesFilter> =
  z
    .object({
      equals: z.boolean().optional().nullable(),
      not: z
        .union([
          z.boolean(),
          z.lazy(() => NestedBoolNullableWithAggregatesFilterSchema),
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z.lazy(() => NestedBoolNullableFilterSchema).optional(),
      _max: z.lazy(() => NestedBoolNullableFilterSchema).optional(),
    })
    .strict();

export const HDDCountOrderByAggregateInputSchema: z.ZodType<Prisma.HDDCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      capacity: z.lazy(() => SortOrderSchema).optional(),
      price_per_gb: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      type: z.lazy(() => SortOrderSchema).optional(),
      cache: z.lazy(() => SortOrderSchema).optional(),
      form_factor: z.lazy(() => SortOrderSchema).optional(),
      interface: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const HDDAvgOrderByAggregateInputSchema: z.ZodType<Prisma.HDDAvgOrderByAggregateInput> =
  z
    .object({
      capacity: z.lazy(() => SortOrderSchema).optional(),
      price_per_gb: z.lazy(() => SortOrderSchema).optional(),
      cache: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const HDDMaxOrderByAggregateInputSchema: z.ZodType<Prisma.HDDMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      capacity: z.lazy(() => SortOrderSchema).optional(),
      price_per_gb: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      type: z.lazy(() => SortOrderSchema).optional(),
      cache: z.lazy(() => SortOrderSchema).optional(),
      form_factor: z.lazy(() => SortOrderSchema).optional(),
      interface: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const HDDMinOrderByAggregateInputSchema: z.ZodType<Prisma.HDDMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      capacity: z.lazy(() => SortOrderSchema).optional(),
      price_per_gb: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      type: z.lazy(() => SortOrderSchema).optional(),
      cache: z.lazy(() => SortOrderSchema).optional(),
      form_factor: z.lazy(() => SortOrderSchema).optional(),
      interface: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const HDDSumOrderByAggregateInputSchema: z.ZodType<Prisma.HDDSumOrderByAggregateInput> =
  z
    .object({
      capacity: z.lazy(() => SortOrderSchema).optional(),
      price_per_gb: z.lazy(() => SortOrderSchema).optional(),
      cache: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const SSDOfSetupListRelationFilterSchema: z.ZodType<Prisma.SSDOfSetupListRelationFilter> =
  z
    .object({
      every: z.lazy(() => SSDOfSetupWhereInputSchema).optional(),
      some: z.lazy(() => SSDOfSetupWhereInputSchema).optional(),
      none: z.lazy(() => SSDOfSetupWhereInputSchema).optional(),
    })
    .strict();

export const SSDOfSetupOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SSDOfSetupOrderByRelationAggregateInput> =
  z
    .object({
      _count: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const SSDCountOrderByAggregateInputSchema: z.ZodType<Prisma.SSDCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      capacity: z.lazy(() => SortOrderSchema).optional(),
      price_per_gb: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      type: z.lazy(() => SortOrderSchema).optional(),
      cache: z.lazy(() => SortOrderSchema).optional(),
      form_factor: z.lazy(() => SortOrderSchema).optional(),
      interface: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const SSDAvgOrderByAggregateInputSchema: z.ZodType<Prisma.SSDAvgOrderByAggregateInput> =
  z
    .object({
      capacity: z.lazy(() => SortOrderSchema).optional(),
      price_per_gb: z.lazy(() => SortOrderSchema).optional(),
      cache: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const SSDMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SSDMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      capacity: z.lazy(() => SortOrderSchema).optional(),
      price_per_gb: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      type: z.lazy(() => SortOrderSchema).optional(),
      cache: z.lazy(() => SortOrderSchema).optional(),
      form_factor: z.lazy(() => SortOrderSchema).optional(),
      interface: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const SSDMinOrderByAggregateInputSchema: z.ZodType<Prisma.SSDMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      capacity: z.lazy(() => SortOrderSchema).optional(),
      price_per_gb: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      type: z.lazy(() => SortOrderSchema).optional(),
      cache: z.lazy(() => SortOrderSchema).optional(),
      form_factor: z.lazy(() => SortOrderSchema).optional(),
      interface: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const SSDSumOrderByAggregateInputSchema: z.ZodType<Prisma.SSDSumOrderByAggregateInput> =
  z
    .object({
      capacity: z.lazy(() => SortOrderSchema).optional(),
      price_per_gb: z.lazy(() => SortOrderSchema).optional(),
      cache: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const GPUCountOrderByAggregateInputSchema: z.ZodType<Prisma.GPUCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      chipset: z.lazy(() => SortOrderSchema).optional(),
      memory: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      core_clock: z.lazy(() => SortOrderSchema).optional(),
      boost_clock: z.lazy(() => SortOrderSchema).optional(),
      color: z.lazy(() => SortOrderSchema).optional(),
      length: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const GPUAvgOrderByAggregateInputSchema: z.ZodType<Prisma.GPUAvgOrderByAggregateInput> =
  z
    .object({
      memory: z.lazy(() => SortOrderSchema).optional(),
      core_clock: z.lazy(() => SortOrderSchema).optional(),
      boost_clock: z.lazy(() => SortOrderSchema).optional(),
      length: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const GPUMaxOrderByAggregateInputSchema: z.ZodType<Prisma.GPUMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      chipset: z.lazy(() => SortOrderSchema).optional(),
      memory: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      core_clock: z.lazy(() => SortOrderSchema).optional(),
      boost_clock: z.lazy(() => SortOrderSchema).optional(),
      color: z.lazy(() => SortOrderSchema).optional(),
      length: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const GPUMinOrderByAggregateInputSchema: z.ZodType<Prisma.GPUMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      chipset: z.lazy(() => SortOrderSchema).optional(),
      memory: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      core_clock: z.lazy(() => SortOrderSchema).optional(),
      boost_clock: z.lazy(() => SortOrderSchema).optional(),
      color: z.lazy(() => SortOrderSchema).optional(),
      length: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const GPUSumOrderByAggregateInputSchema: z.ZodType<Prisma.GPUSumOrderByAggregateInput> =
  z
    .object({
      memory: z.lazy(() => SortOrderSchema).optional(),
      core_clock: z.lazy(() => SortOrderSchema).optional(),
      boost_clock: z.lazy(() => SortOrderSchema).optional(),
      length: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const EnumCaseTypeFilterSchema: z.ZodType<Prisma.EnumCaseTypeFilter> = z
  .object({
    equals: z.lazy(() => CaseTypeSchema).optional(),
    in: z
      .lazy(() => CaseTypeSchema)
      .array()
      .optional(),
    notIn: z
      .lazy(() => CaseTypeSchema)
      .array()
      .optional(),
    not: z
      .union([
        z.lazy(() => CaseTypeSchema),
        z.lazy(() => NestedEnumCaseTypeFilterSchema),
      ])
      .optional(),
  })
  .strict();

export const CaseCountOrderByAggregateInputSchema: z.ZodType<Prisma.CaseCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      type: z.lazy(() => SortOrderSchema).optional(),
      color: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      included_PSU_W: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      side_panel: z.lazy(() => SortOrderSchema).optional(),
      external_volume: z.lazy(() => SortOrderSchema).optional(),
      internal_35_bays: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const CaseAvgOrderByAggregateInputSchema: z.ZodType<Prisma.CaseAvgOrderByAggregateInput> =
  z
    .object({
      included_PSU_W: z.lazy(() => SortOrderSchema).optional(),
      internal_35_bays: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const CaseMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CaseMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      type: z.lazy(() => SortOrderSchema).optional(),
      color: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      included_PSU_W: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      side_panel: z.lazy(() => SortOrderSchema).optional(),
      external_volume: z.lazy(() => SortOrderSchema).optional(),
      internal_35_bays: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const CaseMinOrderByAggregateInputSchema: z.ZodType<Prisma.CaseMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      type: z.lazy(() => SortOrderSchema).optional(),
      color: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      included_PSU_W: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      side_panel: z.lazy(() => SortOrderSchema).optional(),
      external_volume: z.lazy(() => SortOrderSchema).optional(),
      internal_35_bays: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const CaseSumOrderByAggregateInputSchema: z.ZodType<Prisma.CaseSumOrderByAggregateInput> =
  z
    .object({
      included_PSU_W: z.lazy(() => SortOrderSchema).optional(),
      internal_35_bays: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const EnumCaseTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumCaseTypeWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => CaseTypeSchema).optional(),
      in: z
        .lazy(() => CaseTypeSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => CaseTypeSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => CaseTypeSchema),
          z.lazy(() => NestedEnumCaseTypeWithAggregatesFilterSchema),
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumCaseTypeFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumCaseTypeFilterSchema).optional(),
    })
    .strict();

export const EnumPSUTypeFilterSchema: z.ZodType<Prisma.EnumPSUTypeFilter> = z
  .object({
    equals: z.lazy(() => PSUTypeSchema).optional(),
    in: z
      .lazy(() => PSUTypeSchema)
      .array()
      .optional(),
    notIn: z
      .lazy(() => PSUTypeSchema)
      .array()
      .optional(),
    not: z
      .union([
        z.lazy(() => PSUTypeSchema),
        z.lazy(() => NestedEnumPSUTypeFilterSchema),
      ])
      .optional(),
  })
  .strict();

export const EnumPSUEffFilterSchema: z.ZodType<Prisma.EnumPSUEffFilter> = z
  .object({
    equals: z.lazy(() => PSUEffSchema).optional(),
    in: z
      .lazy(() => PSUEffSchema)
      .array()
      .optional(),
    notIn: z
      .lazy(() => PSUEffSchema)
      .array()
      .optional(),
    not: z
      .union([
        z.lazy(() => PSUEffSchema),
        z.lazy(() => NestedEnumPSUEffFilterSchema),
      ])
      .optional(),
  })
  .strict();

export const EnumPSUModulFilterSchema: z.ZodType<Prisma.EnumPSUModulFilter> = z
  .object({
    equals: z.lazy(() => PSUModulSchema).optional(),
    in: z
      .lazy(() => PSUModulSchema)
      .array()
      .optional(),
    notIn: z
      .lazy(() => PSUModulSchema)
      .array()
      .optional(),
    not: z
      .union([
        z.lazy(() => PSUModulSchema),
        z.lazy(() => NestedEnumPSUModulFilterSchema),
      ])
      .optional(),
  })
  .strict();

export const PSUCountOrderByAggregateInputSchema: z.ZodType<Prisma.PSUCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      type: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      efficiency: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      wattage: z.lazy(() => SortOrderSchema).optional(),
      modular: z.lazy(() => SortOrderSchema).optional(),
      color: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const PSUAvgOrderByAggregateInputSchema: z.ZodType<Prisma.PSUAvgOrderByAggregateInput> =
  z
    .object({
      wattage: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const PSUMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PSUMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      type: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      efficiency: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      wattage: z.lazy(() => SortOrderSchema).optional(),
      modular: z.lazy(() => SortOrderSchema).optional(),
      color: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const PSUMinOrderByAggregateInputSchema: z.ZodType<Prisma.PSUMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      type: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      efficiency: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      wattage: z.lazy(() => SortOrderSchema).optional(),
      modular: z.lazy(() => SortOrderSchema).optional(),
      color: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const PSUSumOrderByAggregateInputSchema: z.ZodType<Prisma.PSUSumOrderByAggregateInput> =
  z
    .object({
      wattage: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const EnumPSUTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumPSUTypeWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => PSUTypeSchema).optional(),
      in: z
        .lazy(() => PSUTypeSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => PSUTypeSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => PSUTypeSchema),
          z.lazy(() => NestedEnumPSUTypeWithAggregatesFilterSchema),
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumPSUTypeFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumPSUTypeFilterSchema).optional(),
    })
    .strict();

export const EnumPSUEffWithAggregatesFilterSchema: z.ZodType<Prisma.EnumPSUEffWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => PSUEffSchema).optional(),
      in: z
        .lazy(() => PSUEffSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => PSUEffSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => PSUEffSchema),
          z.lazy(() => NestedEnumPSUEffWithAggregatesFilterSchema),
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumPSUEffFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumPSUEffFilterSchema).optional(),
    })
    .strict();

export const EnumPSUModulWithAggregatesFilterSchema: z.ZodType<Prisma.EnumPSUModulWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => PSUModulSchema).optional(),
      in: z
        .lazy(() => PSUModulSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => PSUModulSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => PSUModulSchema),
          z.lazy(() => NestedEnumPSUModulWithAggregatesFilterSchema),
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumPSUModulFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumPSUModulFilterSchema).optional(),
    })
    .strict();

export const CPURelationFilterSchema: z.ZodType<Prisma.CPURelationFilter> = z
  .object({
    is: z.lazy(() => CPUWhereInputSchema).optional(),
    isNot: z.lazy(() => CPUWhereInputSchema).optional(),
  })
  .strict();

export const GPURelationFilterSchema: z.ZodType<Prisma.GPURelationFilter> = z
  .object({
    is: z.lazy(() => GPUWhereInputSchema).optional(),
    isNot: z.lazy(() => GPUWhereInputSchema).optional(),
  })
  .strict();

export const HDDRelationFilterSchema: z.ZodType<Prisma.HDDRelationFilter> = z
  .object({
    is: z.lazy(() => HDDWhereInputSchema).optional(),
    isNot: z.lazy(() => HDDWhereInputSchema).optional(),
  })
  .strict();

export const CaseRelationFilterSchema: z.ZodType<Prisma.CaseRelationFilter> = z
  .object({
    is: z.lazy(() => CaseWhereInputSchema).optional(),
    isNot: z.lazy(() => CaseWhereInputSchema).optional(),
  })
  .strict();

export const RAMRelationFilterSchema: z.ZodType<Prisma.RAMRelationFilter> = z
  .object({
    is: z.lazy(() => RAMWhereInputSchema).optional(),
    isNot: z.lazy(() => RAMWhereInputSchema).optional(),
  })
  .strict();

export const PSURelationFilterSchema: z.ZodType<Prisma.PSURelationFilter> = z
  .object({
    is: z.lazy(() => PSUWhereInputSchema).optional(),
    isNot: z.lazy(() => PSUWhereInputSchema).optional(),
  })
  .strict();

export const MonitorsOfSetupListRelationFilterSchema: z.ZodType<Prisma.MonitorsOfSetupListRelationFilter> =
  z
    .object({
      every: z.lazy(() => MonitorsOfSetupWhereInputSchema).optional(),
      some: z.lazy(() => MonitorsOfSetupWhereInputSchema).optional(),
      none: z.lazy(() => MonitorsOfSetupWhereInputSchema).optional(),
    })
    .strict();

export const SoundCardRelationFilterSchema: z.ZodType<Prisma.SoundCardRelationFilter> =
  z
    .object({
      is: z.lazy(() => SoundCardWhereInputSchema).optional(),
      isNot: z.lazy(() => SoundCardWhereInputSchema).optional(),
    })
    .strict();

export const CPUCoolerRelationFilterSchema: z.ZodType<Prisma.CPUCoolerRelationFilter> =
  z
    .object({
      is: z.lazy(() => CPUCoolerWhereInputSchema).optional(),
      isNot: z.lazy(() => CPUCoolerWhereInputSchema).optional(),
    })
    .strict();

export const MotherboardRelationFilterSchema: z.ZodType<Prisma.MotherboardRelationFilter> =
  z
    .object({
      is: z.lazy(() => MotherboardWhereInputSchema).optional(),
      isNot: z.lazy(() => MotherboardWhereInputSchema).optional(),
    })
    .strict();

export const HeadphonesRelationFilterSchema: z.ZodType<Prisma.HeadphonesRelationFilter> =
  z
    .object({
      is: z.lazy(() => HeadphonesWhereInputSchema).optional(),
      isNot: z.lazy(() => HeadphonesWhereInputSchema).optional(),
    })
    .strict();

export const KeyboardRelationFilterSchema: z.ZodType<Prisma.KeyboardRelationFilter> =
  z
    .object({
      is: z.lazy(() => KeyboardWhereInputSchema).optional(),
      isNot: z.lazy(() => KeyboardWhereInputSchema).optional(),
    })
    .strict();

export const MouseRelationFilterSchema: z.ZodType<Prisma.MouseRelationFilter> =
  z
    .object({
      is: z.lazy(() => MouseWhereInputSchema).optional(),
      isNot: z.lazy(() => MouseWhereInputSchema).optional(),
    })
    .strict();

export const SpeakersOfSetupListRelationFilterSchema: z.ZodType<Prisma.SpeakersOfSetupListRelationFilter> =
  z
    .object({
      every: z.lazy(() => SpeakersOfSetupWhereInputSchema).optional(),
      some: z.lazy(() => SpeakersOfSetupWhereInputSchema).optional(),
      none: z.lazy(() => SpeakersOfSetupWhereInputSchema).optional(),
    })
    .strict();

export const WebcamRelationFilterSchema: z.ZodType<Prisma.WebcamRelationFilter> =
  z
    .object({
      is: z.lazy(() => WebcamWhereInputSchema).optional(),
      isNot: z.lazy(() => WebcamWhereInputSchema).optional(),
    })
    .strict();

export const CaseFanOfSetupListRelationFilterSchema: z.ZodType<Prisma.CaseFanOfSetupListRelationFilter> =
  z
    .object({
      every: z.lazy(() => CaseFanOfSetupWhereInputSchema).optional(),
      some: z.lazy(() => CaseFanOfSetupWhereInputSchema).optional(),
      none: z.lazy(() => CaseFanOfSetupWhereInputSchema).optional(),
    })
    .strict();

export const MonitorsOfSetupOrderByRelationAggregateInputSchema: z.ZodType<Prisma.MonitorsOfSetupOrderByRelationAggregateInput> =
  z
    .object({
      _count: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const SpeakersOfSetupOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SpeakersOfSetupOrderByRelationAggregateInput> =
  z
    .object({
      _count: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const CaseFanOfSetupOrderByRelationAggregateInputSchema: z.ZodType<Prisma.CaseFanOfSetupOrderByRelationAggregateInput> =
  z
    .object({
      _count: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const SetupCountOrderByAggregateInputSchema: z.ZodType<Prisma.SetupCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      cpu_id: z.lazy(() => SortOrderSchema).optional(),
      gpu_id: z.lazy(() => SortOrderSchema).optional(),
      hdd_id: z.lazy(() => SortOrderSchema).optional(),
      case_id: z.lazy(() => SortOrderSchema).optional(),
      psu_id: z.lazy(() => SortOrderSchema).optional(),
      ram_id: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      sound_card_id: z.lazy(() => SortOrderSchema).optional(),
      cpu_cooler_id: z.lazy(() => SortOrderSchema).optional(),
      motherboard_id: z.lazy(() => SortOrderSchema).optional(),
      headphones_id: z.lazy(() => SortOrderSchema).optional(),
      keyboard_id: z.lazy(() => SortOrderSchema).optional(),
      mouse_id: z.lazy(() => SortOrderSchema).optional(),
      webcam_id: z.lazy(() => SortOrderSchema).optional(),
      user_id: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const SetupMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SetupMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      cpu_id: z.lazy(() => SortOrderSchema).optional(),
      gpu_id: z.lazy(() => SortOrderSchema).optional(),
      hdd_id: z.lazy(() => SortOrderSchema).optional(),
      case_id: z.lazy(() => SortOrderSchema).optional(),
      psu_id: z.lazy(() => SortOrderSchema).optional(),
      ram_id: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      sound_card_id: z.lazy(() => SortOrderSchema).optional(),
      cpu_cooler_id: z.lazy(() => SortOrderSchema).optional(),
      motherboard_id: z.lazy(() => SortOrderSchema).optional(),
      headphones_id: z.lazy(() => SortOrderSchema).optional(),
      keyboard_id: z.lazy(() => SortOrderSchema).optional(),
      mouse_id: z.lazy(() => SortOrderSchema).optional(),
      webcam_id: z.lazy(() => SortOrderSchema).optional(),
      user_id: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const SetupMinOrderByAggregateInputSchema: z.ZodType<Prisma.SetupMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      cpu_id: z.lazy(() => SortOrderSchema).optional(),
      gpu_id: z.lazy(() => SortOrderSchema).optional(),
      hdd_id: z.lazy(() => SortOrderSchema).optional(),
      case_id: z.lazy(() => SortOrderSchema).optional(),
      psu_id: z.lazy(() => SortOrderSchema).optional(),
      ram_id: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      sound_card_id: z.lazy(() => SortOrderSchema).optional(),
      cpu_cooler_id: z.lazy(() => SortOrderSchema).optional(),
      motherboard_id: z.lazy(() => SortOrderSchema).optional(),
      headphones_id: z.lazy(() => SortOrderSchema).optional(),
      keyboard_id: z.lazy(() => SortOrderSchema).optional(),
      mouse_id: z.lazy(() => SortOrderSchema).optional(),
      webcam_id: z.lazy(() => SortOrderSchema).optional(),
      user_id: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const SSDRelationFilterSchema: z.ZodType<Prisma.SSDRelationFilter> = z
  .object({
    is: z.lazy(() => SSDWhereInputSchema).optional(),
    isNot: z.lazy(() => SSDWhereInputSchema).optional(),
  })
  .strict();

export const SetupRelationFilterSchema: z.ZodType<Prisma.SetupRelationFilter> =
  z
    .object({
      is: z.lazy(() => SetupWhereInputSchema).optional(),
      isNot: z.lazy(() => SetupWhereInputSchema).optional(),
    })
    .strict();

export const SSDOfSetupSsd_idSetup_idCompoundUniqueInputSchema: z.ZodType<Prisma.SSDOfSetupSsd_idSetup_idCompoundUniqueInput> =
  z
    .object({
      ssd_id: z.string(),
      setup_id: z.string(),
    })
    .strict();

export const SSDOfSetupCountOrderByAggregateInputSchema: z.ZodType<Prisma.SSDOfSetupCountOrderByAggregateInput> =
  z
    .object({
      ssd_id: z.lazy(() => SortOrderSchema).optional(),
      setup_id: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const SSDOfSetupMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SSDOfSetupMaxOrderByAggregateInput> =
  z
    .object({
      ssd_id: z.lazy(() => SortOrderSchema).optional(),
      setup_id: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const SSDOfSetupMinOrderByAggregateInputSchema: z.ZodType<Prisma.SSDOfSetupMinOrderByAggregateInput> =
  z
    .object({
      ssd_id: z.lazy(() => SortOrderSchema).optional(),
      setup_id: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const CaseFanRelationFilterSchema: z.ZodType<Prisma.CaseFanRelationFilter> =
  z
    .object({
      is: z.lazy(() => CaseFanWhereInputSchema).optional(),
      isNot: z.lazy(() => CaseFanWhereInputSchema).optional(),
    })
    .strict();

export const CaseFanOfSetupCase_fan_idSetup_idCompoundUniqueInputSchema: z.ZodType<Prisma.CaseFanOfSetupCase_fan_idSetup_idCompoundUniqueInput> =
  z
    .object({
      case_fan_id: z.string(),
      setup_id: z.string(),
    })
    .strict();

export const CaseFanOfSetupCountOrderByAggregateInputSchema: z.ZodType<Prisma.CaseFanOfSetupCountOrderByAggregateInput> =
  z
    .object({
      case_fan_id: z.lazy(() => SortOrderSchema).optional(),
      setup_id: z.lazy(() => SortOrderSchema).optional(),
      quantity: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const CaseFanOfSetupAvgOrderByAggregateInputSchema: z.ZodType<Prisma.CaseFanOfSetupAvgOrderByAggregateInput> =
  z
    .object({
      quantity: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const CaseFanOfSetupMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CaseFanOfSetupMaxOrderByAggregateInput> =
  z
    .object({
      case_fan_id: z.lazy(() => SortOrderSchema).optional(),
      setup_id: z.lazy(() => SortOrderSchema).optional(),
      quantity: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const CaseFanOfSetupMinOrderByAggregateInputSchema: z.ZodType<Prisma.CaseFanOfSetupMinOrderByAggregateInput> =
  z
    .object({
      case_fan_id: z.lazy(() => SortOrderSchema).optional(),
      setup_id: z.lazy(() => SortOrderSchema).optional(),
      quantity: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const CaseFanOfSetupSumOrderByAggregateInputSchema: z.ZodType<Prisma.CaseFanOfSetupSumOrderByAggregateInput> =
  z
    .object({
      quantity: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const SpeakersRelationFilterSchema: z.ZodType<Prisma.SpeakersRelationFilter> =
  z
    .object({
      is: z.lazy(() => SpeakersWhereInputSchema).optional(),
      isNot: z.lazy(() => SpeakersWhereInputSchema).optional(),
    })
    .strict();

export const SpeakersOfSetupSpeakers_idSetup_idCompoundUniqueInputSchema: z.ZodType<Prisma.SpeakersOfSetupSpeakers_idSetup_idCompoundUniqueInput> =
  z
    .object({
      speakers_id: z.string(),
      setup_id: z.string(),
    })
    .strict();

export const SpeakersOfSetupCountOrderByAggregateInputSchema: z.ZodType<Prisma.SpeakersOfSetupCountOrderByAggregateInput> =
  z
    .object({
      speakers_id: z.lazy(() => SortOrderSchema).optional(),
      setup_id: z.lazy(() => SortOrderSchema).optional(),
      quantity: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const SpeakersOfSetupAvgOrderByAggregateInputSchema: z.ZodType<Prisma.SpeakersOfSetupAvgOrderByAggregateInput> =
  z
    .object({
      quantity: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const SpeakersOfSetupMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SpeakersOfSetupMaxOrderByAggregateInput> =
  z
    .object({
      speakers_id: z.lazy(() => SortOrderSchema).optional(),
      setup_id: z.lazy(() => SortOrderSchema).optional(),
      quantity: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const SpeakersOfSetupMinOrderByAggregateInputSchema: z.ZodType<Prisma.SpeakersOfSetupMinOrderByAggregateInput> =
  z
    .object({
      speakers_id: z.lazy(() => SortOrderSchema).optional(),
      setup_id: z.lazy(() => SortOrderSchema).optional(),
      quantity: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const SpeakersOfSetupSumOrderByAggregateInputSchema: z.ZodType<Prisma.SpeakersOfSetupSumOrderByAggregateInput> =
  z
    .object({
      quantity: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const MonitorRelationFilterSchema: z.ZodType<Prisma.MonitorRelationFilter> =
  z
    .object({
      is: z.lazy(() => MonitorWhereInputSchema).optional(),
      isNot: z.lazy(() => MonitorWhereInputSchema).optional(),
    })
    .strict();

export const MonitorsOfSetupMonitor_idSetup_idCompoundUniqueInputSchema: z.ZodType<Prisma.MonitorsOfSetupMonitor_idSetup_idCompoundUniqueInput> =
  z
    .object({
      monitor_id: z.string(),
      setup_id: z.string(),
    })
    .strict();

export const MonitorsOfSetupCountOrderByAggregateInputSchema: z.ZodType<Prisma.MonitorsOfSetupCountOrderByAggregateInput> =
  z
    .object({
      monitor_id: z.lazy(() => SortOrderSchema).optional(),
      setup_id: z.lazy(() => SortOrderSchema).optional(),
      quantity: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const MonitorsOfSetupAvgOrderByAggregateInputSchema: z.ZodType<Prisma.MonitorsOfSetupAvgOrderByAggregateInput> =
  z
    .object({
      quantity: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const MonitorsOfSetupMaxOrderByAggregateInputSchema: z.ZodType<Prisma.MonitorsOfSetupMaxOrderByAggregateInput> =
  z
    .object({
      monitor_id: z.lazy(() => SortOrderSchema).optional(),
      setup_id: z.lazy(() => SortOrderSchema).optional(),
      quantity: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const MonitorsOfSetupMinOrderByAggregateInputSchema: z.ZodType<Prisma.MonitorsOfSetupMinOrderByAggregateInput> =
  z
    .object({
      monitor_id: z.lazy(() => SortOrderSchema).optional(),
      setup_id: z.lazy(() => SortOrderSchema).optional(),
      quantity: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const MonitorsOfSetupSumOrderByAggregateInputSchema: z.ZodType<Prisma.MonitorsOfSetupSumOrderByAggregateInput> =
  z
    .object({
      quantity: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const EnumMonitorPanelTypeFilterSchema: z.ZodType<Prisma.EnumMonitorPanelTypeFilter> =
  z
    .object({
      equals: z.lazy(() => MonitorPanelTypeSchema).optional(),
      in: z
        .lazy(() => MonitorPanelTypeSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => MonitorPanelTypeSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => MonitorPanelTypeSchema),
          z.lazy(() => NestedEnumMonitorPanelTypeFilterSchema),
        ])
        .optional(),
    })
    .strict();

export const MonitorCountOrderByAggregateInputSchema: z.ZodType<Prisma.MonitorCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      screen_size: z.lazy(() => SortOrderSchema).optional(),
      resolution: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      refresh_rate: z.lazy(() => SortOrderSchema).optional(),
      response_time: z.lazy(() => SortOrderSchema).optional(),
      panel_type: z.lazy(() => SortOrderSchema).optional(),
      aspect_ratio: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const MonitorAvgOrderByAggregateInputSchema: z.ZodType<Prisma.MonitorAvgOrderByAggregateInput> =
  z
    .object({
      screen_size: z.lazy(() => SortOrderSchema).optional(),
      resolution: z.lazy(() => SortOrderSchema).optional(),
      refresh_rate: z.lazy(() => SortOrderSchema).optional(),
      response_time: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const MonitorMaxOrderByAggregateInputSchema: z.ZodType<Prisma.MonitorMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      screen_size: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      refresh_rate: z.lazy(() => SortOrderSchema).optional(),
      response_time: z.lazy(() => SortOrderSchema).optional(),
      panel_type: z.lazy(() => SortOrderSchema).optional(),
      aspect_ratio: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const MonitorMinOrderByAggregateInputSchema: z.ZodType<Prisma.MonitorMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      screen_size: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      refresh_rate: z.lazy(() => SortOrderSchema).optional(),
      response_time: z.lazy(() => SortOrderSchema).optional(),
      panel_type: z.lazy(() => SortOrderSchema).optional(),
      aspect_ratio: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const MonitorSumOrderByAggregateInputSchema: z.ZodType<Prisma.MonitorSumOrderByAggregateInput> =
  z
    .object({
      screen_size: z.lazy(() => SortOrderSchema).optional(),
      resolution: z.lazy(() => SortOrderSchema).optional(),
      refresh_rate: z.lazy(() => SortOrderSchema).optional(),
      response_time: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const EnumMonitorPanelTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumMonitorPanelTypeWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => MonitorPanelTypeSchema).optional(),
      in: z
        .lazy(() => MonitorPanelTypeSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => MonitorPanelTypeSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => MonitorPanelTypeSchema),
          z.lazy(() => NestedEnumMonitorPanelTypeWithAggregatesFilterSchema),
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumMonitorPanelTypeFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumMonitorPanelTypeFilterSchema).optional(),
    })
    .strict();

export const SoundCardCountOrderByAggregateInputSchema: z.ZodType<Prisma.SoundCardCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      channels: z.lazy(() => SortOrderSchema).optional(),
      digital_audio: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      snr: z.lazy(() => SortOrderSchema).optional(),
      sample_rate: z.lazy(() => SortOrderSchema).optional(),
      chipset: z.lazy(() => SortOrderSchema).optional(),
      interface: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const SoundCardAvgOrderByAggregateInputSchema: z.ZodType<Prisma.SoundCardAvgOrderByAggregateInput> =
  z
    .object({
      snr: z.lazy(() => SortOrderSchema).optional(),
      sample_rate: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const SoundCardMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SoundCardMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      channels: z.lazy(() => SortOrderSchema).optional(),
      digital_audio: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      snr: z.lazy(() => SortOrderSchema).optional(),
      sample_rate: z.lazy(() => SortOrderSchema).optional(),
      chipset: z.lazy(() => SortOrderSchema).optional(),
      interface: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const SoundCardMinOrderByAggregateInputSchema: z.ZodType<Prisma.SoundCardMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      channels: z.lazy(() => SortOrderSchema).optional(),
      digital_audio: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      snr: z.lazy(() => SortOrderSchema).optional(),
      sample_rate: z.lazy(() => SortOrderSchema).optional(),
      chipset: z.lazy(() => SortOrderSchema).optional(),
      interface: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const SoundCardSumOrderByAggregateInputSchema: z.ZodType<Prisma.SoundCardSumOrderByAggregateInput> =
  z
    .object({
      snr: z.lazy(() => SortOrderSchema).optional(),
      sample_rate: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const EnumHeadphoneTypesFilterSchema: z.ZodType<Prisma.EnumHeadphoneTypesFilter> =
  z
    .object({
      equals: z.lazy(() => HeadphoneTypesSchema).optional(),
      in: z
        .lazy(() => HeadphoneTypesSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => HeadphoneTypesSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => HeadphoneTypesSchema),
          z.lazy(() => NestedEnumHeadphoneTypesFilterSchema),
        ])
        .optional(),
    })
    .strict();

export const EnumEnclosureTypeFilterSchema: z.ZodType<Prisma.EnumEnclosureTypeFilter> =
  z
    .object({
      equals: z.lazy(() => EnclosureTypeSchema).optional(),
      in: z
        .lazy(() => EnclosureTypeSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => EnclosureTypeSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => EnclosureTypeSchema),
          z.lazy(() => NestedEnumEnclosureTypeFilterSchema),
        ])
        .optional(),
    })
    .strict();

export const HeadphonesCountOrderByAggregateInputSchema: z.ZodType<Prisma.HeadphonesCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      type: z.lazy(() => SortOrderSchema).optional(),
      frequency_response: z.lazy(() => SortOrderSchema).optional(),
      microphone: z.lazy(() => SortOrderSchema).optional(),
      wireless: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      noise_cancellation: z.lazy(() => SortOrderSchema).optional(),
      enclosure_type: z.lazy(() => SortOrderSchema).optional(),
      color: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const HeadphonesAvgOrderByAggregateInputSchema: z.ZodType<Prisma.HeadphonesAvgOrderByAggregateInput> =
  z
    .object({
      frequency_response: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const HeadphonesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.HeadphonesMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      type: z.lazy(() => SortOrderSchema).optional(),
      microphone: z.lazy(() => SortOrderSchema).optional(),
      wireless: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      noise_cancellation: z.lazy(() => SortOrderSchema).optional(),
      enclosure_type: z.lazy(() => SortOrderSchema).optional(),
      color: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const HeadphonesMinOrderByAggregateInputSchema: z.ZodType<Prisma.HeadphonesMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      type: z.lazy(() => SortOrderSchema).optional(),
      microphone: z.lazy(() => SortOrderSchema).optional(),
      wireless: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      noise_cancellation: z.lazy(() => SortOrderSchema).optional(),
      enclosure_type: z.lazy(() => SortOrderSchema).optional(),
      color: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const HeadphonesSumOrderByAggregateInputSchema: z.ZodType<Prisma.HeadphonesSumOrderByAggregateInput> =
  z
    .object({
      frequency_response: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const EnumHeadphoneTypesWithAggregatesFilterSchema: z.ZodType<Prisma.EnumHeadphoneTypesWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => HeadphoneTypesSchema).optional(),
      in: z
        .lazy(() => HeadphoneTypesSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => HeadphoneTypesSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => HeadphoneTypesSchema),
          z.lazy(() => NestedEnumHeadphoneTypesWithAggregatesFilterSchema),
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumHeadphoneTypesFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumHeadphoneTypesFilterSchema).optional(),
    })
    .strict();

export const EnumEnclosureTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumEnclosureTypeWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => EnclosureTypeSchema).optional(),
      in: z
        .lazy(() => EnclosureTypeSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => EnclosureTypeSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => EnclosureTypeSchema),
          z.lazy(() => NestedEnumEnclosureTypeWithAggregatesFilterSchema),
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumEnclosureTypeFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumEnclosureTypeFilterSchema).optional(),
    })
    .strict();

export const EnumKeyboardStyleFilterSchema: z.ZodType<Prisma.EnumKeyboardStyleFilter> =
  z
    .object({
      equals: z.lazy(() => KeyboardStyleSchema).optional(),
      in: z
        .lazy(() => KeyboardStyleSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => KeyboardStyleSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => KeyboardStyleSchema),
          z.lazy(() => NestedEnumKeyboardStyleFilterSchema),
        ])
        .optional(),
    })
    .strict();

export const EnumConnectionTypeFilterSchema: z.ZodType<Prisma.EnumConnectionTypeFilter> =
  z
    .object({
      equals: z.lazy(() => ConnectionTypeSchema).optional(),
      in: z
        .lazy(() => ConnectionTypeSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => ConnectionTypeSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => ConnectionTypeSchema),
          z.lazy(() => NestedEnumConnectionTypeFilterSchema),
        ])
        .optional(),
    })
    .strict();

export const KeyboardCountOrderByAggregateInputSchema: z.ZodType<Prisma.KeyboardCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      style: z.lazy(() => SortOrderSchema).optional(),
      switches: z.lazy(() => SortOrderSchema).optional(),
      backlit: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      tenkeyless: z.lazy(() => SortOrderSchema).optional(),
      connection_type: z.lazy(() => SortOrderSchema).optional(),
      color: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const KeyboardMaxOrderByAggregateInputSchema: z.ZodType<Prisma.KeyboardMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      style: z.lazy(() => SortOrderSchema).optional(),
      switches: z.lazy(() => SortOrderSchema).optional(),
      backlit: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      tenkeyless: z.lazy(() => SortOrderSchema).optional(),
      connection_type: z.lazy(() => SortOrderSchema).optional(),
      color: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const KeyboardMinOrderByAggregateInputSchema: z.ZodType<Prisma.KeyboardMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      style: z.lazy(() => SortOrderSchema).optional(),
      switches: z.lazy(() => SortOrderSchema).optional(),
      backlit: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      tenkeyless: z.lazy(() => SortOrderSchema).optional(),
      connection_type: z.lazy(() => SortOrderSchema).optional(),
      color: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const EnumKeyboardStyleWithAggregatesFilterSchema: z.ZodType<Prisma.EnumKeyboardStyleWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => KeyboardStyleSchema).optional(),
      in: z
        .lazy(() => KeyboardStyleSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => KeyboardStyleSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => KeyboardStyleSchema),
          z.lazy(() => NestedEnumKeyboardStyleWithAggregatesFilterSchema),
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumKeyboardStyleFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumKeyboardStyleFilterSchema).optional(),
    })
    .strict();

export const EnumConnectionTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumConnectionTypeWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => ConnectionTypeSchema).optional(),
      in: z
        .lazy(() => ConnectionTypeSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => ConnectionTypeSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => ConnectionTypeSchema),
          z.lazy(() => NestedEnumConnectionTypeWithAggregatesFilterSchema),
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumConnectionTypeFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumConnectionTypeFilterSchema).optional(),
    })
    .strict();

export const EnumMouseTrackMethodFilterSchema: z.ZodType<Prisma.EnumMouseTrackMethodFilter> =
  z
    .object({
      equals: z.lazy(() => MouseTrackMethodSchema).optional(),
      in: z
        .lazy(() => MouseTrackMethodSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => MouseTrackMethodSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => MouseTrackMethodSchema),
          z.lazy(() => NestedEnumMouseTrackMethodFilterSchema),
        ])
        .optional(),
    })
    .strict();

export const EnumMouseOrientationFilterSchema: z.ZodType<Prisma.EnumMouseOrientationFilter> =
  z
    .object({
      equals: z.lazy(() => MouseOrientationSchema).optional(),
      in: z
        .lazy(() => MouseOrientationSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => MouseOrientationSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => MouseOrientationSchema),
          z.lazy(() => NestedEnumMouseOrientationFilterSchema),
        ])
        .optional(),
    })
    .strict();

export const MouseCountOrderByAggregateInputSchema: z.ZodType<Prisma.MouseCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tracking_method: z.lazy(() => SortOrderSchema).optional(),
      connection_type: z.lazy(() => SortOrderSchema).optional(),
      max_dpi: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      hand_orientation: z.lazy(() => SortOrderSchema).optional(),
      color: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const MouseAvgOrderByAggregateInputSchema: z.ZodType<Prisma.MouseAvgOrderByAggregateInput> =
  z
    .object({
      max_dpi: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const MouseMaxOrderByAggregateInputSchema: z.ZodType<Prisma.MouseMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tracking_method: z.lazy(() => SortOrderSchema).optional(),
      connection_type: z.lazy(() => SortOrderSchema).optional(),
      max_dpi: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      hand_orientation: z.lazy(() => SortOrderSchema).optional(),
      color: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const MouseMinOrderByAggregateInputSchema: z.ZodType<Prisma.MouseMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      tracking_method: z.lazy(() => SortOrderSchema).optional(),
      connection_type: z.lazy(() => SortOrderSchema).optional(),
      max_dpi: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      hand_orientation: z.lazy(() => SortOrderSchema).optional(),
      color: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const MouseSumOrderByAggregateInputSchema: z.ZodType<Prisma.MouseSumOrderByAggregateInput> =
  z
    .object({
      max_dpi: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const EnumMouseTrackMethodWithAggregatesFilterSchema: z.ZodType<Prisma.EnumMouseTrackMethodWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => MouseTrackMethodSchema).optional(),
      in: z
        .lazy(() => MouseTrackMethodSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => MouseTrackMethodSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => MouseTrackMethodSchema),
          z.lazy(() => NestedEnumMouseTrackMethodWithAggregatesFilterSchema),
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumMouseTrackMethodFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumMouseTrackMethodFilterSchema).optional(),
    })
    .strict();

export const EnumMouseOrientationWithAggregatesFilterSchema: z.ZodType<Prisma.EnumMouseOrientationWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => MouseOrientationSchema).optional(),
      in: z
        .lazy(() => MouseOrientationSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => MouseOrientationSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => MouseOrientationSchema),
          z.lazy(() => NestedEnumMouseOrientationWithAggregatesFilterSchema),
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumMouseOrientationFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumMouseOrientationFilterSchema).optional(),
    })
    .strict();

export const SpeakersCountOrderByAggregateInputSchema: z.ZodType<Prisma.SpeakersCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      configuration: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      wattage: z.lazy(() => SortOrderSchema).optional(),
      frequency_response: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      color: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const SpeakersAvgOrderByAggregateInputSchema: z.ZodType<Prisma.SpeakersAvgOrderByAggregateInput> =
  z
    .object({
      wattage: z.lazy(() => SortOrderSchema).optional(),
      frequency_response: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const SpeakersMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SpeakersMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      configuration: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      wattage: z.lazy(() => SortOrderSchema).optional(),
      frequency_response: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      color: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const SpeakersMinOrderByAggregateInputSchema: z.ZodType<Prisma.SpeakersMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      configuration: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      wattage: z.lazy(() => SortOrderSchema).optional(),
      frequency_response: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      color: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const SpeakersSumOrderByAggregateInputSchema: z.ZodType<Prisma.SpeakersSumOrderByAggregateInput> =
  z
    .object({
      wattage: z.lazy(() => SortOrderSchema).optional(),
      frequency_response: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const EnumFocusTypeFilterSchema: z.ZodType<Prisma.EnumFocusTypeFilter> =
  z
    .object({
      equals: z.lazy(() => FocusTypeSchema).optional(),
      in: z
        .lazy(() => FocusTypeSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => FocusTypeSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => FocusTypeSchema),
          z.lazy(() => NestedEnumFocusTypeFilterSchema),
        ])
        .optional(),
    })
    .strict();

export const WebcamCountOrderByAggregateInputSchema: z.ZodType<Prisma.WebcamCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      resolutions: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      connection: z.lazy(() => SortOrderSchema).optional(),
      focus_type: z.lazy(() => SortOrderSchema).optional(),
      os: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      fov: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const WebcamAvgOrderByAggregateInputSchema: z.ZodType<Prisma.WebcamAvgOrderByAggregateInput> =
  z
    .object({
      fov: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const WebcamMaxOrderByAggregateInputSchema: z.ZodType<Prisma.WebcamMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      connection: z.lazy(() => SortOrderSchema).optional(),
      focus_type: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      fov: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const WebcamMinOrderByAggregateInputSchema: z.ZodType<Prisma.WebcamMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      connection: z.lazy(() => SortOrderSchema).optional(),
      focus_type: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      fov: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const WebcamSumOrderByAggregateInputSchema: z.ZodType<Prisma.WebcamSumOrderByAggregateInput> =
  z
    .object({
      fov: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const EnumFocusTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumFocusTypeWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => FocusTypeSchema).optional(),
      in: z
        .lazy(() => FocusTypeSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => FocusTypeSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => FocusTypeSchema),
          z.lazy(() => NestedEnumFocusTypeWithAggregatesFilterSchema),
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumFocusTypeFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumFocusTypeFilterSchema).optional(),
    })
    .strict();

export const CaseFanCountOrderByAggregateInputSchema: z.ZodType<Prisma.CaseFanCountOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      size: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      color: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
      rpm: z.lazy(() => SortOrderSchema).optional(),
      airflow: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const CaseFanAvgOrderByAggregateInputSchema: z.ZodType<Prisma.CaseFanAvgOrderByAggregateInput> =
  z
    .object({
      size: z.lazy(() => SortOrderSchema).optional(),
      rpm: z.lazy(() => SortOrderSchema).optional(),
      airflow: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const CaseFanMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CaseFanMaxOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      size: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      color: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const CaseFanMinOrderByAggregateInputSchema: z.ZodType<Prisma.CaseFanMinOrderByAggregateInput> =
  z
    .object({
      id: z.lazy(() => SortOrderSchema).optional(),
      size: z.lazy(() => SortOrderSchema).optional(),
      name: z.lazy(() => SortOrderSchema).optional(),
      imageUrl: z.lazy(() => SortOrderSchema).optional(),
      color: z.lazy(() => SortOrderSchema).optional(),
      amazonLink: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const CaseFanSumOrderByAggregateInputSchema: z.ZodType<Prisma.CaseFanSumOrderByAggregateInput> =
  z
    .object({
      size: z.lazy(() => SortOrderSchema).optional(),
      rpm: z.lazy(() => SortOrderSchema).optional(),
      airflow: z.lazy(() => SortOrderSchema).optional(),
    })
    .strict();

export const UserCreateNestedOneWithoutAccountsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutAccountsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => UserCreateWithoutAccountsInputSchema),
          z.lazy(() => UserUncheckedCreateWithoutAccountsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => UserCreateOrConnectWithoutAccountsInputSchema)
        .optional(),
      connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
    })
    .strict();

export const StringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.StringFieldUpdateOperationsInput> =
  z
    .object({
      set: z.string().optional(),
    })
    .strict();

export const NullableStringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableStringFieldUpdateOperationsInput> =
  z
    .object({
      set: z.string().optional().nullable(),
    })
    .strict();

export const NullableIntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableIntFieldUpdateOperationsInput> =
  z
    .object({
      set: z.number().optional().nullable(),
      increment: z.number().optional(),
      decrement: z.number().optional(),
      multiply: z.number().optional(),
      divide: z.number().optional(),
    })
    .strict();

export const UserUpdateOneRequiredWithoutAccountsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutAccountsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => UserCreateWithoutAccountsInputSchema),
          z.lazy(() => UserUncheckedCreateWithoutAccountsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => UserCreateOrConnectWithoutAccountsInputSchema)
        .optional(),
      upsert: z.lazy(() => UserUpsertWithoutAccountsInputSchema).optional(),
      connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => UserUpdateToOneWithWhereWithoutAccountsInputSchema),
          z.lazy(() => UserUpdateWithoutAccountsInputSchema),
          z.lazy(() => UserUncheckedUpdateWithoutAccountsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const UserCreateNestedOneWithoutSessionsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutSessionsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => UserCreateWithoutSessionsInputSchema),
          z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => UserCreateOrConnectWithoutSessionsInputSchema)
        .optional(),
      connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
    })
    .strict();

export const DateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.DateTimeFieldUpdateOperationsInput> =
  z
    .object({
      set: z.coerce.date().optional(),
    })
    .strict();

export const UserUpdateOneRequiredWithoutSessionsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutSessionsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => UserCreateWithoutSessionsInputSchema),
          z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => UserCreateOrConnectWithoutSessionsInputSchema)
        .optional(),
      upsert: z.lazy(() => UserUpsertWithoutSessionsInputSchema).optional(),
      connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => UserUpdateToOneWithWhereWithoutSessionsInputSchema),
          z.lazy(() => UserUpdateWithoutSessionsInputSchema),
          z.lazy(() => UserUncheckedUpdateWithoutSessionsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const SetupCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.SetupCreateNestedManyWithoutUserInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutUserInputSchema),
          z.lazy(() => SetupCreateWithoutUserInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutUserInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutUserInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutUserInputSchema),
          z.lazy(() => SetupCreateOrConnectWithoutUserInputSchema).array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyUserInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const AccountCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.AccountCreateNestedManyWithoutUserInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutUserInputSchema),
          z.lazy(() => AccountCreateWithoutUserInputSchema).array(),
          z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema),
          z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => AccountCreateManyUserInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SessionCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.SessionCreateNestedManyWithoutUserInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SessionCreateWithoutUserInputSchema),
          z.lazy(() => SessionCreateWithoutUserInputSchema).array(),
          z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),
          z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),
          z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SessionCreateManyUserInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => SessionWhereUniqueInputSchema),
          z.lazy(() => SessionWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SetupUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.SetupUncheckedCreateNestedManyWithoutUserInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutUserInputSchema),
          z.lazy(() => SetupCreateWithoutUserInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutUserInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutUserInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutUserInputSchema),
          z.lazy(() => SetupCreateOrConnectWithoutUserInputSchema).array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyUserInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const AccountUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.AccountUncheckedCreateNestedManyWithoutUserInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutUserInputSchema),
          z.lazy(() => AccountCreateWithoutUserInputSchema).array(),
          z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema),
          z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => AccountCreateManyUserInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SessionUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedCreateNestedManyWithoutUserInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SessionCreateWithoutUserInputSchema),
          z.lazy(() => SessionCreateWithoutUserInputSchema).array(),
          z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),
          z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),
          z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SessionCreateManyUserInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => SessionWhereUniqueInputSchema),
          z.lazy(() => SessionWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const NullableDateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableDateTimeFieldUpdateOperationsInput> =
  z
    .object({
      set: z.coerce.date().optional().nullable(),
    })
    .strict();

export const EnumUserRoleFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumUserRoleFieldUpdateOperationsInput> =
  z
    .object({
      set: z.lazy(() => UserRoleSchema).optional(),
    })
    .strict();

export const SetupUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.SetupUpdateManyWithoutUserNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutUserInputSchema),
          z.lazy(() => SetupCreateWithoutUserInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutUserInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutUserInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutUserInputSchema),
          z.lazy(() => SetupCreateOrConnectWithoutUserInputSchema).array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => SetupUpsertWithWhereUniqueWithoutUserInputSchema),
          z
            .lazy(() => SetupUpsertWithWhereUniqueWithoutUserInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyUserInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => SetupUpdateWithWhereUniqueWithoutUserInputSchema),
          z
            .lazy(() => SetupUpdateWithWhereUniqueWithoutUserInputSchema)
            .array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => SetupUpdateManyWithWhereWithoutUserInputSchema),
          z.lazy(() => SetupUpdateManyWithWhereWithoutUserInputSchema).array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => SetupScalarWhereInputSchema),
          z.lazy(() => SetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const AccountUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.AccountUpdateManyWithoutUserNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutUserInputSchema),
          z.lazy(() => AccountCreateWithoutUserInputSchema).array(),
          z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema),
          z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputSchema),
          z
            .lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => AccountCreateManyUserInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputSchema),
          z
            .lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputSchema)
            .array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputSchema),
          z
            .lazy(() => AccountUpdateManyWithWhereWithoutUserInputSchema)
            .array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => AccountScalarWhereInputSchema),
          z.lazy(() => AccountScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SessionUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.SessionUpdateManyWithoutUserNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SessionCreateWithoutUserInputSchema),
          z.lazy(() => SessionCreateWithoutUserInputSchema).array(),
          z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),
          z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),
          z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema),
          z
            .lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SessionCreateManyUserInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => SessionWhereUniqueInputSchema),
          z.lazy(() => SessionWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => SessionWhereUniqueInputSchema),
          z.lazy(() => SessionWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => SessionWhereUniqueInputSchema),
          z.lazy(() => SessionWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => SessionWhereUniqueInputSchema),
          z.lazy(() => SessionWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema),
          z
            .lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema)
            .array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema),
          z
            .lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema)
            .array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => SessionScalarWhereInputSchema),
          z.lazy(() => SessionScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateManyWithoutUserNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutUserInputSchema),
          z.lazy(() => SetupCreateWithoutUserInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutUserInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutUserInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutUserInputSchema),
          z.lazy(() => SetupCreateOrConnectWithoutUserInputSchema).array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => SetupUpsertWithWhereUniqueWithoutUserInputSchema),
          z
            .lazy(() => SetupUpsertWithWhereUniqueWithoutUserInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyUserInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => SetupUpdateWithWhereUniqueWithoutUserInputSchema),
          z
            .lazy(() => SetupUpdateWithWhereUniqueWithoutUserInputSchema)
            .array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => SetupUpdateManyWithWhereWithoutUserInputSchema),
          z.lazy(() => SetupUpdateManyWithWhereWithoutUserInputSchema).array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => SetupScalarWhereInputSchema),
          z.lazy(() => SetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const AccountUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => AccountCreateWithoutUserInputSchema),
          z.lazy(() => AccountCreateWithoutUserInputSchema).array(),
          z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema),
          z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema),
          z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputSchema),
          z
            .lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => AccountCreateManyUserInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => AccountWhereUniqueInputSchema),
          z.lazy(() => AccountWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputSchema),
          z
            .lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputSchema)
            .array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputSchema),
          z
            .lazy(() => AccountUpdateManyWithWhereWithoutUserInputSchema)
            .array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => AccountScalarWhereInputSchema),
          z.lazy(() => AccountScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SessionUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SessionCreateWithoutUserInputSchema),
          z.lazy(() => SessionCreateWithoutUserInputSchema).array(),
          z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),
          z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),
          z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema),
          z
            .lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SessionCreateManyUserInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => SessionWhereUniqueInputSchema),
          z.lazy(() => SessionWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => SessionWhereUniqueInputSchema),
          z.lazy(() => SessionWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => SessionWhereUniqueInputSchema),
          z.lazy(() => SessionWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => SessionWhereUniqueInputSchema),
          z.lazy(() => SessionWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema),
          z
            .lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema)
            .array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema),
          z
            .lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema)
            .array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => SessionScalarWhereInputSchema),
          z.lazy(() => SessionScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SetupCreateNestedManyWithoutCpu_coolerInputSchema: z.ZodType<Prisma.SetupCreateNestedManyWithoutCpu_coolerInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutCpu_coolerInputSchema),
          z.lazy(() => SetupCreateWithoutCpu_coolerInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutCpu_coolerInputSchema),
          z
            .lazy(() => SetupUncheckedCreateWithoutCpu_coolerInputSchema)
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutCpu_coolerInputSchema),
          z
            .lazy(() => SetupCreateOrConnectWithoutCpu_coolerInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyCpu_coolerInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SetupUncheckedCreateNestedManyWithoutCpu_coolerInputSchema: z.ZodType<Prisma.SetupUncheckedCreateNestedManyWithoutCpu_coolerInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutCpu_coolerInputSchema),
          z.lazy(() => SetupCreateWithoutCpu_coolerInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutCpu_coolerInputSchema),
          z
            .lazy(() => SetupUncheckedCreateWithoutCpu_coolerInputSchema)
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutCpu_coolerInputSchema),
          z
            .lazy(() => SetupCreateOrConnectWithoutCpu_coolerInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyCpu_coolerInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SetupUpdateManyWithoutCpu_coolerNestedInputSchema: z.ZodType<Prisma.SetupUpdateManyWithoutCpu_coolerNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutCpu_coolerInputSchema),
          z.lazy(() => SetupCreateWithoutCpu_coolerInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutCpu_coolerInputSchema),
          z
            .lazy(() => SetupUncheckedCreateWithoutCpu_coolerInputSchema)
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutCpu_coolerInputSchema),
          z
            .lazy(() => SetupCreateOrConnectWithoutCpu_coolerInputSchema)
            .array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => SetupUpsertWithWhereUniqueWithoutCpu_coolerInputSchema),
          z
            .lazy(() => SetupUpsertWithWhereUniqueWithoutCpu_coolerInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyCpu_coolerInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => SetupUpdateWithWhereUniqueWithoutCpu_coolerInputSchema),
          z
            .lazy(() => SetupUpdateWithWhereUniqueWithoutCpu_coolerInputSchema)
            .array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => SetupUpdateManyWithWhereWithoutCpu_coolerInputSchema),
          z
            .lazy(() => SetupUpdateManyWithWhereWithoutCpu_coolerInputSchema)
            .array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => SetupScalarWhereInputSchema),
          z.lazy(() => SetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateManyWithoutCpu_coolerNestedInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateManyWithoutCpu_coolerNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutCpu_coolerInputSchema),
          z.lazy(() => SetupCreateWithoutCpu_coolerInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutCpu_coolerInputSchema),
          z
            .lazy(() => SetupUncheckedCreateWithoutCpu_coolerInputSchema)
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutCpu_coolerInputSchema),
          z
            .lazy(() => SetupCreateOrConnectWithoutCpu_coolerInputSchema)
            .array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => SetupUpsertWithWhereUniqueWithoutCpu_coolerInputSchema),
          z
            .lazy(() => SetupUpsertWithWhereUniqueWithoutCpu_coolerInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyCpu_coolerInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => SetupUpdateWithWhereUniqueWithoutCpu_coolerInputSchema),
          z
            .lazy(() => SetupUpdateWithWhereUniqueWithoutCpu_coolerInputSchema)
            .array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => SetupUpdateManyWithWhereWithoutCpu_coolerInputSchema),
          z
            .lazy(() => SetupUpdateManyWithWhereWithoutCpu_coolerInputSchema)
            .array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => SetupScalarWhereInputSchema),
          z.lazy(() => SetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const MotherboardCreatesocketInputSchema: z.ZodType<Prisma.MotherboardCreatesocketInput> =
  z
    .object({
      set: z.string().array(),
    })
    .strict();

export const SetupCreateNestedManyWithoutMotherboardInputSchema: z.ZodType<Prisma.SetupCreateNestedManyWithoutMotherboardInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutMotherboardInputSchema),
          z.lazy(() => SetupCreateWithoutMotherboardInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutMotherboardInputSchema),
          z
            .lazy(() => SetupUncheckedCreateWithoutMotherboardInputSchema)
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutMotherboardInputSchema),
          z
            .lazy(() => SetupCreateOrConnectWithoutMotherboardInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyMotherboardInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SetupUncheckedCreateNestedManyWithoutMotherboardInputSchema: z.ZodType<Prisma.SetupUncheckedCreateNestedManyWithoutMotherboardInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutMotherboardInputSchema),
          z.lazy(() => SetupCreateWithoutMotherboardInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutMotherboardInputSchema),
          z
            .lazy(() => SetupUncheckedCreateWithoutMotherboardInputSchema)
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutMotherboardInputSchema),
          z
            .lazy(() => SetupCreateOrConnectWithoutMotherboardInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyMotherboardInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const MotherboardUpdatesocketInputSchema: z.ZodType<Prisma.MotherboardUpdatesocketInput> =
  z
    .object({
      set: z.string().array().optional(),
      push: z.union([z.string(), z.string().array()]).optional(),
    })
    .strict();

export const IntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.IntFieldUpdateOperationsInput> =
  z
    .object({
      set: z.number().optional(),
      increment: z.number().optional(),
      decrement: z.number().optional(),
      multiply: z.number().optional(),
      divide: z.number().optional(),
    })
    .strict();

export const SetupUpdateManyWithoutMotherboardNestedInputSchema: z.ZodType<Prisma.SetupUpdateManyWithoutMotherboardNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutMotherboardInputSchema),
          z.lazy(() => SetupCreateWithoutMotherboardInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutMotherboardInputSchema),
          z
            .lazy(() => SetupUncheckedCreateWithoutMotherboardInputSchema)
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutMotherboardInputSchema),
          z
            .lazy(() => SetupCreateOrConnectWithoutMotherboardInputSchema)
            .array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => SetupUpsertWithWhereUniqueWithoutMotherboardInputSchema),
          z
            .lazy(() => SetupUpsertWithWhereUniqueWithoutMotherboardInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyMotherboardInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => SetupUpdateWithWhereUniqueWithoutMotherboardInputSchema),
          z
            .lazy(() => SetupUpdateWithWhereUniqueWithoutMotherboardInputSchema)
            .array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => SetupUpdateManyWithWhereWithoutMotherboardInputSchema),
          z
            .lazy(() => SetupUpdateManyWithWhereWithoutMotherboardInputSchema)
            .array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => SetupScalarWhereInputSchema),
          z.lazy(() => SetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateManyWithoutMotherboardNestedInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateManyWithoutMotherboardNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutMotherboardInputSchema),
          z.lazy(() => SetupCreateWithoutMotherboardInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutMotherboardInputSchema),
          z
            .lazy(() => SetupUncheckedCreateWithoutMotherboardInputSchema)
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutMotherboardInputSchema),
          z
            .lazy(() => SetupCreateOrConnectWithoutMotherboardInputSchema)
            .array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => SetupUpsertWithWhereUniqueWithoutMotherboardInputSchema),
          z
            .lazy(() => SetupUpsertWithWhereUniqueWithoutMotherboardInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyMotherboardInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => SetupUpdateWithWhereUniqueWithoutMotherboardInputSchema),
          z
            .lazy(() => SetupUpdateWithWhereUniqueWithoutMotherboardInputSchema)
            .array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => SetupUpdateManyWithWhereWithoutMotherboardInputSchema),
          z
            .lazy(() => SetupUpdateManyWithWhereWithoutMotherboardInputSchema)
            .array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => SetupScalarWhereInputSchema),
          z.lazy(() => SetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const RAMCreatespeedInputSchema: z.ZodType<Prisma.RAMCreatespeedInput> =
  z
    .object({
      set: z.number().array(),
    })
    .strict();

export const RAMCreatemodulesInputSchema: z.ZodType<Prisma.RAMCreatemodulesInput> =
  z
    .object({
      set: z.number().array(),
    })
    .strict();

export const SetupCreateNestedManyWithoutRamInputSchema: z.ZodType<Prisma.SetupCreateNestedManyWithoutRamInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutRamInputSchema),
          z.lazy(() => SetupCreateWithoutRamInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutRamInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutRamInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutRamInputSchema),
          z.lazy(() => SetupCreateOrConnectWithoutRamInputSchema).array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyRamInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SetupUncheckedCreateNestedManyWithoutRamInputSchema: z.ZodType<Prisma.SetupUncheckedCreateNestedManyWithoutRamInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutRamInputSchema),
          z.lazy(() => SetupCreateWithoutRamInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutRamInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutRamInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutRamInputSchema),
          z.lazy(() => SetupCreateOrConnectWithoutRamInputSchema).array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyRamInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const RAMUpdatespeedInputSchema: z.ZodType<Prisma.RAMUpdatespeedInput> =
  z
    .object({
      set: z.number().array().optional(),
      push: z.union([z.number(), z.number().array()]).optional(),
    })
    .strict();

export const RAMUpdatemodulesInputSchema: z.ZodType<Prisma.RAMUpdatemodulesInput> =
  z
    .object({
      set: z.number().array().optional(),
      push: z.union([z.number(), z.number().array()]).optional(),
    })
    .strict();

export const SetupUpdateManyWithoutRamNestedInputSchema: z.ZodType<Prisma.SetupUpdateManyWithoutRamNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutRamInputSchema),
          z.lazy(() => SetupCreateWithoutRamInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutRamInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutRamInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutRamInputSchema),
          z.lazy(() => SetupCreateOrConnectWithoutRamInputSchema).array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => SetupUpsertWithWhereUniqueWithoutRamInputSchema),
          z.lazy(() => SetupUpsertWithWhereUniqueWithoutRamInputSchema).array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyRamInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => SetupUpdateWithWhereUniqueWithoutRamInputSchema),
          z.lazy(() => SetupUpdateWithWhereUniqueWithoutRamInputSchema).array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => SetupUpdateManyWithWhereWithoutRamInputSchema),
          z.lazy(() => SetupUpdateManyWithWhereWithoutRamInputSchema).array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => SetupScalarWhereInputSchema),
          z.lazy(() => SetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateManyWithoutRamNestedInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateManyWithoutRamNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutRamInputSchema),
          z.lazy(() => SetupCreateWithoutRamInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutRamInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutRamInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutRamInputSchema),
          z.lazy(() => SetupCreateOrConnectWithoutRamInputSchema).array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => SetupUpsertWithWhereUniqueWithoutRamInputSchema),
          z.lazy(() => SetupUpsertWithWhereUniqueWithoutRamInputSchema).array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyRamInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => SetupUpdateWithWhereUniqueWithoutRamInputSchema),
          z.lazy(() => SetupUpdateWithWhereUniqueWithoutRamInputSchema).array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => SetupUpdateManyWithWhereWithoutRamInputSchema),
          z.lazy(() => SetupUpdateManyWithWhereWithoutRamInputSchema).array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => SetupScalarWhereInputSchema),
          z.lazy(() => SetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SetupCreateNestedManyWithoutCpuInputSchema: z.ZodType<Prisma.SetupCreateNestedManyWithoutCpuInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutCpuInputSchema),
          z.lazy(() => SetupCreateWithoutCpuInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutCpuInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutCpuInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutCpuInputSchema),
          z.lazy(() => SetupCreateOrConnectWithoutCpuInputSchema).array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyCpuInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SetupUncheckedCreateNestedManyWithoutCpuInputSchema: z.ZodType<Prisma.SetupUncheckedCreateNestedManyWithoutCpuInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutCpuInputSchema),
          z.lazy(() => SetupCreateWithoutCpuInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutCpuInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutCpuInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutCpuInputSchema),
          z.lazy(() => SetupCreateOrConnectWithoutCpuInputSchema).array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyCpuInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const FloatFieldUpdateOperationsInputSchema: z.ZodType<Prisma.FloatFieldUpdateOperationsInput> =
  z
    .object({
      set: z.number().optional(),
      increment: z.number().optional(),
      decrement: z.number().optional(),
      multiply: z.number().optional(),
      divide: z.number().optional(),
    })
    .strict();

export const NullableBoolFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableBoolFieldUpdateOperationsInput> =
  z
    .object({
      set: z.boolean().optional().nullable(),
    })
    .strict();

export const SetupUpdateManyWithoutCpuNestedInputSchema: z.ZodType<Prisma.SetupUpdateManyWithoutCpuNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutCpuInputSchema),
          z.lazy(() => SetupCreateWithoutCpuInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutCpuInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutCpuInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutCpuInputSchema),
          z.lazy(() => SetupCreateOrConnectWithoutCpuInputSchema).array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => SetupUpsertWithWhereUniqueWithoutCpuInputSchema),
          z.lazy(() => SetupUpsertWithWhereUniqueWithoutCpuInputSchema).array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyCpuInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => SetupUpdateWithWhereUniqueWithoutCpuInputSchema),
          z.lazy(() => SetupUpdateWithWhereUniqueWithoutCpuInputSchema).array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => SetupUpdateManyWithWhereWithoutCpuInputSchema),
          z.lazy(() => SetupUpdateManyWithWhereWithoutCpuInputSchema).array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => SetupScalarWhereInputSchema),
          z.lazy(() => SetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateManyWithoutCpuNestedInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateManyWithoutCpuNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutCpuInputSchema),
          z.lazy(() => SetupCreateWithoutCpuInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutCpuInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutCpuInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutCpuInputSchema),
          z.lazy(() => SetupCreateOrConnectWithoutCpuInputSchema).array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => SetupUpsertWithWhereUniqueWithoutCpuInputSchema),
          z.lazy(() => SetupUpsertWithWhereUniqueWithoutCpuInputSchema).array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyCpuInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => SetupUpdateWithWhereUniqueWithoutCpuInputSchema),
          z.lazy(() => SetupUpdateWithWhereUniqueWithoutCpuInputSchema).array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => SetupUpdateManyWithWhereWithoutCpuInputSchema),
          z.lazy(() => SetupUpdateManyWithWhereWithoutCpuInputSchema).array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => SetupScalarWhereInputSchema),
          z.lazy(() => SetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SetupCreateNestedManyWithoutHddInputSchema: z.ZodType<Prisma.SetupCreateNestedManyWithoutHddInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutHddInputSchema),
          z.lazy(() => SetupCreateWithoutHddInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutHddInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutHddInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutHddInputSchema),
          z.lazy(() => SetupCreateOrConnectWithoutHddInputSchema).array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyHddInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SetupUncheckedCreateNestedManyWithoutHddInputSchema: z.ZodType<Prisma.SetupUncheckedCreateNestedManyWithoutHddInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutHddInputSchema),
          z.lazy(() => SetupCreateWithoutHddInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutHddInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutHddInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutHddInputSchema),
          z.lazy(() => SetupCreateOrConnectWithoutHddInputSchema).array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyHddInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SetupUpdateManyWithoutHddNestedInputSchema: z.ZodType<Prisma.SetupUpdateManyWithoutHddNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutHddInputSchema),
          z.lazy(() => SetupCreateWithoutHddInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutHddInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutHddInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutHddInputSchema),
          z.lazy(() => SetupCreateOrConnectWithoutHddInputSchema).array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => SetupUpsertWithWhereUniqueWithoutHddInputSchema),
          z.lazy(() => SetupUpsertWithWhereUniqueWithoutHddInputSchema).array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyHddInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => SetupUpdateWithWhereUniqueWithoutHddInputSchema),
          z.lazy(() => SetupUpdateWithWhereUniqueWithoutHddInputSchema).array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => SetupUpdateManyWithWhereWithoutHddInputSchema),
          z.lazy(() => SetupUpdateManyWithWhereWithoutHddInputSchema).array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => SetupScalarWhereInputSchema),
          z.lazy(() => SetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateManyWithoutHddNestedInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateManyWithoutHddNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutHddInputSchema),
          z.lazy(() => SetupCreateWithoutHddInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutHddInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutHddInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutHddInputSchema),
          z.lazy(() => SetupCreateOrConnectWithoutHddInputSchema).array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => SetupUpsertWithWhereUniqueWithoutHddInputSchema),
          z.lazy(() => SetupUpsertWithWhereUniqueWithoutHddInputSchema).array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyHddInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => SetupUpdateWithWhereUniqueWithoutHddInputSchema),
          z.lazy(() => SetupUpdateWithWhereUniqueWithoutHddInputSchema).array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => SetupUpdateManyWithWhereWithoutHddInputSchema),
          z.lazy(() => SetupUpdateManyWithWhereWithoutHddInputSchema).array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => SetupScalarWhereInputSchema),
          z.lazy(() => SetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SSDOfSetupCreateNestedManyWithoutSsdInputSchema: z.ZodType<Prisma.SSDOfSetupCreateNestedManyWithoutSsdInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SSDOfSetupCreateWithoutSsdInputSchema),
          z.lazy(() => SSDOfSetupCreateWithoutSsdInputSchema).array(),
          z.lazy(() => SSDOfSetupUncheckedCreateWithoutSsdInputSchema),
          z.lazy(() => SSDOfSetupUncheckedCreateWithoutSsdInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SSDOfSetupCreateOrConnectWithoutSsdInputSchema),
          z.lazy(() => SSDOfSetupCreateOrConnectWithoutSsdInputSchema).array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SSDOfSetupCreateManySsdInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => SSDOfSetupWhereUniqueInputSchema),
          z.lazy(() => SSDOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SSDOfSetupUncheckedCreateNestedManyWithoutSsdInputSchema: z.ZodType<Prisma.SSDOfSetupUncheckedCreateNestedManyWithoutSsdInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SSDOfSetupCreateWithoutSsdInputSchema),
          z.lazy(() => SSDOfSetupCreateWithoutSsdInputSchema).array(),
          z.lazy(() => SSDOfSetupUncheckedCreateWithoutSsdInputSchema),
          z.lazy(() => SSDOfSetupUncheckedCreateWithoutSsdInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SSDOfSetupCreateOrConnectWithoutSsdInputSchema),
          z.lazy(() => SSDOfSetupCreateOrConnectWithoutSsdInputSchema).array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SSDOfSetupCreateManySsdInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => SSDOfSetupWhereUniqueInputSchema),
          z.lazy(() => SSDOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SSDOfSetupUpdateManyWithoutSsdNestedInputSchema: z.ZodType<Prisma.SSDOfSetupUpdateManyWithoutSsdNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SSDOfSetupCreateWithoutSsdInputSchema),
          z.lazy(() => SSDOfSetupCreateWithoutSsdInputSchema).array(),
          z.lazy(() => SSDOfSetupUncheckedCreateWithoutSsdInputSchema),
          z.lazy(() => SSDOfSetupUncheckedCreateWithoutSsdInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SSDOfSetupCreateOrConnectWithoutSsdInputSchema),
          z.lazy(() => SSDOfSetupCreateOrConnectWithoutSsdInputSchema).array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => SSDOfSetupUpsertWithWhereUniqueWithoutSsdInputSchema),
          z
            .lazy(() => SSDOfSetupUpsertWithWhereUniqueWithoutSsdInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SSDOfSetupCreateManySsdInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => SSDOfSetupWhereUniqueInputSchema),
          z.lazy(() => SSDOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => SSDOfSetupWhereUniqueInputSchema),
          z.lazy(() => SSDOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => SSDOfSetupWhereUniqueInputSchema),
          z.lazy(() => SSDOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => SSDOfSetupWhereUniqueInputSchema),
          z.lazy(() => SSDOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => SSDOfSetupUpdateWithWhereUniqueWithoutSsdInputSchema),
          z
            .lazy(() => SSDOfSetupUpdateWithWhereUniqueWithoutSsdInputSchema)
            .array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => SSDOfSetupUpdateManyWithWhereWithoutSsdInputSchema),
          z
            .lazy(() => SSDOfSetupUpdateManyWithWhereWithoutSsdInputSchema)
            .array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => SSDOfSetupScalarWhereInputSchema),
          z.lazy(() => SSDOfSetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SSDOfSetupUncheckedUpdateManyWithoutSsdNestedInputSchema: z.ZodType<Prisma.SSDOfSetupUncheckedUpdateManyWithoutSsdNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SSDOfSetupCreateWithoutSsdInputSchema),
          z.lazy(() => SSDOfSetupCreateWithoutSsdInputSchema).array(),
          z.lazy(() => SSDOfSetupUncheckedCreateWithoutSsdInputSchema),
          z.lazy(() => SSDOfSetupUncheckedCreateWithoutSsdInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SSDOfSetupCreateOrConnectWithoutSsdInputSchema),
          z.lazy(() => SSDOfSetupCreateOrConnectWithoutSsdInputSchema).array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => SSDOfSetupUpsertWithWhereUniqueWithoutSsdInputSchema),
          z
            .lazy(() => SSDOfSetupUpsertWithWhereUniqueWithoutSsdInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SSDOfSetupCreateManySsdInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => SSDOfSetupWhereUniqueInputSchema),
          z.lazy(() => SSDOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => SSDOfSetupWhereUniqueInputSchema),
          z.lazy(() => SSDOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => SSDOfSetupWhereUniqueInputSchema),
          z.lazy(() => SSDOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => SSDOfSetupWhereUniqueInputSchema),
          z.lazy(() => SSDOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => SSDOfSetupUpdateWithWhereUniqueWithoutSsdInputSchema),
          z
            .lazy(() => SSDOfSetupUpdateWithWhereUniqueWithoutSsdInputSchema)
            .array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => SSDOfSetupUpdateManyWithWhereWithoutSsdInputSchema),
          z
            .lazy(() => SSDOfSetupUpdateManyWithWhereWithoutSsdInputSchema)
            .array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => SSDOfSetupScalarWhereInputSchema),
          z.lazy(() => SSDOfSetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SetupCreateNestedManyWithoutGpuInputSchema: z.ZodType<Prisma.SetupCreateNestedManyWithoutGpuInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutGpuInputSchema),
          z.lazy(() => SetupCreateWithoutGpuInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutGpuInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutGpuInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutGpuInputSchema),
          z.lazy(() => SetupCreateOrConnectWithoutGpuInputSchema).array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyGpuInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SetupUncheckedCreateNestedManyWithoutGpuInputSchema: z.ZodType<Prisma.SetupUncheckedCreateNestedManyWithoutGpuInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutGpuInputSchema),
          z.lazy(() => SetupCreateWithoutGpuInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutGpuInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutGpuInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutGpuInputSchema),
          z.lazy(() => SetupCreateOrConnectWithoutGpuInputSchema).array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyGpuInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SetupUpdateManyWithoutGpuNestedInputSchema: z.ZodType<Prisma.SetupUpdateManyWithoutGpuNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutGpuInputSchema),
          z.lazy(() => SetupCreateWithoutGpuInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutGpuInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutGpuInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutGpuInputSchema),
          z.lazy(() => SetupCreateOrConnectWithoutGpuInputSchema).array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => SetupUpsertWithWhereUniqueWithoutGpuInputSchema),
          z.lazy(() => SetupUpsertWithWhereUniqueWithoutGpuInputSchema).array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyGpuInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => SetupUpdateWithWhereUniqueWithoutGpuInputSchema),
          z.lazy(() => SetupUpdateWithWhereUniqueWithoutGpuInputSchema).array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => SetupUpdateManyWithWhereWithoutGpuInputSchema),
          z.lazy(() => SetupUpdateManyWithWhereWithoutGpuInputSchema).array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => SetupScalarWhereInputSchema),
          z.lazy(() => SetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateManyWithoutGpuNestedInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateManyWithoutGpuNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutGpuInputSchema),
          z.lazy(() => SetupCreateWithoutGpuInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutGpuInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutGpuInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutGpuInputSchema),
          z.lazy(() => SetupCreateOrConnectWithoutGpuInputSchema).array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => SetupUpsertWithWhereUniqueWithoutGpuInputSchema),
          z.lazy(() => SetupUpsertWithWhereUniqueWithoutGpuInputSchema).array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyGpuInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => SetupUpdateWithWhereUniqueWithoutGpuInputSchema),
          z.lazy(() => SetupUpdateWithWhereUniqueWithoutGpuInputSchema).array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => SetupUpdateManyWithWhereWithoutGpuInputSchema),
          z.lazy(() => SetupUpdateManyWithWhereWithoutGpuInputSchema).array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => SetupScalarWhereInputSchema),
          z.lazy(() => SetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SetupCreateNestedManyWithoutCaseInputSchema: z.ZodType<Prisma.SetupCreateNestedManyWithoutCaseInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutCaseInputSchema),
          z.lazy(() => SetupCreateWithoutCaseInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutCaseInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutCaseInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutCaseInputSchema),
          z.lazy(() => SetupCreateOrConnectWithoutCaseInputSchema).array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyCaseInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SetupUncheckedCreateNestedManyWithoutCaseInputSchema: z.ZodType<Prisma.SetupUncheckedCreateNestedManyWithoutCaseInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutCaseInputSchema),
          z.lazy(() => SetupCreateWithoutCaseInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutCaseInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutCaseInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutCaseInputSchema),
          z.lazy(() => SetupCreateOrConnectWithoutCaseInputSchema).array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyCaseInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const EnumCaseTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumCaseTypeFieldUpdateOperationsInput> =
  z
    .object({
      set: z.lazy(() => CaseTypeSchema).optional(),
    })
    .strict();

export const SetupUpdateManyWithoutCaseNestedInputSchema: z.ZodType<Prisma.SetupUpdateManyWithoutCaseNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutCaseInputSchema),
          z.lazy(() => SetupCreateWithoutCaseInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutCaseInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutCaseInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutCaseInputSchema),
          z.lazy(() => SetupCreateOrConnectWithoutCaseInputSchema).array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => SetupUpsertWithWhereUniqueWithoutCaseInputSchema),
          z
            .lazy(() => SetupUpsertWithWhereUniqueWithoutCaseInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyCaseInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => SetupUpdateWithWhereUniqueWithoutCaseInputSchema),
          z
            .lazy(() => SetupUpdateWithWhereUniqueWithoutCaseInputSchema)
            .array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => SetupUpdateManyWithWhereWithoutCaseInputSchema),
          z.lazy(() => SetupUpdateManyWithWhereWithoutCaseInputSchema).array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => SetupScalarWhereInputSchema),
          z.lazy(() => SetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateManyWithoutCaseNestedInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateManyWithoutCaseNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutCaseInputSchema),
          z.lazy(() => SetupCreateWithoutCaseInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutCaseInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutCaseInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutCaseInputSchema),
          z.lazy(() => SetupCreateOrConnectWithoutCaseInputSchema).array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => SetupUpsertWithWhereUniqueWithoutCaseInputSchema),
          z
            .lazy(() => SetupUpsertWithWhereUniqueWithoutCaseInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyCaseInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => SetupUpdateWithWhereUniqueWithoutCaseInputSchema),
          z
            .lazy(() => SetupUpdateWithWhereUniqueWithoutCaseInputSchema)
            .array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => SetupUpdateManyWithWhereWithoutCaseInputSchema),
          z.lazy(() => SetupUpdateManyWithWhereWithoutCaseInputSchema).array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => SetupScalarWhereInputSchema),
          z.lazy(() => SetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SetupCreateNestedManyWithoutPsuInputSchema: z.ZodType<Prisma.SetupCreateNestedManyWithoutPsuInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutPsuInputSchema),
          z.lazy(() => SetupCreateWithoutPsuInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutPsuInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutPsuInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutPsuInputSchema),
          z.lazy(() => SetupCreateOrConnectWithoutPsuInputSchema).array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyPsuInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SetupUncheckedCreateNestedManyWithoutPsuInputSchema: z.ZodType<Prisma.SetupUncheckedCreateNestedManyWithoutPsuInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutPsuInputSchema),
          z.lazy(() => SetupCreateWithoutPsuInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutPsuInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutPsuInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutPsuInputSchema),
          z.lazy(() => SetupCreateOrConnectWithoutPsuInputSchema).array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyPsuInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const EnumPSUTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumPSUTypeFieldUpdateOperationsInput> =
  z
    .object({
      set: z.lazy(() => PSUTypeSchema).optional(),
    })
    .strict();

export const EnumPSUEffFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumPSUEffFieldUpdateOperationsInput> =
  z
    .object({
      set: z.lazy(() => PSUEffSchema).optional(),
    })
    .strict();

export const EnumPSUModulFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumPSUModulFieldUpdateOperationsInput> =
  z
    .object({
      set: z.lazy(() => PSUModulSchema).optional(),
    })
    .strict();

export const SetupUpdateManyWithoutPsuNestedInputSchema: z.ZodType<Prisma.SetupUpdateManyWithoutPsuNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutPsuInputSchema),
          z.lazy(() => SetupCreateWithoutPsuInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutPsuInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutPsuInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutPsuInputSchema),
          z.lazy(() => SetupCreateOrConnectWithoutPsuInputSchema).array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => SetupUpsertWithWhereUniqueWithoutPsuInputSchema),
          z.lazy(() => SetupUpsertWithWhereUniqueWithoutPsuInputSchema).array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyPsuInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => SetupUpdateWithWhereUniqueWithoutPsuInputSchema),
          z.lazy(() => SetupUpdateWithWhereUniqueWithoutPsuInputSchema).array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => SetupUpdateManyWithWhereWithoutPsuInputSchema),
          z.lazy(() => SetupUpdateManyWithWhereWithoutPsuInputSchema).array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => SetupScalarWhereInputSchema),
          z.lazy(() => SetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateManyWithoutPsuNestedInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateManyWithoutPsuNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutPsuInputSchema),
          z.lazy(() => SetupCreateWithoutPsuInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutPsuInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutPsuInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutPsuInputSchema),
          z.lazy(() => SetupCreateOrConnectWithoutPsuInputSchema).array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => SetupUpsertWithWhereUniqueWithoutPsuInputSchema),
          z.lazy(() => SetupUpsertWithWhereUniqueWithoutPsuInputSchema).array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyPsuInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => SetupUpdateWithWhereUniqueWithoutPsuInputSchema),
          z.lazy(() => SetupUpdateWithWhereUniqueWithoutPsuInputSchema).array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => SetupUpdateManyWithWhereWithoutPsuInputSchema),
          z.lazy(() => SetupUpdateManyWithWhereWithoutPsuInputSchema).array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => SetupScalarWhereInputSchema),
          z.lazy(() => SetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const CPUCreateNestedOneWithoutSetupsInputSchema: z.ZodType<Prisma.CPUCreateNestedOneWithoutSetupsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => CPUCreateWithoutSetupsInputSchema),
          z.lazy(() => CPUUncheckedCreateWithoutSetupsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => CPUCreateOrConnectWithoutSetupsInputSchema)
        .optional(),
      connect: z.lazy(() => CPUWhereUniqueInputSchema).optional(),
    })
    .strict();

export const GPUCreateNestedOneWithoutSetupsInputSchema: z.ZodType<Prisma.GPUCreateNestedOneWithoutSetupsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => GPUCreateWithoutSetupsInputSchema),
          z.lazy(() => GPUUncheckedCreateWithoutSetupsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => GPUCreateOrConnectWithoutSetupsInputSchema)
        .optional(),
      connect: z.lazy(() => GPUWhereUniqueInputSchema).optional(),
    })
    .strict();

export const HDDCreateNestedOneWithoutSetupsInputSchema: z.ZodType<Prisma.HDDCreateNestedOneWithoutSetupsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => HDDCreateWithoutSetupsInputSchema),
          z.lazy(() => HDDUncheckedCreateWithoutSetupsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => HDDCreateOrConnectWithoutSetupsInputSchema)
        .optional(),
      connect: z.lazy(() => HDDWhereUniqueInputSchema).optional(),
    })
    .strict();

export const CaseCreateNestedOneWithoutSetupsInputSchema: z.ZodType<Prisma.CaseCreateNestedOneWithoutSetupsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => CaseCreateWithoutSetupsInputSchema),
          z.lazy(() => CaseUncheckedCreateWithoutSetupsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => CaseCreateOrConnectWithoutSetupsInputSchema)
        .optional(),
      connect: z.lazy(() => CaseWhereUniqueInputSchema).optional(),
    })
    .strict();

export const RAMCreateNestedOneWithoutSetupsInputSchema: z.ZodType<Prisma.RAMCreateNestedOneWithoutSetupsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => RAMCreateWithoutSetupsInputSchema),
          z.lazy(() => RAMUncheckedCreateWithoutSetupsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => RAMCreateOrConnectWithoutSetupsInputSchema)
        .optional(),
      connect: z.lazy(() => RAMWhereUniqueInputSchema).optional(),
    })
    .strict();

export const PSUCreateNestedOneWithoutSetupsInputSchema: z.ZodType<Prisma.PSUCreateNestedOneWithoutSetupsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => PSUCreateWithoutSetupsInputSchema),
          z.lazy(() => PSUUncheckedCreateWithoutSetupsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => PSUCreateOrConnectWithoutSetupsInputSchema)
        .optional(),
      connect: z.lazy(() => PSUWhereUniqueInputSchema).optional(),
    })
    .strict();

export const MonitorsOfSetupCreateNestedManyWithoutSetupInputSchema: z.ZodType<Prisma.MonitorsOfSetupCreateNestedManyWithoutSetupInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => MonitorsOfSetupCreateWithoutSetupInputSchema),
          z.lazy(() => MonitorsOfSetupCreateWithoutSetupInputSchema).array(),
          z.lazy(() => MonitorsOfSetupUncheckedCreateWithoutSetupInputSchema),
          z
            .lazy(() => MonitorsOfSetupUncheckedCreateWithoutSetupInputSchema)
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => MonitorsOfSetupCreateOrConnectWithoutSetupInputSchema),
          z
            .lazy(() => MonitorsOfSetupCreateOrConnectWithoutSetupInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => MonitorsOfSetupCreateManySetupInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema),
          z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SSDOfSetupCreateNestedManyWithoutSetupInputSchema: z.ZodType<Prisma.SSDOfSetupCreateNestedManyWithoutSetupInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SSDOfSetupCreateWithoutSetupInputSchema),
          z.lazy(() => SSDOfSetupCreateWithoutSetupInputSchema).array(),
          z.lazy(() => SSDOfSetupUncheckedCreateWithoutSetupInputSchema),
          z
            .lazy(() => SSDOfSetupUncheckedCreateWithoutSetupInputSchema)
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SSDOfSetupCreateOrConnectWithoutSetupInputSchema),
          z
            .lazy(() => SSDOfSetupCreateOrConnectWithoutSetupInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SSDOfSetupCreateManySetupInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => SSDOfSetupWhereUniqueInputSchema),
          z.lazy(() => SSDOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SoundCardCreateNestedOneWithoutSetupsInputSchema: z.ZodType<Prisma.SoundCardCreateNestedOneWithoutSetupsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SoundCardCreateWithoutSetupsInputSchema),
          z.lazy(() => SoundCardUncheckedCreateWithoutSetupsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => SoundCardCreateOrConnectWithoutSetupsInputSchema)
        .optional(),
      connect: z.lazy(() => SoundCardWhereUniqueInputSchema).optional(),
    })
    .strict();

export const CPUCoolerCreateNestedOneWithoutSetupsInputSchema: z.ZodType<Prisma.CPUCoolerCreateNestedOneWithoutSetupsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => CPUCoolerCreateWithoutSetupsInputSchema),
          z.lazy(() => CPUCoolerUncheckedCreateWithoutSetupsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => CPUCoolerCreateOrConnectWithoutSetupsInputSchema)
        .optional(),
      connect: z.lazy(() => CPUCoolerWhereUniqueInputSchema).optional(),
    })
    .strict();

export const MotherboardCreateNestedOneWithoutSetupsInputSchema: z.ZodType<Prisma.MotherboardCreateNestedOneWithoutSetupsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => MotherboardCreateWithoutSetupsInputSchema),
          z.lazy(() => MotherboardUncheckedCreateWithoutSetupsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => MotherboardCreateOrConnectWithoutSetupsInputSchema)
        .optional(),
      connect: z.lazy(() => MotherboardWhereUniqueInputSchema).optional(),
    })
    .strict();

export const HeadphonesCreateNestedOneWithoutSetupsInputSchema: z.ZodType<Prisma.HeadphonesCreateNestedOneWithoutSetupsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => HeadphonesCreateWithoutSetupsInputSchema),
          z.lazy(() => HeadphonesUncheckedCreateWithoutSetupsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => HeadphonesCreateOrConnectWithoutSetupsInputSchema)
        .optional(),
      connect: z.lazy(() => HeadphonesWhereUniqueInputSchema).optional(),
    })
    .strict();

export const KeyboardCreateNestedOneWithoutSetupsInputSchema: z.ZodType<Prisma.KeyboardCreateNestedOneWithoutSetupsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => KeyboardCreateWithoutSetupsInputSchema),
          z.lazy(() => KeyboardUncheckedCreateWithoutSetupsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => KeyboardCreateOrConnectWithoutSetupsInputSchema)
        .optional(),
      connect: z.lazy(() => KeyboardWhereUniqueInputSchema).optional(),
    })
    .strict();

export const MouseCreateNestedOneWithoutSetupsInputSchema: z.ZodType<Prisma.MouseCreateNestedOneWithoutSetupsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => MouseCreateWithoutSetupsInputSchema),
          z.lazy(() => MouseUncheckedCreateWithoutSetupsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => MouseCreateOrConnectWithoutSetupsInputSchema)
        .optional(),
      connect: z.lazy(() => MouseWhereUniqueInputSchema).optional(),
    })
    .strict();

export const SpeakersOfSetupCreateNestedManyWithoutSetupInputSchema: z.ZodType<Prisma.SpeakersOfSetupCreateNestedManyWithoutSetupInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SpeakersOfSetupCreateWithoutSetupInputSchema),
          z.lazy(() => SpeakersOfSetupCreateWithoutSetupInputSchema).array(),
          z.lazy(() => SpeakersOfSetupUncheckedCreateWithoutSetupInputSchema),
          z
            .lazy(() => SpeakersOfSetupUncheckedCreateWithoutSetupInputSchema)
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SpeakersOfSetupCreateOrConnectWithoutSetupInputSchema),
          z
            .lazy(() => SpeakersOfSetupCreateOrConnectWithoutSetupInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SpeakersOfSetupCreateManySetupInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema),
          z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const WebcamCreateNestedOneWithoutSetupsInputSchema: z.ZodType<Prisma.WebcamCreateNestedOneWithoutSetupsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => WebcamCreateWithoutSetupsInputSchema),
          z.lazy(() => WebcamUncheckedCreateWithoutSetupsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => WebcamCreateOrConnectWithoutSetupsInputSchema)
        .optional(),
      connect: z.lazy(() => WebcamWhereUniqueInputSchema).optional(),
    })
    .strict();

export const CaseFanOfSetupCreateNestedManyWithoutSetupInputSchema: z.ZodType<Prisma.CaseFanOfSetupCreateNestedManyWithoutSetupInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => CaseFanOfSetupCreateWithoutSetupInputSchema),
          z.lazy(() => CaseFanOfSetupCreateWithoutSetupInputSchema).array(),
          z.lazy(() => CaseFanOfSetupUncheckedCreateWithoutSetupInputSchema),
          z
            .lazy(() => CaseFanOfSetupUncheckedCreateWithoutSetupInputSchema)
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => CaseFanOfSetupCreateOrConnectWithoutSetupInputSchema),
          z
            .lazy(() => CaseFanOfSetupCreateOrConnectWithoutSetupInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => CaseFanOfSetupCreateManySetupInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema),
          z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const UserCreateNestedOneWithoutSetupsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutSetupsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => UserCreateWithoutSetupsInputSchema),
          z.lazy(() => UserUncheckedCreateWithoutSetupsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => UserCreateOrConnectWithoutSetupsInputSchema)
        .optional(),
      connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
    })
    .strict();

export const MonitorsOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema: z.ZodType<Prisma.MonitorsOfSetupUncheckedCreateNestedManyWithoutSetupInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => MonitorsOfSetupCreateWithoutSetupInputSchema),
          z.lazy(() => MonitorsOfSetupCreateWithoutSetupInputSchema).array(),
          z.lazy(() => MonitorsOfSetupUncheckedCreateWithoutSetupInputSchema),
          z
            .lazy(() => MonitorsOfSetupUncheckedCreateWithoutSetupInputSchema)
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => MonitorsOfSetupCreateOrConnectWithoutSetupInputSchema),
          z
            .lazy(() => MonitorsOfSetupCreateOrConnectWithoutSetupInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => MonitorsOfSetupCreateManySetupInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema),
          z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SSDOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema: z.ZodType<Prisma.SSDOfSetupUncheckedCreateNestedManyWithoutSetupInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SSDOfSetupCreateWithoutSetupInputSchema),
          z.lazy(() => SSDOfSetupCreateWithoutSetupInputSchema).array(),
          z.lazy(() => SSDOfSetupUncheckedCreateWithoutSetupInputSchema),
          z
            .lazy(() => SSDOfSetupUncheckedCreateWithoutSetupInputSchema)
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SSDOfSetupCreateOrConnectWithoutSetupInputSchema),
          z
            .lazy(() => SSDOfSetupCreateOrConnectWithoutSetupInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SSDOfSetupCreateManySetupInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => SSDOfSetupWhereUniqueInputSchema),
          z.lazy(() => SSDOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SpeakersOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema: z.ZodType<Prisma.SpeakersOfSetupUncheckedCreateNestedManyWithoutSetupInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SpeakersOfSetupCreateWithoutSetupInputSchema),
          z.lazy(() => SpeakersOfSetupCreateWithoutSetupInputSchema).array(),
          z.lazy(() => SpeakersOfSetupUncheckedCreateWithoutSetupInputSchema),
          z
            .lazy(() => SpeakersOfSetupUncheckedCreateWithoutSetupInputSchema)
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SpeakersOfSetupCreateOrConnectWithoutSetupInputSchema),
          z
            .lazy(() => SpeakersOfSetupCreateOrConnectWithoutSetupInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SpeakersOfSetupCreateManySetupInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema),
          z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const CaseFanOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema: z.ZodType<Prisma.CaseFanOfSetupUncheckedCreateNestedManyWithoutSetupInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => CaseFanOfSetupCreateWithoutSetupInputSchema),
          z.lazy(() => CaseFanOfSetupCreateWithoutSetupInputSchema).array(),
          z.lazy(() => CaseFanOfSetupUncheckedCreateWithoutSetupInputSchema),
          z
            .lazy(() => CaseFanOfSetupUncheckedCreateWithoutSetupInputSchema)
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => CaseFanOfSetupCreateOrConnectWithoutSetupInputSchema),
          z
            .lazy(() => CaseFanOfSetupCreateOrConnectWithoutSetupInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => CaseFanOfSetupCreateManySetupInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema),
          z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const CPUUpdateOneRequiredWithoutSetupsNestedInputSchema: z.ZodType<Prisma.CPUUpdateOneRequiredWithoutSetupsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => CPUCreateWithoutSetupsInputSchema),
          z.lazy(() => CPUUncheckedCreateWithoutSetupsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => CPUCreateOrConnectWithoutSetupsInputSchema)
        .optional(),
      upsert: z.lazy(() => CPUUpsertWithoutSetupsInputSchema).optional(),
      connect: z.lazy(() => CPUWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => CPUUpdateToOneWithWhereWithoutSetupsInputSchema),
          z.lazy(() => CPUUpdateWithoutSetupsInputSchema),
          z.lazy(() => CPUUncheckedUpdateWithoutSetupsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const GPUUpdateOneRequiredWithoutSetupsNestedInputSchema: z.ZodType<Prisma.GPUUpdateOneRequiredWithoutSetupsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => GPUCreateWithoutSetupsInputSchema),
          z.lazy(() => GPUUncheckedCreateWithoutSetupsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => GPUCreateOrConnectWithoutSetupsInputSchema)
        .optional(),
      upsert: z.lazy(() => GPUUpsertWithoutSetupsInputSchema).optional(),
      connect: z.lazy(() => GPUWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => GPUUpdateToOneWithWhereWithoutSetupsInputSchema),
          z.lazy(() => GPUUpdateWithoutSetupsInputSchema),
          z.lazy(() => GPUUncheckedUpdateWithoutSetupsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const HDDUpdateOneRequiredWithoutSetupsNestedInputSchema: z.ZodType<Prisma.HDDUpdateOneRequiredWithoutSetupsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => HDDCreateWithoutSetupsInputSchema),
          z.lazy(() => HDDUncheckedCreateWithoutSetupsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => HDDCreateOrConnectWithoutSetupsInputSchema)
        .optional(),
      upsert: z.lazy(() => HDDUpsertWithoutSetupsInputSchema).optional(),
      connect: z.lazy(() => HDDWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => HDDUpdateToOneWithWhereWithoutSetupsInputSchema),
          z.lazy(() => HDDUpdateWithoutSetupsInputSchema),
          z.lazy(() => HDDUncheckedUpdateWithoutSetupsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const CaseUpdateOneRequiredWithoutSetupsNestedInputSchema: z.ZodType<Prisma.CaseUpdateOneRequiredWithoutSetupsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => CaseCreateWithoutSetupsInputSchema),
          z.lazy(() => CaseUncheckedCreateWithoutSetupsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => CaseCreateOrConnectWithoutSetupsInputSchema)
        .optional(),
      upsert: z.lazy(() => CaseUpsertWithoutSetupsInputSchema).optional(),
      connect: z.lazy(() => CaseWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => CaseUpdateToOneWithWhereWithoutSetupsInputSchema),
          z.lazy(() => CaseUpdateWithoutSetupsInputSchema),
          z.lazy(() => CaseUncheckedUpdateWithoutSetupsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const RAMUpdateOneRequiredWithoutSetupsNestedInputSchema: z.ZodType<Prisma.RAMUpdateOneRequiredWithoutSetupsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => RAMCreateWithoutSetupsInputSchema),
          z.lazy(() => RAMUncheckedCreateWithoutSetupsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => RAMCreateOrConnectWithoutSetupsInputSchema)
        .optional(),
      upsert: z.lazy(() => RAMUpsertWithoutSetupsInputSchema).optional(),
      connect: z.lazy(() => RAMWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => RAMUpdateToOneWithWhereWithoutSetupsInputSchema),
          z.lazy(() => RAMUpdateWithoutSetupsInputSchema),
          z.lazy(() => RAMUncheckedUpdateWithoutSetupsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const PSUUpdateOneRequiredWithoutSetupsNestedInputSchema: z.ZodType<Prisma.PSUUpdateOneRequiredWithoutSetupsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => PSUCreateWithoutSetupsInputSchema),
          z.lazy(() => PSUUncheckedCreateWithoutSetupsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => PSUCreateOrConnectWithoutSetupsInputSchema)
        .optional(),
      upsert: z.lazy(() => PSUUpsertWithoutSetupsInputSchema).optional(),
      connect: z.lazy(() => PSUWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => PSUUpdateToOneWithWhereWithoutSetupsInputSchema),
          z.lazy(() => PSUUpdateWithoutSetupsInputSchema),
          z.lazy(() => PSUUncheckedUpdateWithoutSetupsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const MonitorsOfSetupUpdateManyWithoutSetupNestedInputSchema: z.ZodType<Prisma.MonitorsOfSetupUpdateManyWithoutSetupNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => MonitorsOfSetupCreateWithoutSetupInputSchema),
          z.lazy(() => MonitorsOfSetupCreateWithoutSetupInputSchema).array(),
          z.lazy(() => MonitorsOfSetupUncheckedCreateWithoutSetupInputSchema),
          z
            .lazy(() => MonitorsOfSetupUncheckedCreateWithoutSetupInputSchema)
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => MonitorsOfSetupCreateOrConnectWithoutSetupInputSchema),
          z
            .lazy(() => MonitorsOfSetupCreateOrConnectWithoutSetupInputSchema)
            .array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => MonitorsOfSetupUpsertWithWhereUniqueWithoutSetupInputSchema,
          ),
          z
            .lazy(
              () => MonitorsOfSetupUpsertWithWhereUniqueWithoutSetupInputSchema,
            )
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => MonitorsOfSetupCreateManySetupInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema),
          z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema),
          z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema),
          z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema),
          z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => MonitorsOfSetupUpdateWithWhereUniqueWithoutSetupInputSchema,
          ),
          z
            .lazy(
              () => MonitorsOfSetupUpdateWithWhereUniqueWithoutSetupInputSchema,
            )
            .array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => MonitorsOfSetupUpdateManyWithWhereWithoutSetupInputSchema,
          ),
          z
            .lazy(
              () => MonitorsOfSetupUpdateManyWithWhereWithoutSetupInputSchema,
            )
            .array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => MonitorsOfSetupScalarWhereInputSchema),
          z.lazy(() => MonitorsOfSetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SSDOfSetupUpdateManyWithoutSetupNestedInputSchema: z.ZodType<Prisma.SSDOfSetupUpdateManyWithoutSetupNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SSDOfSetupCreateWithoutSetupInputSchema),
          z.lazy(() => SSDOfSetupCreateWithoutSetupInputSchema).array(),
          z.lazy(() => SSDOfSetupUncheckedCreateWithoutSetupInputSchema),
          z
            .lazy(() => SSDOfSetupUncheckedCreateWithoutSetupInputSchema)
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SSDOfSetupCreateOrConnectWithoutSetupInputSchema),
          z
            .lazy(() => SSDOfSetupCreateOrConnectWithoutSetupInputSchema)
            .array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => SSDOfSetupUpsertWithWhereUniqueWithoutSetupInputSchema),
          z
            .lazy(() => SSDOfSetupUpsertWithWhereUniqueWithoutSetupInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SSDOfSetupCreateManySetupInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => SSDOfSetupWhereUniqueInputSchema),
          z.lazy(() => SSDOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => SSDOfSetupWhereUniqueInputSchema),
          z.lazy(() => SSDOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => SSDOfSetupWhereUniqueInputSchema),
          z.lazy(() => SSDOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => SSDOfSetupWhereUniqueInputSchema),
          z.lazy(() => SSDOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => SSDOfSetupUpdateWithWhereUniqueWithoutSetupInputSchema),
          z
            .lazy(() => SSDOfSetupUpdateWithWhereUniqueWithoutSetupInputSchema)
            .array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => SSDOfSetupUpdateManyWithWhereWithoutSetupInputSchema),
          z
            .lazy(() => SSDOfSetupUpdateManyWithWhereWithoutSetupInputSchema)
            .array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => SSDOfSetupScalarWhereInputSchema),
          z.lazy(() => SSDOfSetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SoundCardUpdateOneRequiredWithoutSetupsNestedInputSchema: z.ZodType<Prisma.SoundCardUpdateOneRequiredWithoutSetupsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SoundCardCreateWithoutSetupsInputSchema),
          z.lazy(() => SoundCardUncheckedCreateWithoutSetupsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => SoundCardCreateOrConnectWithoutSetupsInputSchema)
        .optional(),
      upsert: z.lazy(() => SoundCardUpsertWithoutSetupsInputSchema).optional(),
      connect: z.lazy(() => SoundCardWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => SoundCardUpdateToOneWithWhereWithoutSetupsInputSchema),
          z.lazy(() => SoundCardUpdateWithoutSetupsInputSchema),
          z.lazy(() => SoundCardUncheckedUpdateWithoutSetupsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const CPUCoolerUpdateOneRequiredWithoutSetupsNestedInputSchema: z.ZodType<Prisma.CPUCoolerUpdateOneRequiredWithoutSetupsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => CPUCoolerCreateWithoutSetupsInputSchema),
          z.lazy(() => CPUCoolerUncheckedCreateWithoutSetupsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => CPUCoolerCreateOrConnectWithoutSetupsInputSchema)
        .optional(),
      upsert: z.lazy(() => CPUCoolerUpsertWithoutSetupsInputSchema).optional(),
      connect: z.lazy(() => CPUCoolerWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => CPUCoolerUpdateToOneWithWhereWithoutSetupsInputSchema),
          z.lazy(() => CPUCoolerUpdateWithoutSetupsInputSchema),
          z.lazy(() => CPUCoolerUncheckedUpdateWithoutSetupsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const MotherboardUpdateOneRequiredWithoutSetupsNestedInputSchema: z.ZodType<Prisma.MotherboardUpdateOneRequiredWithoutSetupsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => MotherboardCreateWithoutSetupsInputSchema),
          z.lazy(() => MotherboardUncheckedCreateWithoutSetupsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => MotherboardCreateOrConnectWithoutSetupsInputSchema)
        .optional(),
      upsert: z
        .lazy(() => MotherboardUpsertWithoutSetupsInputSchema)
        .optional(),
      connect: z.lazy(() => MotherboardWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => MotherboardUpdateToOneWithWhereWithoutSetupsInputSchema),
          z.lazy(() => MotherboardUpdateWithoutSetupsInputSchema),
          z.lazy(() => MotherboardUncheckedUpdateWithoutSetupsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const HeadphonesUpdateOneRequiredWithoutSetupsNestedInputSchema: z.ZodType<Prisma.HeadphonesUpdateOneRequiredWithoutSetupsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => HeadphonesCreateWithoutSetupsInputSchema),
          z.lazy(() => HeadphonesUncheckedCreateWithoutSetupsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => HeadphonesCreateOrConnectWithoutSetupsInputSchema)
        .optional(),
      upsert: z.lazy(() => HeadphonesUpsertWithoutSetupsInputSchema).optional(),
      connect: z.lazy(() => HeadphonesWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => HeadphonesUpdateToOneWithWhereWithoutSetupsInputSchema),
          z.lazy(() => HeadphonesUpdateWithoutSetupsInputSchema),
          z.lazy(() => HeadphonesUncheckedUpdateWithoutSetupsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const KeyboardUpdateOneRequiredWithoutSetupsNestedInputSchema: z.ZodType<Prisma.KeyboardUpdateOneRequiredWithoutSetupsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => KeyboardCreateWithoutSetupsInputSchema),
          z.lazy(() => KeyboardUncheckedCreateWithoutSetupsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => KeyboardCreateOrConnectWithoutSetupsInputSchema)
        .optional(),
      upsert: z.lazy(() => KeyboardUpsertWithoutSetupsInputSchema).optional(),
      connect: z.lazy(() => KeyboardWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => KeyboardUpdateToOneWithWhereWithoutSetupsInputSchema),
          z.lazy(() => KeyboardUpdateWithoutSetupsInputSchema),
          z.lazy(() => KeyboardUncheckedUpdateWithoutSetupsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const MouseUpdateOneRequiredWithoutSetupsNestedInputSchema: z.ZodType<Prisma.MouseUpdateOneRequiredWithoutSetupsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => MouseCreateWithoutSetupsInputSchema),
          z.lazy(() => MouseUncheckedCreateWithoutSetupsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => MouseCreateOrConnectWithoutSetupsInputSchema)
        .optional(),
      upsert: z.lazy(() => MouseUpsertWithoutSetupsInputSchema).optional(),
      connect: z.lazy(() => MouseWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => MouseUpdateToOneWithWhereWithoutSetupsInputSchema),
          z.lazy(() => MouseUpdateWithoutSetupsInputSchema),
          z.lazy(() => MouseUncheckedUpdateWithoutSetupsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const SpeakersOfSetupUpdateManyWithoutSetupNestedInputSchema: z.ZodType<Prisma.SpeakersOfSetupUpdateManyWithoutSetupNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SpeakersOfSetupCreateWithoutSetupInputSchema),
          z.lazy(() => SpeakersOfSetupCreateWithoutSetupInputSchema).array(),
          z.lazy(() => SpeakersOfSetupUncheckedCreateWithoutSetupInputSchema),
          z
            .lazy(() => SpeakersOfSetupUncheckedCreateWithoutSetupInputSchema)
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SpeakersOfSetupCreateOrConnectWithoutSetupInputSchema),
          z
            .lazy(() => SpeakersOfSetupCreateOrConnectWithoutSetupInputSchema)
            .array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => SpeakersOfSetupUpsertWithWhereUniqueWithoutSetupInputSchema,
          ),
          z
            .lazy(
              () => SpeakersOfSetupUpsertWithWhereUniqueWithoutSetupInputSchema,
            )
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SpeakersOfSetupCreateManySetupInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema),
          z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema),
          z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema),
          z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema),
          z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => SpeakersOfSetupUpdateWithWhereUniqueWithoutSetupInputSchema,
          ),
          z
            .lazy(
              () => SpeakersOfSetupUpdateWithWhereUniqueWithoutSetupInputSchema,
            )
            .array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => SpeakersOfSetupUpdateManyWithWhereWithoutSetupInputSchema,
          ),
          z
            .lazy(
              () => SpeakersOfSetupUpdateManyWithWhereWithoutSetupInputSchema,
            )
            .array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => SpeakersOfSetupScalarWhereInputSchema),
          z.lazy(() => SpeakersOfSetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const WebcamUpdateOneRequiredWithoutSetupsNestedInputSchema: z.ZodType<Prisma.WebcamUpdateOneRequiredWithoutSetupsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => WebcamCreateWithoutSetupsInputSchema),
          z.lazy(() => WebcamUncheckedCreateWithoutSetupsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => WebcamCreateOrConnectWithoutSetupsInputSchema)
        .optional(),
      upsert: z.lazy(() => WebcamUpsertWithoutSetupsInputSchema).optional(),
      connect: z.lazy(() => WebcamWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => WebcamUpdateToOneWithWhereWithoutSetupsInputSchema),
          z.lazy(() => WebcamUpdateWithoutSetupsInputSchema),
          z.lazy(() => WebcamUncheckedUpdateWithoutSetupsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const CaseFanOfSetupUpdateManyWithoutSetupNestedInputSchema: z.ZodType<Prisma.CaseFanOfSetupUpdateManyWithoutSetupNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => CaseFanOfSetupCreateWithoutSetupInputSchema),
          z.lazy(() => CaseFanOfSetupCreateWithoutSetupInputSchema).array(),
          z.lazy(() => CaseFanOfSetupUncheckedCreateWithoutSetupInputSchema),
          z
            .lazy(() => CaseFanOfSetupUncheckedCreateWithoutSetupInputSchema)
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => CaseFanOfSetupCreateOrConnectWithoutSetupInputSchema),
          z
            .lazy(() => CaseFanOfSetupCreateOrConnectWithoutSetupInputSchema)
            .array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => CaseFanOfSetupUpsertWithWhereUniqueWithoutSetupInputSchema,
          ),
          z
            .lazy(
              () => CaseFanOfSetupUpsertWithWhereUniqueWithoutSetupInputSchema,
            )
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => CaseFanOfSetupCreateManySetupInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema),
          z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema),
          z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema),
          z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema),
          z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => CaseFanOfSetupUpdateWithWhereUniqueWithoutSetupInputSchema,
          ),
          z
            .lazy(
              () => CaseFanOfSetupUpdateWithWhereUniqueWithoutSetupInputSchema,
            )
            .array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => CaseFanOfSetupUpdateManyWithWhereWithoutSetupInputSchema,
          ),
          z
            .lazy(
              () => CaseFanOfSetupUpdateManyWithWhereWithoutSetupInputSchema,
            )
            .array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => CaseFanOfSetupScalarWhereInputSchema),
          z.lazy(() => CaseFanOfSetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const UserUpdateOneRequiredWithoutSetupsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutSetupsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => UserCreateWithoutSetupsInputSchema),
          z.lazy(() => UserUncheckedCreateWithoutSetupsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => UserCreateOrConnectWithoutSetupsInputSchema)
        .optional(),
      upsert: z.lazy(() => UserUpsertWithoutSetupsInputSchema).optional(),
      connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => UserUpdateToOneWithWhereWithoutSetupsInputSchema),
          z.lazy(() => UserUpdateWithoutSetupsInputSchema),
          z.lazy(() => UserUncheckedUpdateWithoutSetupsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const MonitorsOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema: z.ZodType<Prisma.MonitorsOfSetupUncheckedUpdateManyWithoutSetupNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => MonitorsOfSetupCreateWithoutSetupInputSchema),
          z.lazy(() => MonitorsOfSetupCreateWithoutSetupInputSchema).array(),
          z.lazy(() => MonitorsOfSetupUncheckedCreateWithoutSetupInputSchema),
          z
            .lazy(() => MonitorsOfSetupUncheckedCreateWithoutSetupInputSchema)
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => MonitorsOfSetupCreateOrConnectWithoutSetupInputSchema),
          z
            .lazy(() => MonitorsOfSetupCreateOrConnectWithoutSetupInputSchema)
            .array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => MonitorsOfSetupUpsertWithWhereUniqueWithoutSetupInputSchema,
          ),
          z
            .lazy(
              () => MonitorsOfSetupUpsertWithWhereUniqueWithoutSetupInputSchema,
            )
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => MonitorsOfSetupCreateManySetupInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema),
          z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema),
          z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema),
          z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema),
          z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => MonitorsOfSetupUpdateWithWhereUniqueWithoutSetupInputSchema,
          ),
          z
            .lazy(
              () => MonitorsOfSetupUpdateWithWhereUniqueWithoutSetupInputSchema,
            )
            .array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => MonitorsOfSetupUpdateManyWithWhereWithoutSetupInputSchema,
          ),
          z
            .lazy(
              () => MonitorsOfSetupUpdateManyWithWhereWithoutSetupInputSchema,
            )
            .array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => MonitorsOfSetupScalarWhereInputSchema),
          z.lazy(() => MonitorsOfSetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SSDOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema: z.ZodType<Prisma.SSDOfSetupUncheckedUpdateManyWithoutSetupNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SSDOfSetupCreateWithoutSetupInputSchema),
          z.lazy(() => SSDOfSetupCreateWithoutSetupInputSchema).array(),
          z.lazy(() => SSDOfSetupUncheckedCreateWithoutSetupInputSchema),
          z
            .lazy(() => SSDOfSetupUncheckedCreateWithoutSetupInputSchema)
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SSDOfSetupCreateOrConnectWithoutSetupInputSchema),
          z
            .lazy(() => SSDOfSetupCreateOrConnectWithoutSetupInputSchema)
            .array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => SSDOfSetupUpsertWithWhereUniqueWithoutSetupInputSchema),
          z
            .lazy(() => SSDOfSetupUpsertWithWhereUniqueWithoutSetupInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SSDOfSetupCreateManySetupInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => SSDOfSetupWhereUniqueInputSchema),
          z.lazy(() => SSDOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => SSDOfSetupWhereUniqueInputSchema),
          z.lazy(() => SSDOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => SSDOfSetupWhereUniqueInputSchema),
          z.lazy(() => SSDOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => SSDOfSetupWhereUniqueInputSchema),
          z.lazy(() => SSDOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => SSDOfSetupUpdateWithWhereUniqueWithoutSetupInputSchema),
          z
            .lazy(() => SSDOfSetupUpdateWithWhereUniqueWithoutSetupInputSchema)
            .array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => SSDOfSetupUpdateManyWithWhereWithoutSetupInputSchema),
          z
            .lazy(() => SSDOfSetupUpdateManyWithWhereWithoutSetupInputSchema)
            .array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => SSDOfSetupScalarWhereInputSchema),
          z.lazy(() => SSDOfSetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SpeakersOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema: z.ZodType<Prisma.SpeakersOfSetupUncheckedUpdateManyWithoutSetupNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SpeakersOfSetupCreateWithoutSetupInputSchema),
          z.lazy(() => SpeakersOfSetupCreateWithoutSetupInputSchema).array(),
          z.lazy(() => SpeakersOfSetupUncheckedCreateWithoutSetupInputSchema),
          z
            .lazy(() => SpeakersOfSetupUncheckedCreateWithoutSetupInputSchema)
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SpeakersOfSetupCreateOrConnectWithoutSetupInputSchema),
          z
            .lazy(() => SpeakersOfSetupCreateOrConnectWithoutSetupInputSchema)
            .array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => SpeakersOfSetupUpsertWithWhereUniqueWithoutSetupInputSchema,
          ),
          z
            .lazy(
              () => SpeakersOfSetupUpsertWithWhereUniqueWithoutSetupInputSchema,
            )
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SpeakersOfSetupCreateManySetupInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema),
          z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema),
          z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema),
          z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema),
          z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => SpeakersOfSetupUpdateWithWhereUniqueWithoutSetupInputSchema,
          ),
          z
            .lazy(
              () => SpeakersOfSetupUpdateWithWhereUniqueWithoutSetupInputSchema,
            )
            .array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => SpeakersOfSetupUpdateManyWithWhereWithoutSetupInputSchema,
          ),
          z
            .lazy(
              () => SpeakersOfSetupUpdateManyWithWhereWithoutSetupInputSchema,
            )
            .array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => SpeakersOfSetupScalarWhereInputSchema),
          z.lazy(() => SpeakersOfSetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const CaseFanOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema: z.ZodType<Prisma.CaseFanOfSetupUncheckedUpdateManyWithoutSetupNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => CaseFanOfSetupCreateWithoutSetupInputSchema),
          z.lazy(() => CaseFanOfSetupCreateWithoutSetupInputSchema).array(),
          z.lazy(() => CaseFanOfSetupUncheckedCreateWithoutSetupInputSchema),
          z
            .lazy(() => CaseFanOfSetupUncheckedCreateWithoutSetupInputSchema)
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => CaseFanOfSetupCreateOrConnectWithoutSetupInputSchema),
          z
            .lazy(() => CaseFanOfSetupCreateOrConnectWithoutSetupInputSchema)
            .array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => CaseFanOfSetupUpsertWithWhereUniqueWithoutSetupInputSchema,
          ),
          z
            .lazy(
              () => CaseFanOfSetupUpsertWithWhereUniqueWithoutSetupInputSchema,
            )
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => CaseFanOfSetupCreateManySetupInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema),
          z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema),
          z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema),
          z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema),
          z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => CaseFanOfSetupUpdateWithWhereUniqueWithoutSetupInputSchema,
          ),
          z
            .lazy(
              () => CaseFanOfSetupUpdateWithWhereUniqueWithoutSetupInputSchema,
            )
            .array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => CaseFanOfSetupUpdateManyWithWhereWithoutSetupInputSchema,
          ),
          z
            .lazy(
              () => CaseFanOfSetupUpdateManyWithWhereWithoutSetupInputSchema,
            )
            .array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => CaseFanOfSetupScalarWhereInputSchema),
          z.lazy(() => CaseFanOfSetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SSDCreateNestedOneWithoutSetupsInputSchema: z.ZodType<Prisma.SSDCreateNestedOneWithoutSetupsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SSDCreateWithoutSetupsInputSchema),
          z.lazy(() => SSDUncheckedCreateWithoutSetupsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => SSDCreateOrConnectWithoutSetupsInputSchema)
        .optional(),
      connect: z.lazy(() => SSDWhereUniqueInputSchema).optional(),
    })
    .strict();

export const SetupCreateNestedOneWithoutSddsInputSchema: z.ZodType<Prisma.SetupCreateNestedOneWithoutSddsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutSddsInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutSddsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => SetupCreateOrConnectWithoutSddsInputSchema)
        .optional(),
      connect: z.lazy(() => SetupWhereUniqueInputSchema).optional(),
    })
    .strict();

export const SSDUpdateOneRequiredWithoutSetupsNestedInputSchema: z.ZodType<Prisma.SSDUpdateOneRequiredWithoutSetupsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SSDCreateWithoutSetupsInputSchema),
          z.lazy(() => SSDUncheckedCreateWithoutSetupsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => SSDCreateOrConnectWithoutSetupsInputSchema)
        .optional(),
      upsert: z.lazy(() => SSDUpsertWithoutSetupsInputSchema).optional(),
      connect: z.lazy(() => SSDWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => SSDUpdateToOneWithWhereWithoutSetupsInputSchema),
          z.lazy(() => SSDUpdateWithoutSetupsInputSchema),
          z.lazy(() => SSDUncheckedUpdateWithoutSetupsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const SetupUpdateOneRequiredWithoutSddsNestedInputSchema: z.ZodType<Prisma.SetupUpdateOneRequiredWithoutSddsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutSddsInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutSddsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => SetupCreateOrConnectWithoutSddsInputSchema)
        .optional(),
      upsert: z.lazy(() => SetupUpsertWithoutSddsInputSchema).optional(),
      connect: z.lazy(() => SetupWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => SetupUpdateToOneWithWhereWithoutSddsInputSchema),
          z.lazy(() => SetupUpdateWithoutSddsInputSchema),
          z.lazy(() => SetupUncheckedUpdateWithoutSddsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const CaseFanCreateNestedOneWithoutSetupsInputSchema: z.ZodType<Prisma.CaseFanCreateNestedOneWithoutSetupsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => CaseFanCreateWithoutSetupsInputSchema),
          z.lazy(() => CaseFanUncheckedCreateWithoutSetupsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => CaseFanCreateOrConnectWithoutSetupsInputSchema)
        .optional(),
      connect: z.lazy(() => CaseFanWhereUniqueInputSchema).optional(),
    })
    .strict();

export const SetupCreateNestedOneWithoutCase_fansInputSchema: z.ZodType<Prisma.SetupCreateNestedOneWithoutCase_fansInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutCase_fansInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutCase_fansInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => SetupCreateOrConnectWithoutCase_fansInputSchema)
        .optional(),
      connect: z.lazy(() => SetupWhereUniqueInputSchema).optional(),
    })
    .strict();

export const CaseFanUpdateOneRequiredWithoutSetupsNestedInputSchema: z.ZodType<Prisma.CaseFanUpdateOneRequiredWithoutSetupsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => CaseFanCreateWithoutSetupsInputSchema),
          z.lazy(() => CaseFanUncheckedCreateWithoutSetupsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => CaseFanCreateOrConnectWithoutSetupsInputSchema)
        .optional(),
      upsert: z.lazy(() => CaseFanUpsertWithoutSetupsInputSchema).optional(),
      connect: z.lazy(() => CaseFanWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => CaseFanUpdateToOneWithWhereWithoutSetupsInputSchema),
          z.lazy(() => CaseFanUpdateWithoutSetupsInputSchema),
          z.lazy(() => CaseFanUncheckedUpdateWithoutSetupsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const SetupUpdateOneRequiredWithoutCase_fansNestedInputSchema: z.ZodType<Prisma.SetupUpdateOneRequiredWithoutCase_fansNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutCase_fansInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutCase_fansInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => SetupCreateOrConnectWithoutCase_fansInputSchema)
        .optional(),
      upsert: z.lazy(() => SetupUpsertWithoutCase_fansInputSchema).optional(),
      connect: z.lazy(() => SetupWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => SetupUpdateToOneWithWhereWithoutCase_fansInputSchema),
          z.lazy(() => SetupUpdateWithoutCase_fansInputSchema),
          z.lazy(() => SetupUncheckedUpdateWithoutCase_fansInputSchema),
        ])
        .optional(),
    })
    .strict();

export const SpeakersCreateNestedOneWithoutSetupsInputSchema: z.ZodType<Prisma.SpeakersCreateNestedOneWithoutSetupsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SpeakersCreateWithoutSetupsInputSchema),
          z.lazy(() => SpeakersUncheckedCreateWithoutSetupsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => SpeakersCreateOrConnectWithoutSetupsInputSchema)
        .optional(),
      connect: z.lazy(() => SpeakersWhereUniqueInputSchema).optional(),
    })
    .strict();

export const SetupCreateNestedOneWithoutSpeakersInputSchema: z.ZodType<Prisma.SetupCreateNestedOneWithoutSpeakersInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutSpeakersInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutSpeakersInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => SetupCreateOrConnectWithoutSpeakersInputSchema)
        .optional(),
      connect: z.lazy(() => SetupWhereUniqueInputSchema).optional(),
    })
    .strict();

export const SpeakersUpdateOneRequiredWithoutSetupsNestedInputSchema: z.ZodType<Prisma.SpeakersUpdateOneRequiredWithoutSetupsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SpeakersCreateWithoutSetupsInputSchema),
          z.lazy(() => SpeakersUncheckedCreateWithoutSetupsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => SpeakersCreateOrConnectWithoutSetupsInputSchema)
        .optional(),
      upsert: z.lazy(() => SpeakersUpsertWithoutSetupsInputSchema).optional(),
      connect: z.lazy(() => SpeakersWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => SpeakersUpdateToOneWithWhereWithoutSetupsInputSchema),
          z.lazy(() => SpeakersUpdateWithoutSetupsInputSchema),
          z.lazy(() => SpeakersUncheckedUpdateWithoutSetupsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const SetupUpdateOneRequiredWithoutSpeakersNestedInputSchema: z.ZodType<Prisma.SetupUpdateOneRequiredWithoutSpeakersNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutSpeakersInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutSpeakersInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => SetupCreateOrConnectWithoutSpeakersInputSchema)
        .optional(),
      upsert: z.lazy(() => SetupUpsertWithoutSpeakersInputSchema).optional(),
      connect: z.lazy(() => SetupWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => SetupUpdateToOneWithWhereWithoutSpeakersInputSchema),
          z.lazy(() => SetupUpdateWithoutSpeakersInputSchema),
          z.lazy(() => SetupUncheckedUpdateWithoutSpeakersInputSchema),
        ])
        .optional(),
    })
    .strict();

export const MonitorCreateNestedOneWithoutSetupsInputSchema: z.ZodType<Prisma.MonitorCreateNestedOneWithoutSetupsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => MonitorCreateWithoutSetupsInputSchema),
          z.lazy(() => MonitorUncheckedCreateWithoutSetupsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => MonitorCreateOrConnectWithoutSetupsInputSchema)
        .optional(),
      connect: z.lazy(() => MonitorWhereUniqueInputSchema).optional(),
    })
    .strict();

export const SetupCreateNestedOneWithoutMonitorsInputSchema: z.ZodType<Prisma.SetupCreateNestedOneWithoutMonitorsInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutMonitorsInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutMonitorsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => SetupCreateOrConnectWithoutMonitorsInputSchema)
        .optional(),
      connect: z.lazy(() => SetupWhereUniqueInputSchema).optional(),
    })
    .strict();

export const MonitorUpdateOneRequiredWithoutSetupsNestedInputSchema: z.ZodType<Prisma.MonitorUpdateOneRequiredWithoutSetupsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => MonitorCreateWithoutSetupsInputSchema),
          z.lazy(() => MonitorUncheckedCreateWithoutSetupsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => MonitorCreateOrConnectWithoutSetupsInputSchema)
        .optional(),
      upsert: z.lazy(() => MonitorUpsertWithoutSetupsInputSchema).optional(),
      connect: z.lazy(() => MonitorWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => MonitorUpdateToOneWithWhereWithoutSetupsInputSchema),
          z.lazy(() => MonitorUpdateWithoutSetupsInputSchema),
          z.lazy(() => MonitorUncheckedUpdateWithoutSetupsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const SetupUpdateOneRequiredWithoutMonitorsNestedInputSchema: z.ZodType<Prisma.SetupUpdateOneRequiredWithoutMonitorsNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutMonitorsInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutMonitorsInputSchema),
        ])
        .optional(),
      connectOrCreate: z
        .lazy(() => SetupCreateOrConnectWithoutMonitorsInputSchema)
        .optional(),
      upsert: z.lazy(() => SetupUpsertWithoutMonitorsInputSchema).optional(),
      connect: z.lazy(() => SetupWhereUniqueInputSchema).optional(),
      update: z
        .union([
          z.lazy(() => SetupUpdateToOneWithWhereWithoutMonitorsInputSchema),
          z.lazy(() => SetupUpdateWithoutMonitorsInputSchema),
          z.lazy(() => SetupUncheckedUpdateWithoutMonitorsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const MonitorCreateresolutionInputSchema: z.ZodType<Prisma.MonitorCreateresolutionInput> =
  z
    .object({
      set: z.number().array(),
    })
    .strict();

export const MonitorsOfSetupCreateNestedManyWithoutMonitorInputSchema: z.ZodType<Prisma.MonitorsOfSetupCreateNestedManyWithoutMonitorInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => MonitorsOfSetupCreateWithoutMonitorInputSchema),
          z.lazy(() => MonitorsOfSetupCreateWithoutMonitorInputSchema).array(),
          z.lazy(() => MonitorsOfSetupUncheckedCreateWithoutMonitorInputSchema),
          z
            .lazy(() => MonitorsOfSetupUncheckedCreateWithoutMonitorInputSchema)
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => MonitorsOfSetupCreateOrConnectWithoutMonitorInputSchema),
          z
            .lazy(() => MonitorsOfSetupCreateOrConnectWithoutMonitorInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => MonitorsOfSetupCreateManyMonitorInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema),
          z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const MonitorsOfSetupUncheckedCreateNestedManyWithoutMonitorInputSchema: z.ZodType<Prisma.MonitorsOfSetupUncheckedCreateNestedManyWithoutMonitorInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => MonitorsOfSetupCreateWithoutMonitorInputSchema),
          z.lazy(() => MonitorsOfSetupCreateWithoutMonitorInputSchema).array(),
          z.lazy(() => MonitorsOfSetupUncheckedCreateWithoutMonitorInputSchema),
          z
            .lazy(() => MonitorsOfSetupUncheckedCreateWithoutMonitorInputSchema)
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => MonitorsOfSetupCreateOrConnectWithoutMonitorInputSchema),
          z
            .lazy(() => MonitorsOfSetupCreateOrConnectWithoutMonitorInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => MonitorsOfSetupCreateManyMonitorInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema),
          z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const MonitorUpdateresolutionInputSchema: z.ZodType<Prisma.MonitorUpdateresolutionInput> =
  z
    .object({
      set: z.number().array().optional(),
      push: z.union([z.number(), z.number().array()]).optional(),
    })
    .strict();

export const EnumMonitorPanelTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumMonitorPanelTypeFieldUpdateOperationsInput> =
  z
    .object({
      set: z.lazy(() => MonitorPanelTypeSchema).optional(),
    })
    .strict();

export const MonitorsOfSetupUpdateManyWithoutMonitorNestedInputSchema: z.ZodType<Prisma.MonitorsOfSetupUpdateManyWithoutMonitorNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => MonitorsOfSetupCreateWithoutMonitorInputSchema),
          z.lazy(() => MonitorsOfSetupCreateWithoutMonitorInputSchema).array(),
          z.lazy(() => MonitorsOfSetupUncheckedCreateWithoutMonitorInputSchema),
          z
            .lazy(() => MonitorsOfSetupUncheckedCreateWithoutMonitorInputSchema)
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => MonitorsOfSetupCreateOrConnectWithoutMonitorInputSchema),
          z
            .lazy(() => MonitorsOfSetupCreateOrConnectWithoutMonitorInputSchema)
            .array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => MonitorsOfSetupUpsertWithWhereUniqueWithoutMonitorInputSchema,
          ),
          z
            .lazy(
              () =>
                MonitorsOfSetupUpsertWithWhereUniqueWithoutMonitorInputSchema,
            )
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => MonitorsOfSetupCreateManyMonitorInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema),
          z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema),
          z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema),
          z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema),
          z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => MonitorsOfSetupUpdateWithWhereUniqueWithoutMonitorInputSchema,
          ),
          z
            .lazy(
              () =>
                MonitorsOfSetupUpdateWithWhereUniqueWithoutMonitorInputSchema,
            )
            .array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => MonitorsOfSetupUpdateManyWithWhereWithoutMonitorInputSchema,
          ),
          z
            .lazy(
              () => MonitorsOfSetupUpdateManyWithWhereWithoutMonitorInputSchema,
            )
            .array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => MonitorsOfSetupScalarWhereInputSchema),
          z.lazy(() => MonitorsOfSetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const MonitorsOfSetupUncheckedUpdateManyWithoutMonitorNestedInputSchema: z.ZodType<Prisma.MonitorsOfSetupUncheckedUpdateManyWithoutMonitorNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => MonitorsOfSetupCreateWithoutMonitorInputSchema),
          z.lazy(() => MonitorsOfSetupCreateWithoutMonitorInputSchema).array(),
          z.lazy(() => MonitorsOfSetupUncheckedCreateWithoutMonitorInputSchema),
          z
            .lazy(() => MonitorsOfSetupUncheckedCreateWithoutMonitorInputSchema)
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => MonitorsOfSetupCreateOrConnectWithoutMonitorInputSchema),
          z
            .lazy(() => MonitorsOfSetupCreateOrConnectWithoutMonitorInputSchema)
            .array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => MonitorsOfSetupUpsertWithWhereUniqueWithoutMonitorInputSchema,
          ),
          z
            .lazy(
              () =>
                MonitorsOfSetupUpsertWithWhereUniqueWithoutMonitorInputSchema,
            )
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => MonitorsOfSetupCreateManyMonitorInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema),
          z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema),
          z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema),
          z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema),
          z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => MonitorsOfSetupUpdateWithWhereUniqueWithoutMonitorInputSchema,
          ),
          z
            .lazy(
              () =>
                MonitorsOfSetupUpdateWithWhereUniqueWithoutMonitorInputSchema,
            )
            .array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => MonitorsOfSetupUpdateManyWithWhereWithoutMonitorInputSchema,
          ),
          z
            .lazy(
              () => MonitorsOfSetupUpdateManyWithWhereWithoutMonitorInputSchema,
            )
            .array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => MonitorsOfSetupScalarWhereInputSchema),
          z.lazy(() => MonitorsOfSetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SetupCreateNestedManyWithoutSound_cardInputSchema: z.ZodType<Prisma.SetupCreateNestedManyWithoutSound_cardInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutSound_cardInputSchema),
          z.lazy(() => SetupCreateWithoutSound_cardInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutSound_cardInputSchema),
          z
            .lazy(() => SetupUncheckedCreateWithoutSound_cardInputSchema)
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutSound_cardInputSchema),
          z
            .lazy(() => SetupCreateOrConnectWithoutSound_cardInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManySound_cardInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SetupUncheckedCreateNestedManyWithoutSound_cardInputSchema: z.ZodType<Prisma.SetupUncheckedCreateNestedManyWithoutSound_cardInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutSound_cardInputSchema),
          z.lazy(() => SetupCreateWithoutSound_cardInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutSound_cardInputSchema),
          z
            .lazy(() => SetupUncheckedCreateWithoutSound_cardInputSchema)
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutSound_cardInputSchema),
          z
            .lazy(() => SetupCreateOrConnectWithoutSound_cardInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManySound_cardInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SetupUpdateManyWithoutSound_cardNestedInputSchema: z.ZodType<Prisma.SetupUpdateManyWithoutSound_cardNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutSound_cardInputSchema),
          z.lazy(() => SetupCreateWithoutSound_cardInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutSound_cardInputSchema),
          z
            .lazy(() => SetupUncheckedCreateWithoutSound_cardInputSchema)
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutSound_cardInputSchema),
          z
            .lazy(() => SetupCreateOrConnectWithoutSound_cardInputSchema)
            .array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => SetupUpsertWithWhereUniqueWithoutSound_cardInputSchema),
          z
            .lazy(() => SetupUpsertWithWhereUniqueWithoutSound_cardInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManySound_cardInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => SetupUpdateWithWhereUniqueWithoutSound_cardInputSchema),
          z
            .lazy(() => SetupUpdateWithWhereUniqueWithoutSound_cardInputSchema)
            .array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => SetupUpdateManyWithWhereWithoutSound_cardInputSchema),
          z
            .lazy(() => SetupUpdateManyWithWhereWithoutSound_cardInputSchema)
            .array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => SetupScalarWhereInputSchema),
          z.lazy(() => SetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateManyWithoutSound_cardNestedInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateManyWithoutSound_cardNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutSound_cardInputSchema),
          z.lazy(() => SetupCreateWithoutSound_cardInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutSound_cardInputSchema),
          z
            .lazy(() => SetupUncheckedCreateWithoutSound_cardInputSchema)
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutSound_cardInputSchema),
          z
            .lazy(() => SetupCreateOrConnectWithoutSound_cardInputSchema)
            .array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => SetupUpsertWithWhereUniqueWithoutSound_cardInputSchema),
          z
            .lazy(() => SetupUpsertWithWhereUniqueWithoutSound_cardInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManySound_cardInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => SetupUpdateWithWhereUniqueWithoutSound_cardInputSchema),
          z
            .lazy(() => SetupUpdateWithWhereUniqueWithoutSound_cardInputSchema)
            .array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => SetupUpdateManyWithWhereWithoutSound_cardInputSchema),
          z
            .lazy(() => SetupUpdateManyWithWhereWithoutSound_cardInputSchema)
            .array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => SetupScalarWhereInputSchema),
          z.lazy(() => SetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const HeadphonesCreatefrequency_responseInputSchema: z.ZodType<Prisma.HeadphonesCreatefrequency_responseInput> =
  z
    .object({
      set: z.number().array(),
    })
    .strict();

export const SetupCreateNestedManyWithoutHeadphonesInputSchema: z.ZodType<Prisma.SetupCreateNestedManyWithoutHeadphonesInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutHeadphonesInputSchema),
          z.lazy(() => SetupCreateWithoutHeadphonesInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutHeadphonesInputSchema),
          z
            .lazy(() => SetupUncheckedCreateWithoutHeadphonesInputSchema)
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutHeadphonesInputSchema),
          z
            .lazy(() => SetupCreateOrConnectWithoutHeadphonesInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyHeadphonesInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SetupUncheckedCreateNestedManyWithoutHeadphonesInputSchema: z.ZodType<Prisma.SetupUncheckedCreateNestedManyWithoutHeadphonesInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutHeadphonesInputSchema),
          z.lazy(() => SetupCreateWithoutHeadphonesInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutHeadphonesInputSchema),
          z
            .lazy(() => SetupUncheckedCreateWithoutHeadphonesInputSchema)
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutHeadphonesInputSchema),
          z
            .lazy(() => SetupCreateOrConnectWithoutHeadphonesInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyHeadphonesInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const EnumHeadphoneTypesFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumHeadphoneTypesFieldUpdateOperationsInput> =
  z
    .object({
      set: z.lazy(() => HeadphoneTypesSchema).optional(),
    })
    .strict();

export const HeadphonesUpdatefrequency_responseInputSchema: z.ZodType<Prisma.HeadphonesUpdatefrequency_responseInput> =
  z
    .object({
      set: z.number().array().optional(),
      push: z.union([z.number(), z.number().array()]).optional(),
    })
    .strict();

export const EnumEnclosureTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumEnclosureTypeFieldUpdateOperationsInput> =
  z
    .object({
      set: z.lazy(() => EnclosureTypeSchema).optional(),
    })
    .strict();

export const SetupUpdateManyWithoutHeadphonesNestedInputSchema: z.ZodType<Prisma.SetupUpdateManyWithoutHeadphonesNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutHeadphonesInputSchema),
          z.lazy(() => SetupCreateWithoutHeadphonesInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutHeadphonesInputSchema),
          z
            .lazy(() => SetupUncheckedCreateWithoutHeadphonesInputSchema)
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutHeadphonesInputSchema),
          z
            .lazy(() => SetupCreateOrConnectWithoutHeadphonesInputSchema)
            .array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => SetupUpsertWithWhereUniqueWithoutHeadphonesInputSchema),
          z
            .lazy(() => SetupUpsertWithWhereUniqueWithoutHeadphonesInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyHeadphonesInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => SetupUpdateWithWhereUniqueWithoutHeadphonesInputSchema),
          z
            .lazy(() => SetupUpdateWithWhereUniqueWithoutHeadphonesInputSchema)
            .array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => SetupUpdateManyWithWhereWithoutHeadphonesInputSchema),
          z
            .lazy(() => SetupUpdateManyWithWhereWithoutHeadphonesInputSchema)
            .array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => SetupScalarWhereInputSchema),
          z.lazy(() => SetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateManyWithoutHeadphonesNestedInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateManyWithoutHeadphonesNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutHeadphonesInputSchema),
          z.lazy(() => SetupCreateWithoutHeadphonesInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutHeadphonesInputSchema),
          z
            .lazy(() => SetupUncheckedCreateWithoutHeadphonesInputSchema)
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutHeadphonesInputSchema),
          z
            .lazy(() => SetupCreateOrConnectWithoutHeadphonesInputSchema)
            .array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => SetupUpsertWithWhereUniqueWithoutHeadphonesInputSchema),
          z
            .lazy(() => SetupUpsertWithWhereUniqueWithoutHeadphonesInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyHeadphonesInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => SetupUpdateWithWhereUniqueWithoutHeadphonesInputSchema),
          z
            .lazy(() => SetupUpdateWithWhereUniqueWithoutHeadphonesInputSchema)
            .array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => SetupUpdateManyWithWhereWithoutHeadphonesInputSchema),
          z
            .lazy(() => SetupUpdateManyWithWhereWithoutHeadphonesInputSchema)
            .array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => SetupScalarWhereInputSchema),
          z.lazy(() => SetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SetupCreateNestedManyWithoutKeyboardInputSchema: z.ZodType<Prisma.SetupCreateNestedManyWithoutKeyboardInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutKeyboardInputSchema),
          z.lazy(() => SetupCreateWithoutKeyboardInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutKeyboardInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutKeyboardInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutKeyboardInputSchema),
          z.lazy(() => SetupCreateOrConnectWithoutKeyboardInputSchema).array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyKeyboardInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SetupUncheckedCreateNestedManyWithoutKeyboardInputSchema: z.ZodType<Prisma.SetupUncheckedCreateNestedManyWithoutKeyboardInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutKeyboardInputSchema),
          z.lazy(() => SetupCreateWithoutKeyboardInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutKeyboardInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutKeyboardInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutKeyboardInputSchema),
          z.lazy(() => SetupCreateOrConnectWithoutKeyboardInputSchema).array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyKeyboardInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const EnumKeyboardStyleFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumKeyboardStyleFieldUpdateOperationsInput> =
  z
    .object({
      set: z.lazy(() => KeyboardStyleSchema).optional(),
    })
    .strict();

export const EnumConnectionTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumConnectionTypeFieldUpdateOperationsInput> =
  z
    .object({
      set: z.lazy(() => ConnectionTypeSchema).optional(),
    })
    .strict();

export const SetupUpdateManyWithoutKeyboardNestedInputSchema: z.ZodType<Prisma.SetupUpdateManyWithoutKeyboardNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutKeyboardInputSchema),
          z.lazy(() => SetupCreateWithoutKeyboardInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutKeyboardInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutKeyboardInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutKeyboardInputSchema),
          z.lazy(() => SetupCreateOrConnectWithoutKeyboardInputSchema).array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => SetupUpsertWithWhereUniqueWithoutKeyboardInputSchema),
          z
            .lazy(() => SetupUpsertWithWhereUniqueWithoutKeyboardInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyKeyboardInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => SetupUpdateWithWhereUniqueWithoutKeyboardInputSchema),
          z
            .lazy(() => SetupUpdateWithWhereUniqueWithoutKeyboardInputSchema)
            .array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => SetupUpdateManyWithWhereWithoutKeyboardInputSchema),
          z
            .lazy(() => SetupUpdateManyWithWhereWithoutKeyboardInputSchema)
            .array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => SetupScalarWhereInputSchema),
          z.lazy(() => SetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateManyWithoutKeyboardNestedInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateManyWithoutKeyboardNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutKeyboardInputSchema),
          z.lazy(() => SetupCreateWithoutKeyboardInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutKeyboardInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutKeyboardInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutKeyboardInputSchema),
          z.lazy(() => SetupCreateOrConnectWithoutKeyboardInputSchema).array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => SetupUpsertWithWhereUniqueWithoutKeyboardInputSchema),
          z
            .lazy(() => SetupUpsertWithWhereUniqueWithoutKeyboardInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyKeyboardInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => SetupUpdateWithWhereUniqueWithoutKeyboardInputSchema),
          z
            .lazy(() => SetupUpdateWithWhereUniqueWithoutKeyboardInputSchema)
            .array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => SetupUpdateManyWithWhereWithoutKeyboardInputSchema),
          z
            .lazy(() => SetupUpdateManyWithWhereWithoutKeyboardInputSchema)
            .array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => SetupScalarWhereInputSchema),
          z.lazy(() => SetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SetupCreateNestedManyWithoutMouseInputSchema: z.ZodType<Prisma.SetupCreateNestedManyWithoutMouseInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutMouseInputSchema),
          z.lazy(() => SetupCreateWithoutMouseInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutMouseInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutMouseInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutMouseInputSchema),
          z.lazy(() => SetupCreateOrConnectWithoutMouseInputSchema).array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyMouseInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SetupUncheckedCreateNestedManyWithoutMouseInputSchema: z.ZodType<Prisma.SetupUncheckedCreateNestedManyWithoutMouseInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutMouseInputSchema),
          z.lazy(() => SetupCreateWithoutMouseInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutMouseInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutMouseInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutMouseInputSchema),
          z.lazy(() => SetupCreateOrConnectWithoutMouseInputSchema).array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyMouseInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const EnumMouseTrackMethodFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumMouseTrackMethodFieldUpdateOperationsInput> =
  z
    .object({
      set: z.lazy(() => MouseTrackMethodSchema).optional(),
    })
    .strict();

export const EnumMouseOrientationFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumMouseOrientationFieldUpdateOperationsInput> =
  z
    .object({
      set: z.lazy(() => MouseOrientationSchema).optional(),
    })
    .strict();

export const SetupUpdateManyWithoutMouseNestedInputSchema: z.ZodType<Prisma.SetupUpdateManyWithoutMouseNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutMouseInputSchema),
          z.lazy(() => SetupCreateWithoutMouseInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutMouseInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutMouseInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutMouseInputSchema),
          z.lazy(() => SetupCreateOrConnectWithoutMouseInputSchema).array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => SetupUpsertWithWhereUniqueWithoutMouseInputSchema),
          z
            .lazy(() => SetupUpsertWithWhereUniqueWithoutMouseInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyMouseInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => SetupUpdateWithWhereUniqueWithoutMouseInputSchema),
          z
            .lazy(() => SetupUpdateWithWhereUniqueWithoutMouseInputSchema)
            .array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => SetupUpdateManyWithWhereWithoutMouseInputSchema),
          z.lazy(() => SetupUpdateManyWithWhereWithoutMouseInputSchema).array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => SetupScalarWhereInputSchema),
          z.lazy(() => SetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateManyWithoutMouseNestedInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateManyWithoutMouseNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutMouseInputSchema),
          z.lazy(() => SetupCreateWithoutMouseInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutMouseInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutMouseInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutMouseInputSchema),
          z.lazy(() => SetupCreateOrConnectWithoutMouseInputSchema).array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => SetupUpsertWithWhereUniqueWithoutMouseInputSchema),
          z
            .lazy(() => SetupUpsertWithWhereUniqueWithoutMouseInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyMouseInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => SetupUpdateWithWhereUniqueWithoutMouseInputSchema),
          z
            .lazy(() => SetupUpdateWithWhereUniqueWithoutMouseInputSchema)
            .array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => SetupUpdateManyWithWhereWithoutMouseInputSchema),
          z.lazy(() => SetupUpdateManyWithWhereWithoutMouseInputSchema).array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => SetupScalarWhereInputSchema),
          z.lazy(() => SetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SpeakersOfSetupCreateNestedManyWithoutSpeakersInputSchema: z.ZodType<Prisma.SpeakersOfSetupCreateNestedManyWithoutSpeakersInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SpeakersOfSetupCreateWithoutSpeakersInputSchema),
          z.lazy(() => SpeakersOfSetupCreateWithoutSpeakersInputSchema).array(),
          z.lazy(
            () => SpeakersOfSetupUncheckedCreateWithoutSpeakersInputSchema,
          ),
          z
            .lazy(
              () => SpeakersOfSetupUncheckedCreateWithoutSpeakersInputSchema,
            )
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(
            () => SpeakersOfSetupCreateOrConnectWithoutSpeakersInputSchema,
          ),
          z
            .lazy(
              () => SpeakersOfSetupCreateOrConnectWithoutSpeakersInputSchema,
            )
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SpeakersOfSetupCreateManySpeakersInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema),
          z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SpeakersOfSetupUncheckedCreateNestedManyWithoutSpeakersInputSchema: z.ZodType<Prisma.SpeakersOfSetupUncheckedCreateNestedManyWithoutSpeakersInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SpeakersOfSetupCreateWithoutSpeakersInputSchema),
          z.lazy(() => SpeakersOfSetupCreateWithoutSpeakersInputSchema).array(),
          z.lazy(
            () => SpeakersOfSetupUncheckedCreateWithoutSpeakersInputSchema,
          ),
          z
            .lazy(
              () => SpeakersOfSetupUncheckedCreateWithoutSpeakersInputSchema,
            )
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(
            () => SpeakersOfSetupCreateOrConnectWithoutSpeakersInputSchema,
          ),
          z
            .lazy(
              () => SpeakersOfSetupCreateOrConnectWithoutSpeakersInputSchema,
            )
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SpeakersOfSetupCreateManySpeakersInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema),
          z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SpeakersOfSetupUpdateManyWithoutSpeakersNestedInputSchema: z.ZodType<Prisma.SpeakersOfSetupUpdateManyWithoutSpeakersNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SpeakersOfSetupCreateWithoutSpeakersInputSchema),
          z.lazy(() => SpeakersOfSetupCreateWithoutSpeakersInputSchema).array(),
          z.lazy(
            () => SpeakersOfSetupUncheckedCreateWithoutSpeakersInputSchema,
          ),
          z
            .lazy(
              () => SpeakersOfSetupUncheckedCreateWithoutSpeakersInputSchema,
            )
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(
            () => SpeakersOfSetupCreateOrConnectWithoutSpeakersInputSchema,
          ),
          z
            .lazy(
              () => SpeakersOfSetupCreateOrConnectWithoutSpeakersInputSchema,
            )
            .array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () =>
              SpeakersOfSetupUpsertWithWhereUniqueWithoutSpeakersInputSchema,
          ),
          z
            .lazy(
              () =>
                SpeakersOfSetupUpsertWithWhereUniqueWithoutSpeakersInputSchema,
            )
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SpeakersOfSetupCreateManySpeakersInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema),
          z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema),
          z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema),
          z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema),
          z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () =>
              SpeakersOfSetupUpdateWithWhereUniqueWithoutSpeakersInputSchema,
          ),
          z
            .lazy(
              () =>
                SpeakersOfSetupUpdateWithWhereUniqueWithoutSpeakersInputSchema,
            )
            .array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => SpeakersOfSetupUpdateManyWithWhereWithoutSpeakersInputSchema,
          ),
          z
            .lazy(
              () =>
                SpeakersOfSetupUpdateManyWithWhereWithoutSpeakersInputSchema,
            )
            .array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => SpeakersOfSetupScalarWhereInputSchema),
          z.lazy(() => SpeakersOfSetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SpeakersOfSetupUncheckedUpdateManyWithoutSpeakersNestedInputSchema: z.ZodType<Prisma.SpeakersOfSetupUncheckedUpdateManyWithoutSpeakersNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SpeakersOfSetupCreateWithoutSpeakersInputSchema),
          z.lazy(() => SpeakersOfSetupCreateWithoutSpeakersInputSchema).array(),
          z.lazy(
            () => SpeakersOfSetupUncheckedCreateWithoutSpeakersInputSchema,
          ),
          z
            .lazy(
              () => SpeakersOfSetupUncheckedCreateWithoutSpeakersInputSchema,
            )
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(
            () => SpeakersOfSetupCreateOrConnectWithoutSpeakersInputSchema,
          ),
          z
            .lazy(
              () => SpeakersOfSetupCreateOrConnectWithoutSpeakersInputSchema,
            )
            .array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () =>
              SpeakersOfSetupUpsertWithWhereUniqueWithoutSpeakersInputSchema,
          ),
          z
            .lazy(
              () =>
                SpeakersOfSetupUpsertWithWhereUniqueWithoutSpeakersInputSchema,
            )
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SpeakersOfSetupCreateManySpeakersInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema),
          z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema),
          z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema),
          z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema),
          z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () =>
              SpeakersOfSetupUpdateWithWhereUniqueWithoutSpeakersInputSchema,
          ),
          z
            .lazy(
              () =>
                SpeakersOfSetupUpdateWithWhereUniqueWithoutSpeakersInputSchema,
            )
            .array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => SpeakersOfSetupUpdateManyWithWhereWithoutSpeakersInputSchema,
          ),
          z
            .lazy(
              () =>
                SpeakersOfSetupUpdateManyWithWhereWithoutSpeakersInputSchema,
            )
            .array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => SpeakersOfSetupScalarWhereInputSchema),
          z.lazy(() => SpeakersOfSetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const WebcamCreateresolutionsInputSchema: z.ZodType<Prisma.WebcamCreateresolutionsInput> =
  z
    .object({
      set: z.string().array(),
    })
    .strict();

export const WebcamCreateosInputSchema: z.ZodType<Prisma.WebcamCreateosInput> =
  z
    .object({
      set: z.string().array(),
    })
    .strict();

export const SetupCreateNestedManyWithoutWebcamInputSchema: z.ZodType<Prisma.SetupCreateNestedManyWithoutWebcamInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutWebcamInputSchema),
          z.lazy(() => SetupCreateWithoutWebcamInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutWebcamInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutWebcamInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutWebcamInputSchema),
          z.lazy(() => SetupCreateOrConnectWithoutWebcamInputSchema).array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyWebcamInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SetupUncheckedCreateNestedManyWithoutWebcamInputSchema: z.ZodType<Prisma.SetupUncheckedCreateNestedManyWithoutWebcamInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutWebcamInputSchema),
          z.lazy(() => SetupCreateWithoutWebcamInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutWebcamInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutWebcamInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutWebcamInputSchema),
          z.lazy(() => SetupCreateOrConnectWithoutWebcamInputSchema).array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyWebcamInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const WebcamUpdateresolutionsInputSchema: z.ZodType<Prisma.WebcamUpdateresolutionsInput> =
  z
    .object({
      set: z.string().array().optional(),
      push: z.union([z.string(), z.string().array()]).optional(),
    })
    .strict();

export const EnumFocusTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumFocusTypeFieldUpdateOperationsInput> =
  z
    .object({
      set: z.lazy(() => FocusTypeSchema).optional(),
    })
    .strict();

export const WebcamUpdateosInputSchema: z.ZodType<Prisma.WebcamUpdateosInput> =
  z
    .object({
      set: z.string().array().optional(),
      push: z.union([z.string(), z.string().array()]).optional(),
    })
    .strict();

export const SetupUpdateManyWithoutWebcamNestedInputSchema: z.ZodType<Prisma.SetupUpdateManyWithoutWebcamNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutWebcamInputSchema),
          z.lazy(() => SetupCreateWithoutWebcamInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutWebcamInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutWebcamInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutWebcamInputSchema),
          z.lazy(() => SetupCreateOrConnectWithoutWebcamInputSchema).array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => SetupUpsertWithWhereUniqueWithoutWebcamInputSchema),
          z
            .lazy(() => SetupUpsertWithWhereUniqueWithoutWebcamInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyWebcamInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => SetupUpdateWithWhereUniqueWithoutWebcamInputSchema),
          z
            .lazy(() => SetupUpdateWithWhereUniqueWithoutWebcamInputSchema)
            .array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => SetupUpdateManyWithWhereWithoutWebcamInputSchema),
          z
            .lazy(() => SetupUpdateManyWithWhereWithoutWebcamInputSchema)
            .array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => SetupScalarWhereInputSchema),
          z.lazy(() => SetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateManyWithoutWebcamNestedInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateManyWithoutWebcamNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => SetupCreateWithoutWebcamInputSchema),
          z.lazy(() => SetupCreateWithoutWebcamInputSchema).array(),
          z.lazy(() => SetupUncheckedCreateWithoutWebcamInputSchema),
          z.lazy(() => SetupUncheckedCreateWithoutWebcamInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => SetupCreateOrConnectWithoutWebcamInputSchema),
          z.lazy(() => SetupCreateOrConnectWithoutWebcamInputSchema).array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(() => SetupUpsertWithWhereUniqueWithoutWebcamInputSchema),
          z
            .lazy(() => SetupUpsertWithWhereUniqueWithoutWebcamInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => SetupCreateManyWebcamInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => SetupWhereUniqueInputSchema),
          z.lazy(() => SetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(() => SetupUpdateWithWhereUniqueWithoutWebcamInputSchema),
          z
            .lazy(() => SetupUpdateWithWhereUniqueWithoutWebcamInputSchema)
            .array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(() => SetupUpdateManyWithWhereWithoutWebcamInputSchema),
          z
            .lazy(() => SetupUpdateManyWithWhereWithoutWebcamInputSchema)
            .array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => SetupScalarWhereInputSchema),
          z.lazy(() => SetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const CaseFanCreaterpmInputSchema: z.ZodType<Prisma.CaseFanCreaterpmInput> =
  z
    .object({
      set: z.number().array(),
    })
    .strict();

export const CaseFanCreateairflowInputSchema: z.ZodType<Prisma.CaseFanCreateairflowInput> =
  z
    .object({
      set: z.number().array(),
    })
    .strict();

export const CaseFanOfSetupCreateNestedManyWithoutCase_fanInputSchema: z.ZodType<Prisma.CaseFanOfSetupCreateNestedManyWithoutCase_fanInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => CaseFanOfSetupCreateWithoutCase_fanInputSchema),
          z.lazy(() => CaseFanOfSetupCreateWithoutCase_fanInputSchema).array(),
          z.lazy(() => CaseFanOfSetupUncheckedCreateWithoutCase_fanInputSchema),
          z
            .lazy(() => CaseFanOfSetupUncheckedCreateWithoutCase_fanInputSchema)
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => CaseFanOfSetupCreateOrConnectWithoutCase_fanInputSchema),
          z
            .lazy(() => CaseFanOfSetupCreateOrConnectWithoutCase_fanInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => CaseFanOfSetupCreateManyCase_fanInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema),
          z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const CaseFanOfSetupUncheckedCreateNestedManyWithoutCase_fanInputSchema: z.ZodType<Prisma.CaseFanOfSetupUncheckedCreateNestedManyWithoutCase_fanInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => CaseFanOfSetupCreateWithoutCase_fanInputSchema),
          z.lazy(() => CaseFanOfSetupCreateWithoutCase_fanInputSchema).array(),
          z.lazy(() => CaseFanOfSetupUncheckedCreateWithoutCase_fanInputSchema),
          z
            .lazy(() => CaseFanOfSetupUncheckedCreateWithoutCase_fanInputSchema)
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => CaseFanOfSetupCreateOrConnectWithoutCase_fanInputSchema),
          z
            .lazy(() => CaseFanOfSetupCreateOrConnectWithoutCase_fanInputSchema)
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => CaseFanOfSetupCreateManyCase_fanInputEnvelopeSchema)
        .optional(),
      connect: z
        .union([
          z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema),
          z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const CaseFanUpdaterpmInputSchema: z.ZodType<Prisma.CaseFanUpdaterpmInput> =
  z
    .object({
      set: z.number().array().optional(),
      push: z.union([z.number(), z.number().array()]).optional(),
    })
    .strict();

export const CaseFanUpdateairflowInputSchema: z.ZodType<Prisma.CaseFanUpdateairflowInput> =
  z
    .object({
      set: z.number().array().optional(),
      push: z.union([z.number(), z.number().array()]).optional(),
    })
    .strict();

export const CaseFanOfSetupUpdateManyWithoutCase_fanNestedInputSchema: z.ZodType<Prisma.CaseFanOfSetupUpdateManyWithoutCase_fanNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => CaseFanOfSetupCreateWithoutCase_fanInputSchema),
          z.lazy(() => CaseFanOfSetupCreateWithoutCase_fanInputSchema).array(),
          z.lazy(() => CaseFanOfSetupUncheckedCreateWithoutCase_fanInputSchema),
          z
            .lazy(() => CaseFanOfSetupUncheckedCreateWithoutCase_fanInputSchema)
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => CaseFanOfSetupCreateOrConnectWithoutCase_fanInputSchema),
          z
            .lazy(() => CaseFanOfSetupCreateOrConnectWithoutCase_fanInputSchema)
            .array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => CaseFanOfSetupUpsertWithWhereUniqueWithoutCase_fanInputSchema,
          ),
          z
            .lazy(
              () =>
                CaseFanOfSetupUpsertWithWhereUniqueWithoutCase_fanInputSchema,
            )
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => CaseFanOfSetupCreateManyCase_fanInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema),
          z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema),
          z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema),
          z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema),
          z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => CaseFanOfSetupUpdateWithWhereUniqueWithoutCase_fanInputSchema,
          ),
          z
            .lazy(
              () =>
                CaseFanOfSetupUpdateWithWhereUniqueWithoutCase_fanInputSchema,
            )
            .array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => CaseFanOfSetupUpdateManyWithWhereWithoutCase_fanInputSchema,
          ),
          z
            .lazy(
              () => CaseFanOfSetupUpdateManyWithWhereWithoutCase_fanInputSchema,
            )
            .array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => CaseFanOfSetupScalarWhereInputSchema),
          z.lazy(() => CaseFanOfSetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const CaseFanOfSetupUncheckedUpdateManyWithoutCase_fanNestedInputSchema: z.ZodType<Prisma.CaseFanOfSetupUncheckedUpdateManyWithoutCase_fanNestedInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => CaseFanOfSetupCreateWithoutCase_fanInputSchema),
          z.lazy(() => CaseFanOfSetupCreateWithoutCase_fanInputSchema).array(),
          z.lazy(() => CaseFanOfSetupUncheckedCreateWithoutCase_fanInputSchema),
          z
            .lazy(() => CaseFanOfSetupUncheckedCreateWithoutCase_fanInputSchema)
            .array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => CaseFanOfSetupCreateOrConnectWithoutCase_fanInputSchema),
          z
            .lazy(() => CaseFanOfSetupCreateOrConnectWithoutCase_fanInputSchema)
            .array(),
        ])
        .optional(),
      upsert: z
        .union([
          z.lazy(
            () => CaseFanOfSetupUpsertWithWhereUniqueWithoutCase_fanInputSchema,
          ),
          z
            .lazy(
              () =>
                CaseFanOfSetupUpsertWithWhereUniqueWithoutCase_fanInputSchema,
            )
            .array(),
        ])
        .optional(),
      createMany: z
        .lazy(() => CaseFanOfSetupCreateManyCase_fanInputEnvelopeSchema)
        .optional(),
      set: z
        .union([
          z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema),
          z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      disconnect: z
        .union([
          z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema),
          z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      delete: z
        .union([
          z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema),
          z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      connect: z
        .union([
          z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema),
          z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema).array(),
        ])
        .optional(),
      update: z
        .union([
          z.lazy(
            () => CaseFanOfSetupUpdateWithWhereUniqueWithoutCase_fanInputSchema,
          ),
          z
            .lazy(
              () =>
                CaseFanOfSetupUpdateWithWhereUniqueWithoutCase_fanInputSchema,
            )
            .array(),
        ])
        .optional(),
      updateMany: z
        .union([
          z.lazy(
            () => CaseFanOfSetupUpdateManyWithWhereWithoutCase_fanInputSchema,
          ),
          z
            .lazy(
              () => CaseFanOfSetupUpdateManyWithWhereWithoutCase_fanInputSchema,
            )
            .array(),
        ])
        .optional(),
      deleteMany: z
        .union([
          z.lazy(() => CaseFanOfSetupScalarWhereInputSchema),
          z.lazy(() => CaseFanOfSetupScalarWhereInputSchema).array(),
        ])
        .optional(),
    })
    .strict();

export const NestedStringFilterSchema: z.ZodType<Prisma.NestedStringFilter> = z
  .object({
    equals: z.string().optional(),
    in: z.string().array().optional(),
    notIn: z.string().array().optional(),
    lt: z.string().optional(),
    lte: z.string().optional(),
    gt: z.string().optional(),
    gte: z.string().optional(),
    contains: z.string().optional(),
    startsWith: z.string().optional(),
    endsWith: z.string().optional(),
    not: z
      .union([z.string(), z.lazy(() => NestedStringFilterSchema)])
      .optional(),
  })
  .strict();

export const NestedStringNullableFilterSchema: z.ZodType<Prisma.NestedStringNullableFilter> =
  z
    .object({
      equals: z.string().optional().nullable(),
      in: z.string().array().optional().nullable(),
      notIn: z.string().array().optional().nullable(),
      lt: z.string().optional(),
      lte: z.string().optional(),
      gt: z.string().optional(),
      gte: z.string().optional(),
      contains: z.string().optional(),
      startsWith: z.string().optional(),
      endsWith: z.string().optional(),
      not: z
        .union([z.string(), z.lazy(() => NestedStringNullableFilterSchema)])
        .optional()
        .nullable(),
    })
    .strict();

export const NestedIntNullableFilterSchema: z.ZodType<Prisma.NestedIntNullableFilter> =
  z
    .object({
      equals: z.number().optional().nullable(),
      in: z.number().array().optional().nullable(),
      notIn: z.number().array().optional().nullable(),
      lt: z.number().optional(),
      lte: z.number().optional(),
      gt: z.number().optional(),
      gte: z.number().optional(),
      not: z
        .union([z.number(), z.lazy(() => NestedIntNullableFilterSchema)])
        .optional()
        .nullable(),
    })
    .strict();

export const NestedStringWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringWithAggregatesFilter> =
  z
    .object({
      equals: z.string().optional(),
      in: z.string().array().optional(),
      notIn: z.string().array().optional(),
      lt: z.string().optional(),
      lte: z.string().optional(),
      gt: z.string().optional(),
      gte: z.string().optional(),
      contains: z.string().optional(),
      startsWith: z.string().optional(),
      endsWith: z.string().optional(),
      not: z
        .union([
          z.string(),
          z.lazy(() => NestedStringWithAggregatesFilterSchema),
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedStringFilterSchema).optional(),
      _max: z.lazy(() => NestedStringFilterSchema).optional(),
    })
    .strict();

export const NestedIntFilterSchema: z.ZodType<Prisma.NestedIntFilter> = z
  .object({
    equals: z.number().optional(),
    in: z.number().array().optional(),
    notIn: z.number().array().optional(),
    lt: z.number().optional(),
    lte: z.number().optional(),
    gt: z.number().optional(),
    gte: z.number().optional(),
    not: z.union([z.number(), z.lazy(() => NestedIntFilterSchema)]).optional(),
  })
  .strict();

export const NestedStringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringNullableWithAggregatesFilter> =
  z
    .object({
      equals: z.string().optional().nullable(),
      in: z.string().array().optional().nullable(),
      notIn: z.string().array().optional().nullable(),
      lt: z.string().optional(),
      lte: z.string().optional(),
      gt: z.string().optional(),
      gte: z.string().optional(),
      contains: z.string().optional(),
      startsWith: z.string().optional(),
      endsWith: z.string().optional(),
      not: z
        .union([
          z.string(),
          z.lazy(() => NestedStringNullableWithAggregatesFilterSchema),
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
      _max: z.lazy(() => NestedStringNullableFilterSchema).optional(),
    })
    .strict();

export const NestedIntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntNullableWithAggregatesFilter> =
  z
    .object({
      equals: z.number().optional().nullable(),
      in: z.number().array().optional().nullable(),
      notIn: z.number().array().optional().nullable(),
      lt: z.number().optional(),
      lte: z.number().optional(),
      gt: z.number().optional(),
      gte: z.number().optional(),
      not: z
        .union([
          z.number(),
          z.lazy(() => NestedIntNullableWithAggregatesFilterSchema),
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
      _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _max: z.lazy(() => NestedIntNullableFilterSchema).optional(),
    })
    .strict();

export const NestedFloatNullableFilterSchema: z.ZodType<Prisma.NestedFloatNullableFilter> =
  z
    .object({
      equals: z.number().optional().nullable(),
      in: z.number().array().optional().nullable(),
      notIn: z.number().array().optional().nullable(),
      lt: z.number().optional(),
      lte: z.number().optional(),
      gt: z.number().optional(),
      gte: z.number().optional(),
      not: z
        .union([z.number(), z.lazy(() => NestedFloatNullableFilterSchema)])
        .optional()
        .nullable(),
    })
    .strict();

export const NestedDateTimeFilterSchema: z.ZodType<Prisma.NestedDateTimeFilter> =
  z
    .object({
      equals: z.coerce.date().optional(),
      in: z.coerce.date().array().optional(),
      notIn: z.coerce.date().array().optional(),
      lt: z.coerce.date().optional(),
      lte: z.coerce.date().optional(),
      gt: z.coerce.date().optional(),
      gte: z.coerce.date().optional(),
      not: z
        .union([z.coerce.date(), z.lazy(() => NestedDateTimeFilterSchema)])
        .optional(),
    })
    .strict();

export const NestedDateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeWithAggregatesFilter> =
  z
    .object({
      equals: z.coerce.date().optional(),
      in: z.coerce.date().array().optional(),
      notIn: z.coerce.date().array().optional(),
      lt: z.coerce.date().optional(),
      lte: z.coerce.date().optional(),
      gt: z.coerce.date().optional(),
      gte: z.coerce.date().optional(),
      not: z
        .union([
          z.coerce.date(),
          z.lazy(() => NestedDateTimeWithAggregatesFilterSchema),
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
      _max: z.lazy(() => NestedDateTimeFilterSchema).optional(),
    })
    .strict();

export const NestedDateTimeNullableFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableFilter> =
  z
    .object({
      equals: z.coerce.date().optional().nullable(),
      in: z.coerce.date().array().optional().nullable(),
      notIn: z.coerce.date().array().optional().nullable(),
      lt: z.coerce.date().optional(),
      lte: z.coerce.date().optional(),
      gt: z.coerce.date().optional(),
      gte: z.coerce.date().optional(),
      not: z
        .union([
          z.coerce.date(),
          z.lazy(() => NestedDateTimeNullableFilterSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const NestedEnumUserRoleFilterSchema: z.ZodType<Prisma.NestedEnumUserRoleFilter> =
  z
    .object({
      equals: z.lazy(() => UserRoleSchema).optional(),
      in: z
        .lazy(() => UserRoleSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => UserRoleSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => UserRoleSchema),
          z.lazy(() => NestedEnumUserRoleFilterSchema),
        ])
        .optional(),
    })
    .strict();

export const NestedDateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableWithAggregatesFilter> =
  z
    .object({
      equals: z.coerce.date().optional().nullable(),
      in: z.coerce.date().array().optional().nullable(),
      notIn: z.coerce.date().array().optional().nullable(),
      lt: z.coerce.date().optional(),
      lte: z.coerce.date().optional(),
      gt: z.coerce.date().optional(),
      gte: z.coerce.date().optional(),
      not: z
        .union([
          z.coerce.date(),
          z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema),
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
      _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
    })
    .strict();

export const NestedEnumUserRoleWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumUserRoleWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => UserRoleSchema).optional(),
      in: z
        .lazy(() => UserRoleSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => UserRoleSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => UserRoleSchema),
          z.lazy(() => NestedEnumUserRoleWithAggregatesFilterSchema),
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumUserRoleFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumUserRoleFilterSchema).optional(),
    })
    .strict();

export const NestedIntWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntWithAggregatesFilter> =
  z
    .object({
      equals: z.number().optional(),
      in: z.number().array().optional(),
      notIn: z.number().array().optional(),
      lt: z.number().optional(),
      lte: z.number().optional(),
      gt: z.number().optional(),
      gte: z.number().optional(),
      not: z
        .union([z.number(), z.lazy(() => NestedIntWithAggregatesFilterSchema)])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
      _sum: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedIntFilterSchema).optional(),
      _max: z.lazy(() => NestedIntFilterSchema).optional(),
    })
    .strict();

export const NestedFloatFilterSchema: z.ZodType<Prisma.NestedFloatFilter> = z
  .object({
    equals: z.number().optional(),
    in: z.number().array().optional(),
    notIn: z.number().array().optional(),
    lt: z.number().optional(),
    lte: z.number().optional(),
    gt: z.number().optional(),
    gte: z.number().optional(),
    not: z
      .union([z.number(), z.lazy(() => NestedFloatFilterSchema)])
      .optional(),
  })
  .strict();

export const NestedBoolNullableFilterSchema: z.ZodType<Prisma.NestedBoolNullableFilter> =
  z
    .object({
      equals: z.boolean().optional().nullable(),
      not: z
        .union([z.boolean(), z.lazy(() => NestedBoolNullableFilterSchema)])
        .optional()
        .nullable(),
    })
    .strict();

export const NestedFloatWithAggregatesFilterSchema: z.ZodType<Prisma.NestedFloatWithAggregatesFilter> =
  z
    .object({
      equals: z.number().optional(),
      in: z.number().array().optional(),
      notIn: z.number().array().optional(),
      lt: z.number().optional(),
      lte: z.number().optional(),
      gt: z.number().optional(),
      gte: z.number().optional(),
      not: z
        .union([
          z.number(),
          z.lazy(() => NestedFloatWithAggregatesFilterSchema),
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
      _sum: z.lazy(() => NestedFloatFilterSchema).optional(),
      _min: z.lazy(() => NestedFloatFilterSchema).optional(),
      _max: z.lazy(() => NestedFloatFilterSchema).optional(),
    })
    .strict();

export const NestedBoolNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBoolNullableWithAggregatesFilter> =
  z
    .object({
      equals: z.boolean().optional().nullable(),
      not: z
        .union([
          z.boolean(),
          z.lazy(() => NestedBoolNullableWithAggregatesFilterSchema),
        ])
        .optional()
        .nullable(),
      _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
      _min: z.lazy(() => NestedBoolNullableFilterSchema).optional(),
      _max: z.lazy(() => NestedBoolNullableFilterSchema).optional(),
    })
    .strict();

export const NestedEnumCaseTypeFilterSchema: z.ZodType<Prisma.NestedEnumCaseTypeFilter> =
  z
    .object({
      equals: z.lazy(() => CaseTypeSchema).optional(),
      in: z
        .lazy(() => CaseTypeSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => CaseTypeSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => CaseTypeSchema),
          z.lazy(() => NestedEnumCaseTypeFilterSchema),
        ])
        .optional(),
    })
    .strict();

export const NestedEnumCaseTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumCaseTypeWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => CaseTypeSchema).optional(),
      in: z
        .lazy(() => CaseTypeSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => CaseTypeSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => CaseTypeSchema),
          z.lazy(() => NestedEnumCaseTypeWithAggregatesFilterSchema),
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumCaseTypeFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumCaseTypeFilterSchema).optional(),
    })
    .strict();

export const NestedEnumPSUTypeFilterSchema: z.ZodType<Prisma.NestedEnumPSUTypeFilter> =
  z
    .object({
      equals: z.lazy(() => PSUTypeSchema).optional(),
      in: z
        .lazy(() => PSUTypeSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => PSUTypeSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => PSUTypeSchema),
          z.lazy(() => NestedEnumPSUTypeFilterSchema),
        ])
        .optional(),
    })
    .strict();

export const NestedEnumPSUEffFilterSchema: z.ZodType<Prisma.NestedEnumPSUEffFilter> =
  z
    .object({
      equals: z.lazy(() => PSUEffSchema).optional(),
      in: z
        .lazy(() => PSUEffSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => PSUEffSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => PSUEffSchema),
          z.lazy(() => NestedEnumPSUEffFilterSchema),
        ])
        .optional(),
    })
    .strict();

export const NestedEnumPSUModulFilterSchema: z.ZodType<Prisma.NestedEnumPSUModulFilter> =
  z
    .object({
      equals: z.lazy(() => PSUModulSchema).optional(),
      in: z
        .lazy(() => PSUModulSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => PSUModulSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => PSUModulSchema),
          z.lazy(() => NestedEnumPSUModulFilterSchema),
        ])
        .optional(),
    })
    .strict();

export const NestedEnumPSUTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumPSUTypeWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => PSUTypeSchema).optional(),
      in: z
        .lazy(() => PSUTypeSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => PSUTypeSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => PSUTypeSchema),
          z.lazy(() => NestedEnumPSUTypeWithAggregatesFilterSchema),
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumPSUTypeFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumPSUTypeFilterSchema).optional(),
    })
    .strict();

export const NestedEnumPSUEffWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumPSUEffWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => PSUEffSchema).optional(),
      in: z
        .lazy(() => PSUEffSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => PSUEffSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => PSUEffSchema),
          z.lazy(() => NestedEnumPSUEffWithAggregatesFilterSchema),
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumPSUEffFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumPSUEffFilterSchema).optional(),
    })
    .strict();

export const NestedEnumPSUModulWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumPSUModulWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => PSUModulSchema).optional(),
      in: z
        .lazy(() => PSUModulSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => PSUModulSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => PSUModulSchema),
          z.lazy(() => NestedEnumPSUModulWithAggregatesFilterSchema),
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumPSUModulFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumPSUModulFilterSchema).optional(),
    })
    .strict();

export const NestedEnumMonitorPanelTypeFilterSchema: z.ZodType<Prisma.NestedEnumMonitorPanelTypeFilter> =
  z
    .object({
      equals: z.lazy(() => MonitorPanelTypeSchema).optional(),
      in: z
        .lazy(() => MonitorPanelTypeSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => MonitorPanelTypeSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => MonitorPanelTypeSchema),
          z.lazy(() => NestedEnumMonitorPanelTypeFilterSchema),
        ])
        .optional(),
    })
    .strict();

export const NestedEnumMonitorPanelTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumMonitorPanelTypeWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => MonitorPanelTypeSchema).optional(),
      in: z
        .lazy(() => MonitorPanelTypeSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => MonitorPanelTypeSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => MonitorPanelTypeSchema),
          z.lazy(() => NestedEnumMonitorPanelTypeWithAggregatesFilterSchema),
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumMonitorPanelTypeFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumMonitorPanelTypeFilterSchema).optional(),
    })
    .strict();

export const NestedEnumHeadphoneTypesFilterSchema: z.ZodType<Prisma.NestedEnumHeadphoneTypesFilter> =
  z
    .object({
      equals: z.lazy(() => HeadphoneTypesSchema).optional(),
      in: z
        .lazy(() => HeadphoneTypesSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => HeadphoneTypesSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => HeadphoneTypesSchema),
          z.lazy(() => NestedEnumHeadphoneTypesFilterSchema),
        ])
        .optional(),
    })
    .strict();

export const NestedEnumEnclosureTypeFilterSchema: z.ZodType<Prisma.NestedEnumEnclosureTypeFilter> =
  z
    .object({
      equals: z.lazy(() => EnclosureTypeSchema).optional(),
      in: z
        .lazy(() => EnclosureTypeSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => EnclosureTypeSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => EnclosureTypeSchema),
          z.lazy(() => NestedEnumEnclosureTypeFilterSchema),
        ])
        .optional(),
    })
    .strict();

export const NestedEnumHeadphoneTypesWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumHeadphoneTypesWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => HeadphoneTypesSchema).optional(),
      in: z
        .lazy(() => HeadphoneTypesSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => HeadphoneTypesSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => HeadphoneTypesSchema),
          z.lazy(() => NestedEnumHeadphoneTypesWithAggregatesFilterSchema),
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumHeadphoneTypesFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumHeadphoneTypesFilterSchema).optional(),
    })
    .strict();

export const NestedEnumEnclosureTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumEnclosureTypeWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => EnclosureTypeSchema).optional(),
      in: z
        .lazy(() => EnclosureTypeSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => EnclosureTypeSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => EnclosureTypeSchema),
          z.lazy(() => NestedEnumEnclosureTypeWithAggregatesFilterSchema),
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumEnclosureTypeFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumEnclosureTypeFilterSchema).optional(),
    })
    .strict();

export const NestedEnumKeyboardStyleFilterSchema: z.ZodType<Prisma.NestedEnumKeyboardStyleFilter> =
  z
    .object({
      equals: z.lazy(() => KeyboardStyleSchema).optional(),
      in: z
        .lazy(() => KeyboardStyleSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => KeyboardStyleSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => KeyboardStyleSchema),
          z.lazy(() => NestedEnumKeyboardStyleFilterSchema),
        ])
        .optional(),
    })
    .strict();

export const NestedEnumConnectionTypeFilterSchema: z.ZodType<Prisma.NestedEnumConnectionTypeFilter> =
  z
    .object({
      equals: z.lazy(() => ConnectionTypeSchema).optional(),
      in: z
        .lazy(() => ConnectionTypeSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => ConnectionTypeSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => ConnectionTypeSchema),
          z.lazy(() => NestedEnumConnectionTypeFilterSchema),
        ])
        .optional(),
    })
    .strict();

export const NestedEnumKeyboardStyleWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumKeyboardStyleWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => KeyboardStyleSchema).optional(),
      in: z
        .lazy(() => KeyboardStyleSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => KeyboardStyleSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => KeyboardStyleSchema),
          z.lazy(() => NestedEnumKeyboardStyleWithAggregatesFilterSchema),
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumKeyboardStyleFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumKeyboardStyleFilterSchema).optional(),
    })
    .strict();

export const NestedEnumConnectionTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumConnectionTypeWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => ConnectionTypeSchema).optional(),
      in: z
        .lazy(() => ConnectionTypeSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => ConnectionTypeSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => ConnectionTypeSchema),
          z.lazy(() => NestedEnumConnectionTypeWithAggregatesFilterSchema),
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumConnectionTypeFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumConnectionTypeFilterSchema).optional(),
    })
    .strict();

export const NestedEnumMouseTrackMethodFilterSchema: z.ZodType<Prisma.NestedEnumMouseTrackMethodFilter> =
  z
    .object({
      equals: z.lazy(() => MouseTrackMethodSchema).optional(),
      in: z
        .lazy(() => MouseTrackMethodSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => MouseTrackMethodSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => MouseTrackMethodSchema),
          z.lazy(() => NestedEnumMouseTrackMethodFilterSchema),
        ])
        .optional(),
    })
    .strict();

export const NestedEnumMouseOrientationFilterSchema: z.ZodType<Prisma.NestedEnumMouseOrientationFilter> =
  z
    .object({
      equals: z.lazy(() => MouseOrientationSchema).optional(),
      in: z
        .lazy(() => MouseOrientationSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => MouseOrientationSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => MouseOrientationSchema),
          z.lazy(() => NestedEnumMouseOrientationFilterSchema),
        ])
        .optional(),
    })
    .strict();

export const NestedEnumMouseTrackMethodWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumMouseTrackMethodWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => MouseTrackMethodSchema).optional(),
      in: z
        .lazy(() => MouseTrackMethodSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => MouseTrackMethodSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => MouseTrackMethodSchema),
          z.lazy(() => NestedEnumMouseTrackMethodWithAggregatesFilterSchema),
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumMouseTrackMethodFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumMouseTrackMethodFilterSchema).optional(),
    })
    .strict();

export const NestedEnumMouseOrientationWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumMouseOrientationWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => MouseOrientationSchema).optional(),
      in: z
        .lazy(() => MouseOrientationSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => MouseOrientationSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => MouseOrientationSchema),
          z.lazy(() => NestedEnumMouseOrientationWithAggregatesFilterSchema),
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumMouseOrientationFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumMouseOrientationFilterSchema).optional(),
    })
    .strict();

export const NestedEnumFocusTypeFilterSchema: z.ZodType<Prisma.NestedEnumFocusTypeFilter> =
  z
    .object({
      equals: z.lazy(() => FocusTypeSchema).optional(),
      in: z
        .lazy(() => FocusTypeSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => FocusTypeSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => FocusTypeSchema),
          z.lazy(() => NestedEnumFocusTypeFilterSchema),
        ])
        .optional(),
    })
    .strict();

export const NestedEnumFocusTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumFocusTypeWithAggregatesFilter> =
  z
    .object({
      equals: z.lazy(() => FocusTypeSchema).optional(),
      in: z
        .lazy(() => FocusTypeSchema)
        .array()
        .optional(),
      notIn: z
        .lazy(() => FocusTypeSchema)
        .array()
        .optional(),
      not: z
        .union([
          z.lazy(() => FocusTypeSchema),
          z.lazy(() => NestedEnumFocusTypeWithAggregatesFilterSchema),
        ])
        .optional(),
      _count: z.lazy(() => NestedIntFilterSchema).optional(),
      _min: z.lazy(() => NestedEnumFocusTypeFilterSchema).optional(),
      _max: z.lazy(() => NestedEnumFocusTypeFilterSchema).optional(),
    })
    .strict();

export const UserCreateWithoutAccountsInputSchema: z.ZodType<Prisma.UserCreateWithoutAccountsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      name: z.string().optional().nullable(),
      email: z.string().optional().nullable(),
      emailVerified: z.coerce.date().optional().nullable(),
      image: z.string().optional().nullable(),
      role: z.lazy(() => UserRoleSchema).optional(),
      setups: z
        .lazy(() => SetupCreateNestedManyWithoutUserInputSchema)
        .optional(),
      sessions: z
        .lazy(() => SessionCreateNestedManyWithoutUserInputSchema)
        .optional(),
    })
    .strict();

export const UserUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutAccountsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      name: z.string().optional().nullable(),
      email: z.string().optional().nullable(),
      emailVerified: z.coerce.date().optional().nullable(),
      image: z.string().optional().nullable(),
      role: z.lazy(() => UserRoleSchema).optional(),
      setups: z
        .lazy(() => SetupUncheckedCreateNestedManyWithoutUserInputSchema)
        .optional(),
      sessions: z
        .lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema)
        .optional(),
    })
    .strict();

export const UserCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutAccountsInput> =
  z
    .object({
      where: z.lazy(() => UserWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => UserCreateWithoutAccountsInputSchema),
        z.lazy(() => UserUncheckedCreateWithoutAccountsInputSchema),
      ]),
    })
    .strict();

export const UserUpsertWithoutAccountsInputSchema: z.ZodType<Prisma.UserUpsertWithoutAccountsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => UserUpdateWithoutAccountsInputSchema),
        z.lazy(() => UserUncheckedUpdateWithoutAccountsInputSchema),
      ]),
      create: z.union([
        z.lazy(() => UserCreateWithoutAccountsInputSchema),
        z.lazy(() => UserUncheckedCreateWithoutAccountsInputSchema),
      ]),
      where: z.lazy(() => UserWhereInputSchema).optional(),
    })
    .strict();

export const UserUpdateToOneWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutAccountsInput> =
  z
    .object({
      where: z.lazy(() => UserWhereInputSchema).optional(),
      data: z.union([
        z.lazy(() => UserUpdateWithoutAccountsInputSchema),
        z.lazy(() => UserUncheckedUpdateWithoutAccountsInputSchema),
      ]),
    })
    .strict();

export const UserUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.UserUpdateWithoutAccountsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      emailVerified: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      image: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      role: z
        .union([
          z.lazy(() => UserRoleSchema),
          z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      setups: z
        .lazy(() => SetupUpdateManyWithoutUserNestedInputSchema)
        .optional(),
      sessions: z
        .lazy(() => SessionUpdateManyWithoutUserNestedInputSchema)
        .optional(),
    })
    .strict();

export const UserUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutAccountsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      emailVerified: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      image: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      role: z
        .union([
          z.lazy(() => UserRoleSchema),
          z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      setups: z
        .lazy(() => SetupUncheckedUpdateManyWithoutUserNestedInputSchema)
        .optional(),
      sessions: z
        .lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema)
        .optional(),
    })
    .strict();

export const UserCreateWithoutSessionsInputSchema: z.ZodType<Prisma.UserCreateWithoutSessionsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      name: z.string().optional().nullable(),
      email: z.string().optional().nullable(),
      emailVerified: z.coerce.date().optional().nullable(),
      image: z.string().optional().nullable(),
      role: z.lazy(() => UserRoleSchema).optional(),
      setups: z
        .lazy(() => SetupCreateNestedManyWithoutUserInputSchema)
        .optional(),
      accounts: z
        .lazy(() => AccountCreateNestedManyWithoutUserInputSchema)
        .optional(),
    })
    .strict();

export const UserUncheckedCreateWithoutSessionsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutSessionsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      name: z.string().optional().nullable(),
      email: z.string().optional().nullable(),
      emailVerified: z.coerce.date().optional().nullable(),
      image: z.string().optional().nullable(),
      role: z.lazy(() => UserRoleSchema).optional(),
      setups: z
        .lazy(() => SetupUncheckedCreateNestedManyWithoutUserInputSchema)
        .optional(),
      accounts: z
        .lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema)
        .optional(),
    })
    .strict();

export const UserCreateOrConnectWithoutSessionsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutSessionsInput> =
  z
    .object({
      where: z.lazy(() => UserWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => UserCreateWithoutSessionsInputSchema),
        z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema),
      ]),
    })
    .strict();

export const UserUpsertWithoutSessionsInputSchema: z.ZodType<Prisma.UserUpsertWithoutSessionsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => UserUpdateWithoutSessionsInputSchema),
        z.lazy(() => UserUncheckedUpdateWithoutSessionsInputSchema),
      ]),
      create: z.union([
        z.lazy(() => UserCreateWithoutSessionsInputSchema),
        z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema),
      ]),
      where: z.lazy(() => UserWhereInputSchema).optional(),
    })
    .strict();

export const UserUpdateToOneWithWhereWithoutSessionsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutSessionsInput> =
  z
    .object({
      where: z.lazy(() => UserWhereInputSchema).optional(),
      data: z.union([
        z.lazy(() => UserUpdateWithoutSessionsInputSchema),
        z.lazy(() => UserUncheckedUpdateWithoutSessionsInputSchema),
      ]),
    })
    .strict();

export const UserUpdateWithoutSessionsInputSchema: z.ZodType<Prisma.UserUpdateWithoutSessionsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      emailVerified: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      image: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      role: z
        .union([
          z.lazy(() => UserRoleSchema),
          z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      setups: z
        .lazy(() => SetupUpdateManyWithoutUserNestedInputSchema)
        .optional(),
      accounts: z
        .lazy(() => AccountUpdateManyWithoutUserNestedInputSchema)
        .optional(),
    })
    .strict();

export const UserUncheckedUpdateWithoutSessionsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutSessionsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      emailVerified: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      image: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      role: z
        .union([
          z.lazy(() => UserRoleSchema),
          z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      setups: z
        .lazy(() => SetupUncheckedUpdateManyWithoutUserNestedInputSchema)
        .optional(),
      accounts: z
        .lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema)
        .optional(),
    })
    .strict();

export const SetupCreateWithoutUserInputSchema: z.ZodType<Prisma.SetupCreateWithoutUserInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      name: z.string().optional().nullable(),
      cpu: z.lazy(() => CPUCreateNestedOneWithoutSetupsInputSchema),
      gpu: z.lazy(() => GPUCreateNestedOneWithoutSetupsInputSchema),
      hdd: z.lazy(() => HDDCreateNestedOneWithoutSetupsInputSchema),
      case: z.lazy(() => CaseCreateNestedOneWithoutSetupsInputSchema),
      ram: z.lazy(() => RAMCreateNestedOneWithoutSetupsInputSchema),
      psu: z.lazy(() => PSUCreateNestedOneWithoutSetupsInputSchema),
      monitors: z
        .lazy(() => MonitorsOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      sound_card: z.lazy(
        () => SoundCardCreateNestedOneWithoutSetupsInputSchema,
      ),
      cpu_cooler: z.lazy(
        () => CPUCoolerCreateNestedOneWithoutSetupsInputSchema,
      ),
      motherboard: z.lazy(
        () => MotherboardCreateNestedOneWithoutSetupsInputSchema,
      ),
      headphones: z.lazy(
        () => HeadphonesCreateNestedOneWithoutSetupsInputSchema,
      ),
      keyboard: z.lazy(() => KeyboardCreateNestedOneWithoutSetupsInputSchema),
      mouse: z.lazy(() => MouseCreateNestedOneWithoutSetupsInputSchema),
      speakers: z
        .lazy(() => SpeakersOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      webcam: z.lazy(() => WebcamCreateNestedOneWithoutSetupsInputSchema),
      case_fans: z
        .lazy(() => CaseFanOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
    })
    .strict();

export const SetupUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.SetupUncheckedCreateWithoutUserInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      cpu_id: z.string(),
      gpu_id: z.string(),
      hdd_id: z.string(),
      case_id: z.string(),
      psu_id: z.string(),
      ram_id: z.string(),
      name: z.string().optional().nullable(),
      sound_card_id: z.string(),
      cpu_cooler_id: z.string(),
      motherboard_id: z.string(),
      headphones_id: z.string(),
      keyboard_id: z.string(),
      mouse_id: z.string(),
      webcam_id: z.string(),
      monitors: z
        .lazy(
          () => MonitorsOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      speakers: z
        .lazy(
          () => SpeakersOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
      case_fans: z
        .lazy(
          () => CaseFanOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
    })
    .strict();

export const SetupCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.SetupCreateOrConnectWithoutUserInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => SetupCreateWithoutUserInputSchema),
        z.lazy(() => SetupUncheckedCreateWithoutUserInputSchema),
      ]),
    })
    .strict();

export const SetupCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.SetupCreateManyUserInputEnvelope> =
  z
    .object({
      data: z.union([
        z.lazy(() => SetupCreateManyUserInputSchema),
        z.lazy(() => SetupCreateManyUserInputSchema).array(),
      ]),
      skipDuplicates: z.boolean().optional(),
    })
    .strict();

export const AccountCreateWithoutUserInputSchema: z.ZodType<Prisma.AccountCreateWithoutUserInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      type: z.string(),
      provider: z.string(),
      providerAccountId: z.string(),
      refresh_token: z.string().optional().nullable(),
      access_token: z.string().optional().nullable(),
      expires_at: z.number().int().optional().nullable(),
      token_type: z.string().optional().nullable(),
      scope: z.string().optional().nullable(),
      id_token: z.string().optional().nullable(),
      session_state: z.string().optional().nullable(),
    })
    .strict();

export const AccountUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.AccountUncheckedCreateWithoutUserInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      type: z.string(),
      provider: z.string(),
      providerAccountId: z.string(),
      refresh_token: z.string().optional().nullable(),
      access_token: z.string().optional().nullable(),
      expires_at: z.number().int().optional().nullable(),
      token_type: z.string().optional().nullable(),
      scope: z.string().optional().nullable(),
      id_token: z.string().optional().nullable(),
      session_state: z.string().optional().nullable(),
    })
    .strict();

export const AccountCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.AccountCreateOrConnectWithoutUserInput> =
  z
    .object({
      where: z.lazy(() => AccountWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => AccountCreateWithoutUserInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema),
      ]),
    })
    .strict();

export const AccountCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.AccountCreateManyUserInputEnvelope> =
  z
    .object({
      data: z.union([
        z.lazy(() => AccountCreateManyUserInputSchema),
        z.lazy(() => AccountCreateManyUserInputSchema).array(),
      ]),
      skipDuplicates: z.boolean().optional(),
    })
    .strict();

export const SessionCreateWithoutUserInputSchema: z.ZodType<Prisma.SessionCreateWithoutUserInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      sessionToken: z.string(),
      expires: z.coerce.date(),
    })
    .strict();

export const SessionUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedCreateWithoutUserInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      sessionToken: z.string(),
      expires: z.coerce.date(),
    })
    .strict();

export const SessionCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.SessionCreateOrConnectWithoutUserInput> =
  z
    .object({
      where: z.lazy(() => SessionWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => SessionCreateWithoutUserInputSchema),
        z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),
      ]),
    })
    .strict();

export const SessionCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.SessionCreateManyUserInputEnvelope> =
  z
    .object({
      data: z.union([
        z.lazy(() => SessionCreateManyUserInputSchema),
        z.lazy(() => SessionCreateManyUserInputSchema).array(),
      ]),
      skipDuplicates: z.boolean().optional(),
    })
    .strict();

export const SetupUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.SetupUpsertWithWhereUniqueWithoutUserInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => SetupUpdateWithoutUserInputSchema),
        z.lazy(() => SetupUncheckedUpdateWithoutUserInputSchema),
      ]),
      create: z.union([
        z.lazy(() => SetupCreateWithoutUserInputSchema),
        z.lazy(() => SetupUncheckedCreateWithoutUserInputSchema),
      ]),
    })
    .strict();

export const SetupUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.SetupUpdateWithWhereUniqueWithoutUserInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => SetupUpdateWithoutUserInputSchema),
        z.lazy(() => SetupUncheckedUpdateWithoutUserInputSchema),
      ]),
    })
    .strict();

export const SetupUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.SetupUpdateManyWithWhereWithoutUserInput> =
  z
    .object({
      where: z.lazy(() => SetupScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => SetupUpdateManyMutationInputSchema),
        z.lazy(() => SetupUncheckedUpdateManyWithoutUserInputSchema),
      ]),
    })
    .strict();

export const SetupScalarWhereInputSchema: z.ZodType<Prisma.SetupScalarWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => SetupScalarWhereInputSchema),
          z.lazy(() => SetupScalarWhereInputSchema).array(),
        ])
        .optional(),
      OR: z
        .lazy(() => SetupScalarWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => SetupScalarWhereInputSchema),
          z.lazy(() => SetupScalarWhereInputSchema).array(),
        ])
        .optional(),
      id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
      cpu_id: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      gpu_id: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      hdd_id: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      case_id: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      psu_id: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      ram_id: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      name: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      sound_card_id: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      cpu_cooler_id: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      motherboard_id: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      headphones_id: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      keyboard_id: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      mouse_id: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      webcam_id: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      user_id: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
    })
    .strict();

export const AccountUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.AccountUpsertWithWhereUniqueWithoutUserInput> =
  z
    .object({
      where: z.lazy(() => AccountWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => AccountUpdateWithoutUserInputSchema),
        z.lazy(() => AccountUncheckedUpdateWithoutUserInputSchema),
      ]),
      create: z.union([
        z.lazy(() => AccountCreateWithoutUserInputSchema),
        z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema),
      ]),
    })
    .strict();

export const AccountUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.AccountUpdateWithWhereUniqueWithoutUserInput> =
  z
    .object({
      where: z.lazy(() => AccountWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => AccountUpdateWithoutUserInputSchema),
        z.lazy(() => AccountUncheckedUpdateWithoutUserInputSchema),
      ]),
    })
    .strict();

export const AccountUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.AccountUpdateManyWithWhereWithoutUserInput> =
  z
    .object({
      where: z.lazy(() => AccountScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => AccountUpdateManyMutationInputSchema),
        z.lazy(() => AccountUncheckedUpdateManyWithoutUserInputSchema),
      ]),
    })
    .strict();

export const AccountScalarWhereInputSchema: z.ZodType<Prisma.AccountScalarWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => AccountScalarWhereInputSchema),
          z.lazy(() => AccountScalarWhereInputSchema).array(),
        ])
        .optional(),
      OR: z
        .lazy(() => AccountScalarWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => AccountScalarWhereInputSchema),
          z.lazy(() => AccountScalarWhereInputSchema).array(),
        ])
        .optional(),
      id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
      userId: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      type: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
      provider: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      providerAccountId: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      refresh_token: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      access_token: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      expires_at: z
        .union([z.lazy(() => IntNullableFilterSchema), z.number()])
        .optional()
        .nullable(),
      token_type: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      scope: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      id_token: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
      session_state: z
        .union([z.lazy(() => StringNullableFilterSchema), z.string()])
        .optional()
        .nullable(),
    })
    .strict();

export const SessionUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.SessionUpsertWithWhereUniqueWithoutUserInput> =
  z
    .object({
      where: z.lazy(() => SessionWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => SessionUpdateWithoutUserInputSchema),
        z.lazy(() => SessionUncheckedUpdateWithoutUserInputSchema),
      ]),
      create: z.union([
        z.lazy(() => SessionCreateWithoutUserInputSchema),
        z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),
      ]),
    })
    .strict();

export const SessionUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.SessionUpdateWithWhereUniqueWithoutUserInput> =
  z
    .object({
      where: z.lazy(() => SessionWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => SessionUpdateWithoutUserInputSchema),
        z.lazy(() => SessionUncheckedUpdateWithoutUserInputSchema),
      ]),
    })
    .strict();

export const SessionUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.SessionUpdateManyWithWhereWithoutUserInput> =
  z
    .object({
      where: z.lazy(() => SessionScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => SessionUpdateManyMutationInputSchema),
        z.lazy(() => SessionUncheckedUpdateManyWithoutUserInputSchema),
      ]),
    })
    .strict();

export const SessionScalarWhereInputSchema: z.ZodType<Prisma.SessionScalarWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => SessionScalarWhereInputSchema),
          z.lazy(() => SessionScalarWhereInputSchema).array(),
        ])
        .optional(),
      OR: z
        .lazy(() => SessionScalarWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => SessionScalarWhereInputSchema),
          z.lazy(() => SessionScalarWhereInputSchema).array(),
        ])
        .optional(),
      id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
      sessionToken: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      userId: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      expires: z
        .union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()])
        .optional(),
    })
    .strict();

export const SetupCreateWithoutCpu_coolerInputSchema: z.ZodType<Prisma.SetupCreateWithoutCpu_coolerInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      name: z.string().optional().nullable(),
      cpu: z.lazy(() => CPUCreateNestedOneWithoutSetupsInputSchema),
      gpu: z.lazy(() => GPUCreateNestedOneWithoutSetupsInputSchema),
      hdd: z.lazy(() => HDDCreateNestedOneWithoutSetupsInputSchema),
      case: z.lazy(() => CaseCreateNestedOneWithoutSetupsInputSchema),
      ram: z.lazy(() => RAMCreateNestedOneWithoutSetupsInputSchema),
      psu: z.lazy(() => PSUCreateNestedOneWithoutSetupsInputSchema),
      monitors: z
        .lazy(() => MonitorsOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      sound_card: z.lazy(
        () => SoundCardCreateNestedOneWithoutSetupsInputSchema,
      ),
      motherboard: z.lazy(
        () => MotherboardCreateNestedOneWithoutSetupsInputSchema,
      ),
      headphones: z.lazy(
        () => HeadphonesCreateNestedOneWithoutSetupsInputSchema,
      ),
      keyboard: z.lazy(() => KeyboardCreateNestedOneWithoutSetupsInputSchema),
      mouse: z.lazy(() => MouseCreateNestedOneWithoutSetupsInputSchema),
      speakers: z
        .lazy(() => SpeakersOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      webcam: z.lazy(() => WebcamCreateNestedOneWithoutSetupsInputSchema),
      case_fans: z
        .lazy(() => CaseFanOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      user: z.lazy(() => UserCreateNestedOneWithoutSetupsInputSchema),
    })
    .strict();

export const SetupUncheckedCreateWithoutCpu_coolerInputSchema: z.ZodType<Prisma.SetupUncheckedCreateWithoutCpu_coolerInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      cpu_id: z.string(),
      gpu_id: z.string(),
      hdd_id: z.string(),
      case_id: z.string(),
      psu_id: z.string(),
      ram_id: z.string(),
      name: z.string().optional().nullable(),
      sound_card_id: z.string(),
      motherboard_id: z.string(),
      headphones_id: z.string(),
      keyboard_id: z.string(),
      mouse_id: z.string(),
      webcam_id: z.string(),
      user_id: z.string(),
      monitors: z
        .lazy(
          () => MonitorsOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      speakers: z
        .lazy(
          () => SpeakersOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
      case_fans: z
        .lazy(
          () => CaseFanOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
    })
    .strict();

export const SetupCreateOrConnectWithoutCpu_coolerInputSchema: z.ZodType<Prisma.SetupCreateOrConnectWithoutCpu_coolerInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => SetupCreateWithoutCpu_coolerInputSchema),
        z.lazy(() => SetupUncheckedCreateWithoutCpu_coolerInputSchema),
      ]),
    })
    .strict();

export const SetupCreateManyCpu_coolerInputEnvelopeSchema: z.ZodType<Prisma.SetupCreateManyCpu_coolerInputEnvelope> =
  z
    .object({
      data: z.union([
        z.lazy(() => SetupCreateManyCpu_coolerInputSchema),
        z.lazy(() => SetupCreateManyCpu_coolerInputSchema).array(),
      ]),
      skipDuplicates: z.boolean().optional(),
    })
    .strict();

export const SetupUpsertWithWhereUniqueWithoutCpu_coolerInputSchema: z.ZodType<Prisma.SetupUpsertWithWhereUniqueWithoutCpu_coolerInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => SetupUpdateWithoutCpu_coolerInputSchema),
        z.lazy(() => SetupUncheckedUpdateWithoutCpu_coolerInputSchema),
      ]),
      create: z.union([
        z.lazy(() => SetupCreateWithoutCpu_coolerInputSchema),
        z.lazy(() => SetupUncheckedCreateWithoutCpu_coolerInputSchema),
      ]),
    })
    .strict();

export const SetupUpdateWithWhereUniqueWithoutCpu_coolerInputSchema: z.ZodType<Prisma.SetupUpdateWithWhereUniqueWithoutCpu_coolerInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => SetupUpdateWithoutCpu_coolerInputSchema),
        z.lazy(() => SetupUncheckedUpdateWithoutCpu_coolerInputSchema),
      ]),
    })
    .strict();

export const SetupUpdateManyWithWhereWithoutCpu_coolerInputSchema: z.ZodType<Prisma.SetupUpdateManyWithWhereWithoutCpu_coolerInput> =
  z
    .object({
      where: z.lazy(() => SetupScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => SetupUpdateManyMutationInputSchema),
        z.lazy(() => SetupUncheckedUpdateManyWithoutCpu_coolerInputSchema),
      ]),
    })
    .strict();

export const SetupCreateWithoutMotherboardInputSchema: z.ZodType<Prisma.SetupCreateWithoutMotherboardInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      name: z.string().optional().nullable(),
      cpu: z.lazy(() => CPUCreateNestedOneWithoutSetupsInputSchema),
      gpu: z.lazy(() => GPUCreateNestedOneWithoutSetupsInputSchema),
      hdd: z.lazy(() => HDDCreateNestedOneWithoutSetupsInputSchema),
      case: z.lazy(() => CaseCreateNestedOneWithoutSetupsInputSchema),
      ram: z.lazy(() => RAMCreateNestedOneWithoutSetupsInputSchema),
      psu: z.lazy(() => PSUCreateNestedOneWithoutSetupsInputSchema),
      monitors: z
        .lazy(() => MonitorsOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      sound_card: z.lazy(
        () => SoundCardCreateNestedOneWithoutSetupsInputSchema,
      ),
      cpu_cooler: z.lazy(
        () => CPUCoolerCreateNestedOneWithoutSetupsInputSchema,
      ),
      headphones: z.lazy(
        () => HeadphonesCreateNestedOneWithoutSetupsInputSchema,
      ),
      keyboard: z.lazy(() => KeyboardCreateNestedOneWithoutSetupsInputSchema),
      mouse: z.lazy(() => MouseCreateNestedOneWithoutSetupsInputSchema),
      speakers: z
        .lazy(() => SpeakersOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      webcam: z.lazy(() => WebcamCreateNestedOneWithoutSetupsInputSchema),
      case_fans: z
        .lazy(() => CaseFanOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      user: z.lazy(() => UserCreateNestedOneWithoutSetupsInputSchema),
    })
    .strict();

export const SetupUncheckedCreateWithoutMotherboardInputSchema: z.ZodType<Prisma.SetupUncheckedCreateWithoutMotherboardInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      cpu_id: z.string(),
      gpu_id: z.string(),
      hdd_id: z.string(),
      case_id: z.string(),
      psu_id: z.string(),
      ram_id: z.string(),
      name: z.string().optional().nullable(),
      sound_card_id: z.string(),
      cpu_cooler_id: z.string(),
      headphones_id: z.string(),
      keyboard_id: z.string(),
      mouse_id: z.string(),
      webcam_id: z.string(),
      user_id: z.string(),
      monitors: z
        .lazy(
          () => MonitorsOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      speakers: z
        .lazy(
          () => SpeakersOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
      case_fans: z
        .lazy(
          () => CaseFanOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
    })
    .strict();

export const SetupCreateOrConnectWithoutMotherboardInputSchema: z.ZodType<Prisma.SetupCreateOrConnectWithoutMotherboardInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => SetupCreateWithoutMotherboardInputSchema),
        z.lazy(() => SetupUncheckedCreateWithoutMotherboardInputSchema),
      ]),
    })
    .strict();

export const SetupCreateManyMotherboardInputEnvelopeSchema: z.ZodType<Prisma.SetupCreateManyMotherboardInputEnvelope> =
  z
    .object({
      data: z.union([
        z.lazy(() => SetupCreateManyMotherboardInputSchema),
        z.lazy(() => SetupCreateManyMotherboardInputSchema).array(),
      ]),
      skipDuplicates: z.boolean().optional(),
    })
    .strict();

export const SetupUpsertWithWhereUniqueWithoutMotherboardInputSchema: z.ZodType<Prisma.SetupUpsertWithWhereUniqueWithoutMotherboardInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => SetupUpdateWithoutMotherboardInputSchema),
        z.lazy(() => SetupUncheckedUpdateWithoutMotherboardInputSchema),
      ]),
      create: z.union([
        z.lazy(() => SetupCreateWithoutMotherboardInputSchema),
        z.lazy(() => SetupUncheckedCreateWithoutMotherboardInputSchema),
      ]),
    })
    .strict();

export const SetupUpdateWithWhereUniqueWithoutMotherboardInputSchema: z.ZodType<Prisma.SetupUpdateWithWhereUniqueWithoutMotherboardInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => SetupUpdateWithoutMotherboardInputSchema),
        z.lazy(() => SetupUncheckedUpdateWithoutMotherboardInputSchema),
      ]),
    })
    .strict();

export const SetupUpdateManyWithWhereWithoutMotherboardInputSchema: z.ZodType<Prisma.SetupUpdateManyWithWhereWithoutMotherboardInput> =
  z
    .object({
      where: z.lazy(() => SetupScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => SetupUpdateManyMutationInputSchema),
        z.lazy(() => SetupUncheckedUpdateManyWithoutMotherboardInputSchema),
      ]),
    })
    .strict();

export const SetupCreateWithoutRamInputSchema: z.ZodType<Prisma.SetupCreateWithoutRamInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      name: z.string().optional().nullable(),
      cpu: z.lazy(() => CPUCreateNestedOneWithoutSetupsInputSchema),
      gpu: z.lazy(() => GPUCreateNestedOneWithoutSetupsInputSchema),
      hdd: z.lazy(() => HDDCreateNestedOneWithoutSetupsInputSchema),
      case: z.lazy(() => CaseCreateNestedOneWithoutSetupsInputSchema),
      psu: z.lazy(() => PSUCreateNestedOneWithoutSetupsInputSchema),
      monitors: z
        .lazy(() => MonitorsOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      sound_card: z.lazy(
        () => SoundCardCreateNestedOneWithoutSetupsInputSchema,
      ),
      cpu_cooler: z.lazy(
        () => CPUCoolerCreateNestedOneWithoutSetupsInputSchema,
      ),
      motherboard: z.lazy(
        () => MotherboardCreateNestedOneWithoutSetupsInputSchema,
      ),
      headphones: z.lazy(
        () => HeadphonesCreateNestedOneWithoutSetupsInputSchema,
      ),
      keyboard: z.lazy(() => KeyboardCreateNestedOneWithoutSetupsInputSchema),
      mouse: z.lazy(() => MouseCreateNestedOneWithoutSetupsInputSchema),
      speakers: z
        .lazy(() => SpeakersOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      webcam: z.lazy(() => WebcamCreateNestedOneWithoutSetupsInputSchema),
      case_fans: z
        .lazy(() => CaseFanOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      user: z.lazy(() => UserCreateNestedOneWithoutSetupsInputSchema),
    })
    .strict();

export const SetupUncheckedCreateWithoutRamInputSchema: z.ZodType<Prisma.SetupUncheckedCreateWithoutRamInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      cpu_id: z.string(),
      gpu_id: z.string(),
      hdd_id: z.string(),
      case_id: z.string(),
      psu_id: z.string(),
      name: z.string().optional().nullable(),
      sound_card_id: z.string(),
      cpu_cooler_id: z.string(),
      motherboard_id: z.string(),
      headphones_id: z.string(),
      keyboard_id: z.string(),
      mouse_id: z.string(),
      webcam_id: z.string(),
      user_id: z.string(),
      monitors: z
        .lazy(
          () => MonitorsOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      speakers: z
        .lazy(
          () => SpeakersOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
      case_fans: z
        .lazy(
          () => CaseFanOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
    })
    .strict();

export const SetupCreateOrConnectWithoutRamInputSchema: z.ZodType<Prisma.SetupCreateOrConnectWithoutRamInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => SetupCreateWithoutRamInputSchema),
        z.lazy(() => SetupUncheckedCreateWithoutRamInputSchema),
      ]),
    })
    .strict();

export const SetupCreateManyRamInputEnvelopeSchema: z.ZodType<Prisma.SetupCreateManyRamInputEnvelope> =
  z
    .object({
      data: z.union([
        z.lazy(() => SetupCreateManyRamInputSchema),
        z.lazy(() => SetupCreateManyRamInputSchema).array(),
      ]),
      skipDuplicates: z.boolean().optional(),
    })
    .strict();

export const SetupUpsertWithWhereUniqueWithoutRamInputSchema: z.ZodType<Prisma.SetupUpsertWithWhereUniqueWithoutRamInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => SetupUpdateWithoutRamInputSchema),
        z.lazy(() => SetupUncheckedUpdateWithoutRamInputSchema),
      ]),
      create: z.union([
        z.lazy(() => SetupCreateWithoutRamInputSchema),
        z.lazy(() => SetupUncheckedCreateWithoutRamInputSchema),
      ]),
    })
    .strict();

export const SetupUpdateWithWhereUniqueWithoutRamInputSchema: z.ZodType<Prisma.SetupUpdateWithWhereUniqueWithoutRamInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => SetupUpdateWithoutRamInputSchema),
        z.lazy(() => SetupUncheckedUpdateWithoutRamInputSchema),
      ]),
    })
    .strict();

export const SetupUpdateManyWithWhereWithoutRamInputSchema: z.ZodType<Prisma.SetupUpdateManyWithWhereWithoutRamInput> =
  z
    .object({
      where: z.lazy(() => SetupScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => SetupUpdateManyMutationInputSchema),
        z.lazy(() => SetupUncheckedUpdateManyWithoutRamInputSchema),
      ]),
    })
    .strict();

export const SetupCreateWithoutCpuInputSchema: z.ZodType<Prisma.SetupCreateWithoutCpuInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      name: z.string().optional().nullable(),
      gpu: z.lazy(() => GPUCreateNestedOneWithoutSetupsInputSchema),
      hdd: z.lazy(() => HDDCreateNestedOneWithoutSetupsInputSchema),
      case: z.lazy(() => CaseCreateNestedOneWithoutSetupsInputSchema),
      ram: z.lazy(() => RAMCreateNestedOneWithoutSetupsInputSchema),
      psu: z.lazy(() => PSUCreateNestedOneWithoutSetupsInputSchema),
      monitors: z
        .lazy(() => MonitorsOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      sound_card: z.lazy(
        () => SoundCardCreateNestedOneWithoutSetupsInputSchema,
      ),
      cpu_cooler: z.lazy(
        () => CPUCoolerCreateNestedOneWithoutSetupsInputSchema,
      ),
      motherboard: z.lazy(
        () => MotherboardCreateNestedOneWithoutSetupsInputSchema,
      ),
      headphones: z.lazy(
        () => HeadphonesCreateNestedOneWithoutSetupsInputSchema,
      ),
      keyboard: z.lazy(() => KeyboardCreateNestedOneWithoutSetupsInputSchema),
      mouse: z.lazy(() => MouseCreateNestedOneWithoutSetupsInputSchema),
      speakers: z
        .lazy(() => SpeakersOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      webcam: z.lazy(() => WebcamCreateNestedOneWithoutSetupsInputSchema),
      case_fans: z
        .lazy(() => CaseFanOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      user: z.lazy(() => UserCreateNestedOneWithoutSetupsInputSchema),
    })
    .strict();

export const SetupUncheckedCreateWithoutCpuInputSchema: z.ZodType<Prisma.SetupUncheckedCreateWithoutCpuInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      gpu_id: z.string(),
      hdd_id: z.string(),
      case_id: z.string(),
      psu_id: z.string(),
      ram_id: z.string(),
      name: z.string().optional().nullable(),
      sound_card_id: z.string(),
      cpu_cooler_id: z.string(),
      motherboard_id: z.string(),
      headphones_id: z.string(),
      keyboard_id: z.string(),
      mouse_id: z.string(),
      webcam_id: z.string(),
      user_id: z.string(),
      monitors: z
        .lazy(
          () => MonitorsOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      speakers: z
        .lazy(
          () => SpeakersOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
      case_fans: z
        .lazy(
          () => CaseFanOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
    })
    .strict();

export const SetupCreateOrConnectWithoutCpuInputSchema: z.ZodType<Prisma.SetupCreateOrConnectWithoutCpuInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => SetupCreateWithoutCpuInputSchema),
        z.lazy(() => SetupUncheckedCreateWithoutCpuInputSchema),
      ]),
    })
    .strict();

export const SetupCreateManyCpuInputEnvelopeSchema: z.ZodType<Prisma.SetupCreateManyCpuInputEnvelope> =
  z
    .object({
      data: z.union([
        z.lazy(() => SetupCreateManyCpuInputSchema),
        z.lazy(() => SetupCreateManyCpuInputSchema).array(),
      ]),
      skipDuplicates: z.boolean().optional(),
    })
    .strict();

export const SetupUpsertWithWhereUniqueWithoutCpuInputSchema: z.ZodType<Prisma.SetupUpsertWithWhereUniqueWithoutCpuInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => SetupUpdateWithoutCpuInputSchema),
        z.lazy(() => SetupUncheckedUpdateWithoutCpuInputSchema),
      ]),
      create: z.union([
        z.lazy(() => SetupCreateWithoutCpuInputSchema),
        z.lazy(() => SetupUncheckedCreateWithoutCpuInputSchema),
      ]),
    })
    .strict();

export const SetupUpdateWithWhereUniqueWithoutCpuInputSchema: z.ZodType<Prisma.SetupUpdateWithWhereUniqueWithoutCpuInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => SetupUpdateWithoutCpuInputSchema),
        z.lazy(() => SetupUncheckedUpdateWithoutCpuInputSchema),
      ]),
    })
    .strict();

export const SetupUpdateManyWithWhereWithoutCpuInputSchema: z.ZodType<Prisma.SetupUpdateManyWithWhereWithoutCpuInput> =
  z
    .object({
      where: z.lazy(() => SetupScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => SetupUpdateManyMutationInputSchema),
        z.lazy(() => SetupUncheckedUpdateManyWithoutCpuInputSchema),
      ]),
    })
    .strict();

export const SetupCreateWithoutHddInputSchema: z.ZodType<Prisma.SetupCreateWithoutHddInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      name: z.string().optional().nullable(),
      cpu: z.lazy(() => CPUCreateNestedOneWithoutSetupsInputSchema),
      gpu: z.lazy(() => GPUCreateNestedOneWithoutSetupsInputSchema),
      case: z.lazy(() => CaseCreateNestedOneWithoutSetupsInputSchema),
      ram: z.lazy(() => RAMCreateNestedOneWithoutSetupsInputSchema),
      psu: z.lazy(() => PSUCreateNestedOneWithoutSetupsInputSchema),
      monitors: z
        .lazy(() => MonitorsOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      sound_card: z.lazy(
        () => SoundCardCreateNestedOneWithoutSetupsInputSchema,
      ),
      cpu_cooler: z.lazy(
        () => CPUCoolerCreateNestedOneWithoutSetupsInputSchema,
      ),
      motherboard: z.lazy(
        () => MotherboardCreateNestedOneWithoutSetupsInputSchema,
      ),
      headphones: z.lazy(
        () => HeadphonesCreateNestedOneWithoutSetupsInputSchema,
      ),
      keyboard: z.lazy(() => KeyboardCreateNestedOneWithoutSetupsInputSchema),
      mouse: z.lazy(() => MouseCreateNestedOneWithoutSetupsInputSchema),
      speakers: z
        .lazy(() => SpeakersOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      webcam: z.lazy(() => WebcamCreateNestedOneWithoutSetupsInputSchema),
      case_fans: z
        .lazy(() => CaseFanOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      user: z.lazy(() => UserCreateNestedOneWithoutSetupsInputSchema),
    })
    .strict();

export const SetupUncheckedCreateWithoutHddInputSchema: z.ZodType<Prisma.SetupUncheckedCreateWithoutHddInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      cpu_id: z.string(),
      gpu_id: z.string(),
      case_id: z.string(),
      psu_id: z.string(),
      ram_id: z.string(),
      name: z.string().optional().nullable(),
      sound_card_id: z.string(),
      cpu_cooler_id: z.string(),
      motherboard_id: z.string(),
      headphones_id: z.string(),
      keyboard_id: z.string(),
      mouse_id: z.string(),
      webcam_id: z.string(),
      user_id: z.string(),
      monitors: z
        .lazy(
          () => MonitorsOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      speakers: z
        .lazy(
          () => SpeakersOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
      case_fans: z
        .lazy(
          () => CaseFanOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
    })
    .strict();

export const SetupCreateOrConnectWithoutHddInputSchema: z.ZodType<Prisma.SetupCreateOrConnectWithoutHddInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => SetupCreateWithoutHddInputSchema),
        z.lazy(() => SetupUncheckedCreateWithoutHddInputSchema),
      ]),
    })
    .strict();

export const SetupCreateManyHddInputEnvelopeSchema: z.ZodType<Prisma.SetupCreateManyHddInputEnvelope> =
  z
    .object({
      data: z.union([
        z.lazy(() => SetupCreateManyHddInputSchema),
        z.lazy(() => SetupCreateManyHddInputSchema).array(),
      ]),
      skipDuplicates: z.boolean().optional(),
    })
    .strict();

export const SetupUpsertWithWhereUniqueWithoutHddInputSchema: z.ZodType<Prisma.SetupUpsertWithWhereUniqueWithoutHddInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => SetupUpdateWithoutHddInputSchema),
        z.lazy(() => SetupUncheckedUpdateWithoutHddInputSchema),
      ]),
      create: z.union([
        z.lazy(() => SetupCreateWithoutHddInputSchema),
        z.lazy(() => SetupUncheckedCreateWithoutHddInputSchema),
      ]),
    })
    .strict();

export const SetupUpdateWithWhereUniqueWithoutHddInputSchema: z.ZodType<Prisma.SetupUpdateWithWhereUniqueWithoutHddInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => SetupUpdateWithoutHddInputSchema),
        z.lazy(() => SetupUncheckedUpdateWithoutHddInputSchema),
      ]),
    })
    .strict();

export const SetupUpdateManyWithWhereWithoutHddInputSchema: z.ZodType<Prisma.SetupUpdateManyWithWhereWithoutHddInput> =
  z
    .object({
      where: z.lazy(() => SetupScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => SetupUpdateManyMutationInputSchema),
        z.lazy(() => SetupUncheckedUpdateManyWithoutHddInputSchema),
      ]),
    })
    .strict();

export const SSDOfSetupCreateWithoutSsdInputSchema: z.ZodType<Prisma.SSDOfSetupCreateWithoutSsdInput> =
  z
    .object({
      setup: z.lazy(() => SetupCreateNestedOneWithoutSddsInputSchema),
    })
    .strict();

export const SSDOfSetupUncheckedCreateWithoutSsdInputSchema: z.ZodType<Prisma.SSDOfSetupUncheckedCreateWithoutSsdInput> =
  z
    .object({
      setup_id: z.string(),
    })
    .strict();

export const SSDOfSetupCreateOrConnectWithoutSsdInputSchema: z.ZodType<Prisma.SSDOfSetupCreateOrConnectWithoutSsdInput> =
  z
    .object({
      where: z.lazy(() => SSDOfSetupWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => SSDOfSetupCreateWithoutSsdInputSchema),
        z.lazy(() => SSDOfSetupUncheckedCreateWithoutSsdInputSchema),
      ]),
    })
    .strict();

export const SSDOfSetupCreateManySsdInputEnvelopeSchema: z.ZodType<Prisma.SSDOfSetupCreateManySsdInputEnvelope> =
  z
    .object({
      data: z.union([
        z.lazy(() => SSDOfSetupCreateManySsdInputSchema),
        z.lazy(() => SSDOfSetupCreateManySsdInputSchema).array(),
      ]),
      skipDuplicates: z.boolean().optional(),
    })
    .strict();

export const SSDOfSetupUpsertWithWhereUniqueWithoutSsdInputSchema: z.ZodType<Prisma.SSDOfSetupUpsertWithWhereUniqueWithoutSsdInput> =
  z
    .object({
      where: z.lazy(() => SSDOfSetupWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => SSDOfSetupUpdateWithoutSsdInputSchema),
        z.lazy(() => SSDOfSetupUncheckedUpdateWithoutSsdInputSchema),
      ]),
      create: z.union([
        z.lazy(() => SSDOfSetupCreateWithoutSsdInputSchema),
        z.lazy(() => SSDOfSetupUncheckedCreateWithoutSsdInputSchema),
      ]),
    })
    .strict();

export const SSDOfSetupUpdateWithWhereUniqueWithoutSsdInputSchema: z.ZodType<Prisma.SSDOfSetupUpdateWithWhereUniqueWithoutSsdInput> =
  z
    .object({
      where: z.lazy(() => SSDOfSetupWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => SSDOfSetupUpdateWithoutSsdInputSchema),
        z.lazy(() => SSDOfSetupUncheckedUpdateWithoutSsdInputSchema),
      ]),
    })
    .strict();

export const SSDOfSetupUpdateManyWithWhereWithoutSsdInputSchema: z.ZodType<Prisma.SSDOfSetupUpdateManyWithWhereWithoutSsdInput> =
  z
    .object({
      where: z.lazy(() => SSDOfSetupScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => SSDOfSetupUpdateManyMutationInputSchema),
        z.lazy(() => SSDOfSetupUncheckedUpdateManyWithoutSsdInputSchema),
      ]),
    })
    .strict();

export const SSDOfSetupScalarWhereInputSchema: z.ZodType<Prisma.SSDOfSetupScalarWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => SSDOfSetupScalarWhereInputSchema),
          z.lazy(() => SSDOfSetupScalarWhereInputSchema).array(),
        ])
        .optional(),
      OR: z
        .lazy(() => SSDOfSetupScalarWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => SSDOfSetupScalarWhereInputSchema),
          z.lazy(() => SSDOfSetupScalarWhereInputSchema).array(),
        ])
        .optional(),
      ssd_id: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      setup_id: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
    })
    .strict();

export const SetupCreateWithoutGpuInputSchema: z.ZodType<Prisma.SetupCreateWithoutGpuInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      name: z.string().optional().nullable(),
      cpu: z.lazy(() => CPUCreateNestedOneWithoutSetupsInputSchema),
      hdd: z.lazy(() => HDDCreateNestedOneWithoutSetupsInputSchema),
      case: z.lazy(() => CaseCreateNestedOneWithoutSetupsInputSchema),
      ram: z.lazy(() => RAMCreateNestedOneWithoutSetupsInputSchema),
      psu: z.lazy(() => PSUCreateNestedOneWithoutSetupsInputSchema),
      monitors: z
        .lazy(() => MonitorsOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      sound_card: z.lazy(
        () => SoundCardCreateNestedOneWithoutSetupsInputSchema,
      ),
      cpu_cooler: z.lazy(
        () => CPUCoolerCreateNestedOneWithoutSetupsInputSchema,
      ),
      motherboard: z.lazy(
        () => MotherboardCreateNestedOneWithoutSetupsInputSchema,
      ),
      headphones: z.lazy(
        () => HeadphonesCreateNestedOneWithoutSetupsInputSchema,
      ),
      keyboard: z.lazy(() => KeyboardCreateNestedOneWithoutSetupsInputSchema),
      mouse: z.lazy(() => MouseCreateNestedOneWithoutSetupsInputSchema),
      speakers: z
        .lazy(() => SpeakersOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      webcam: z.lazy(() => WebcamCreateNestedOneWithoutSetupsInputSchema),
      case_fans: z
        .lazy(() => CaseFanOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      user: z.lazy(() => UserCreateNestedOneWithoutSetupsInputSchema),
    })
    .strict();

export const SetupUncheckedCreateWithoutGpuInputSchema: z.ZodType<Prisma.SetupUncheckedCreateWithoutGpuInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      cpu_id: z.string(),
      hdd_id: z.string(),
      case_id: z.string(),
      psu_id: z.string(),
      ram_id: z.string(),
      name: z.string().optional().nullable(),
      sound_card_id: z.string(),
      cpu_cooler_id: z.string(),
      motherboard_id: z.string(),
      headphones_id: z.string(),
      keyboard_id: z.string(),
      mouse_id: z.string(),
      webcam_id: z.string(),
      user_id: z.string(),
      monitors: z
        .lazy(
          () => MonitorsOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      speakers: z
        .lazy(
          () => SpeakersOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
      case_fans: z
        .lazy(
          () => CaseFanOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
    })
    .strict();

export const SetupCreateOrConnectWithoutGpuInputSchema: z.ZodType<Prisma.SetupCreateOrConnectWithoutGpuInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => SetupCreateWithoutGpuInputSchema),
        z.lazy(() => SetupUncheckedCreateWithoutGpuInputSchema),
      ]),
    })
    .strict();

export const SetupCreateManyGpuInputEnvelopeSchema: z.ZodType<Prisma.SetupCreateManyGpuInputEnvelope> =
  z
    .object({
      data: z.union([
        z.lazy(() => SetupCreateManyGpuInputSchema),
        z.lazy(() => SetupCreateManyGpuInputSchema).array(),
      ]),
      skipDuplicates: z.boolean().optional(),
    })
    .strict();

export const SetupUpsertWithWhereUniqueWithoutGpuInputSchema: z.ZodType<Prisma.SetupUpsertWithWhereUniqueWithoutGpuInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => SetupUpdateWithoutGpuInputSchema),
        z.lazy(() => SetupUncheckedUpdateWithoutGpuInputSchema),
      ]),
      create: z.union([
        z.lazy(() => SetupCreateWithoutGpuInputSchema),
        z.lazy(() => SetupUncheckedCreateWithoutGpuInputSchema),
      ]),
    })
    .strict();

export const SetupUpdateWithWhereUniqueWithoutGpuInputSchema: z.ZodType<Prisma.SetupUpdateWithWhereUniqueWithoutGpuInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => SetupUpdateWithoutGpuInputSchema),
        z.lazy(() => SetupUncheckedUpdateWithoutGpuInputSchema),
      ]),
    })
    .strict();

export const SetupUpdateManyWithWhereWithoutGpuInputSchema: z.ZodType<Prisma.SetupUpdateManyWithWhereWithoutGpuInput> =
  z
    .object({
      where: z.lazy(() => SetupScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => SetupUpdateManyMutationInputSchema),
        z.lazy(() => SetupUncheckedUpdateManyWithoutGpuInputSchema),
      ]),
    })
    .strict();

export const SetupCreateWithoutCaseInputSchema: z.ZodType<Prisma.SetupCreateWithoutCaseInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      name: z.string().optional().nullable(),
      cpu: z.lazy(() => CPUCreateNestedOneWithoutSetupsInputSchema),
      gpu: z.lazy(() => GPUCreateNestedOneWithoutSetupsInputSchema),
      hdd: z.lazy(() => HDDCreateNestedOneWithoutSetupsInputSchema),
      ram: z.lazy(() => RAMCreateNestedOneWithoutSetupsInputSchema),
      psu: z.lazy(() => PSUCreateNestedOneWithoutSetupsInputSchema),
      monitors: z
        .lazy(() => MonitorsOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      sound_card: z.lazy(
        () => SoundCardCreateNestedOneWithoutSetupsInputSchema,
      ),
      cpu_cooler: z.lazy(
        () => CPUCoolerCreateNestedOneWithoutSetupsInputSchema,
      ),
      motherboard: z.lazy(
        () => MotherboardCreateNestedOneWithoutSetupsInputSchema,
      ),
      headphones: z.lazy(
        () => HeadphonesCreateNestedOneWithoutSetupsInputSchema,
      ),
      keyboard: z.lazy(() => KeyboardCreateNestedOneWithoutSetupsInputSchema),
      mouse: z.lazy(() => MouseCreateNestedOneWithoutSetupsInputSchema),
      speakers: z
        .lazy(() => SpeakersOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      webcam: z.lazy(() => WebcamCreateNestedOneWithoutSetupsInputSchema),
      case_fans: z
        .lazy(() => CaseFanOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      user: z.lazy(() => UserCreateNestedOneWithoutSetupsInputSchema),
    })
    .strict();

export const SetupUncheckedCreateWithoutCaseInputSchema: z.ZodType<Prisma.SetupUncheckedCreateWithoutCaseInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      cpu_id: z.string(),
      gpu_id: z.string(),
      hdd_id: z.string(),
      psu_id: z.string(),
      ram_id: z.string(),
      name: z.string().optional().nullable(),
      sound_card_id: z.string(),
      cpu_cooler_id: z.string(),
      motherboard_id: z.string(),
      headphones_id: z.string(),
      keyboard_id: z.string(),
      mouse_id: z.string(),
      webcam_id: z.string(),
      user_id: z.string(),
      monitors: z
        .lazy(
          () => MonitorsOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      speakers: z
        .lazy(
          () => SpeakersOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
      case_fans: z
        .lazy(
          () => CaseFanOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
    })
    .strict();

export const SetupCreateOrConnectWithoutCaseInputSchema: z.ZodType<Prisma.SetupCreateOrConnectWithoutCaseInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => SetupCreateWithoutCaseInputSchema),
        z.lazy(() => SetupUncheckedCreateWithoutCaseInputSchema),
      ]),
    })
    .strict();

export const SetupCreateManyCaseInputEnvelopeSchema: z.ZodType<Prisma.SetupCreateManyCaseInputEnvelope> =
  z
    .object({
      data: z.union([
        z.lazy(() => SetupCreateManyCaseInputSchema),
        z.lazy(() => SetupCreateManyCaseInputSchema).array(),
      ]),
      skipDuplicates: z.boolean().optional(),
    })
    .strict();

export const SetupUpsertWithWhereUniqueWithoutCaseInputSchema: z.ZodType<Prisma.SetupUpsertWithWhereUniqueWithoutCaseInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => SetupUpdateWithoutCaseInputSchema),
        z.lazy(() => SetupUncheckedUpdateWithoutCaseInputSchema),
      ]),
      create: z.union([
        z.lazy(() => SetupCreateWithoutCaseInputSchema),
        z.lazy(() => SetupUncheckedCreateWithoutCaseInputSchema),
      ]),
    })
    .strict();

export const SetupUpdateWithWhereUniqueWithoutCaseInputSchema: z.ZodType<Prisma.SetupUpdateWithWhereUniqueWithoutCaseInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => SetupUpdateWithoutCaseInputSchema),
        z.lazy(() => SetupUncheckedUpdateWithoutCaseInputSchema),
      ]),
    })
    .strict();

export const SetupUpdateManyWithWhereWithoutCaseInputSchema: z.ZodType<Prisma.SetupUpdateManyWithWhereWithoutCaseInput> =
  z
    .object({
      where: z.lazy(() => SetupScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => SetupUpdateManyMutationInputSchema),
        z.lazy(() => SetupUncheckedUpdateManyWithoutCaseInputSchema),
      ]),
    })
    .strict();

export const SetupCreateWithoutPsuInputSchema: z.ZodType<Prisma.SetupCreateWithoutPsuInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      name: z.string().optional().nullable(),
      cpu: z.lazy(() => CPUCreateNestedOneWithoutSetupsInputSchema),
      gpu: z.lazy(() => GPUCreateNestedOneWithoutSetupsInputSchema),
      hdd: z.lazy(() => HDDCreateNestedOneWithoutSetupsInputSchema),
      case: z.lazy(() => CaseCreateNestedOneWithoutSetupsInputSchema),
      ram: z.lazy(() => RAMCreateNestedOneWithoutSetupsInputSchema),
      monitors: z
        .lazy(() => MonitorsOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      sound_card: z.lazy(
        () => SoundCardCreateNestedOneWithoutSetupsInputSchema,
      ),
      cpu_cooler: z.lazy(
        () => CPUCoolerCreateNestedOneWithoutSetupsInputSchema,
      ),
      motherboard: z.lazy(
        () => MotherboardCreateNestedOneWithoutSetupsInputSchema,
      ),
      headphones: z.lazy(
        () => HeadphonesCreateNestedOneWithoutSetupsInputSchema,
      ),
      keyboard: z.lazy(() => KeyboardCreateNestedOneWithoutSetupsInputSchema),
      mouse: z.lazy(() => MouseCreateNestedOneWithoutSetupsInputSchema),
      speakers: z
        .lazy(() => SpeakersOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      webcam: z.lazy(() => WebcamCreateNestedOneWithoutSetupsInputSchema),
      case_fans: z
        .lazy(() => CaseFanOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      user: z.lazy(() => UserCreateNestedOneWithoutSetupsInputSchema),
    })
    .strict();

export const SetupUncheckedCreateWithoutPsuInputSchema: z.ZodType<Prisma.SetupUncheckedCreateWithoutPsuInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      cpu_id: z.string(),
      gpu_id: z.string(),
      hdd_id: z.string(),
      case_id: z.string(),
      ram_id: z.string(),
      name: z.string().optional().nullable(),
      sound_card_id: z.string(),
      cpu_cooler_id: z.string(),
      motherboard_id: z.string(),
      headphones_id: z.string(),
      keyboard_id: z.string(),
      mouse_id: z.string(),
      webcam_id: z.string(),
      user_id: z.string(),
      monitors: z
        .lazy(
          () => MonitorsOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      speakers: z
        .lazy(
          () => SpeakersOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
      case_fans: z
        .lazy(
          () => CaseFanOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
    })
    .strict();

export const SetupCreateOrConnectWithoutPsuInputSchema: z.ZodType<Prisma.SetupCreateOrConnectWithoutPsuInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => SetupCreateWithoutPsuInputSchema),
        z.lazy(() => SetupUncheckedCreateWithoutPsuInputSchema),
      ]),
    })
    .strict();

export const SetupCreateManyPsuInputEnvelopeSchema: z.ZodType<Prisma.SetupCreateManyPsuInputEnvelope> =
  z
    .object({
      data: z.union([
        z.lazy(() => SetupCreateManyPsuInputSchema),
        z.lazy(() => SetupCreateManyPsuInputSchema).array(),
      ]),
      skipDuplicates: z.boolean().optional(),
    })
    .strict();

export const SetupUpsertWithWhereUniqueWithoutPsuInputSchema: z.ZodType<Prisma.SetupUpsertWithWhereUniqueWithoutPsuInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => SetupUpdateWithoutPsuInputSchema),
        z.lazy(() => SetupUncheckedUpdateWithoutPsuInputSchema),
      ]),
      create: z.union([
        z.lazy(() => SetupCreateWithoutPsuInputSchema),
        z.lazy(() => SetupUncheckedCreateWithoutPsuInputSchema),
      ]),
    })
    .strict();

export const SetupUpdateWithWhereUniqueWithoutPsuInputSchema: z.ZodType<Prisma.SetupUpdateWithWhereUniqueWithoutPsuInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => SetupUpdateWithoutPsuInputSchema),
        z.lazy(() => SetupUncheckedUpdateWithoutPsuInputSchema),
      ]),
    })
    .strict();

export const SetupUpdateManyWithWhereWithoutPsuInputSchema: z.ZodType<Prisma.SetupUpdateManyWithWhereWithoutPsuInput> =
  z
    .object({
      where: z.lazy(() => SetupScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => SetupUpdateManyMutationInputSchema),
        z.lazy(() => SetupUncheckedUpdateManyWithoutPsuInputSchema),
      ]),
    })
    .strict();

export const CPUCreateWithoutSetupsInputSchema: z.ZodType<Prisma.CPUCreateWithoutSetupsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      core_count: z.number().int().optional(),
      threads_count: z.number().int().optional(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      core_clock: z.number().optional(),
      boost_clock: z.number().optional(),
      amazonLink: z.string().optional().nullable(),
      tdp: z.number().int().optional().nullable(),
      graphics: z.boolean().optional().nullable(),
      smt: z.boolean().optional().nullable(),
    })
    .strict();

export const CPUUncheckedCreateWithoutSetupsInputSchema: z.ZodType<Prisma.CPUUncheckedCreateWithoutSetupsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      core_count: z.number().int().optional(),
      threads_count: z.number().int().optional(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      core_clock: z.number().optional(),
      boost_clock: z.number().optional(),
      amazonLink: z.string().optional().nullable(),
      tdp: z.number().int().optional().nullable(),
      graphics: z.boolean().optional().nullable(),
      smt: z.boolean().optional().nullable(),
    })
    .strict();

export const CPUCreateOrConnectWithoutSetupsInputSchema: z.ZodType<Prisma.CPUCreateOrConnectWithoutSetupsInput> =
  z
    .object({
      where: z.lazy(() => CPUWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => CPUCreateWithoutSetupsInputSchema),
        z.lazy(() => CPUUncheckedCreateWithoutSetupsInputSchema),
      ]),
    })
    .strict();

export const GPUCreateWithoutSetupsInputSchema: z.ZodType<Prisma.GPUCreateWithoutSetupsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      chipset: z.string().optional().nullable(),
      memory: z.number().int().optional().nullable(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      core_clock: z.number().int().optional().nullable(),
      boost_clock: z.number().int().optional().nullable(),
      color: z.string().optional().nullable(),
      length: z.number().int().optional().nullable(),
    })
    .strict();

export const GPUUncheckedCreateWithoutSetupsInputSchema: z.ZodType<Prisma.GPUUncheckedCreateWithoutSetupsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      chipset: z.string().optional().nullable(),
      memory: z.number().int().optional().nullable(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      core_clock: z.number().int().optional().nullable(),
      boost_clock: z.number().int().optional().nullable(),
      color: z.string().optional().nullable(),
      length: z.number().int().optional().nullable(),
    })
    .strict();

export const GPUCreateOrConnectWithoutSetupsInputSchema: z.ZodType<Prisma.GPUCreateOrConnectWithoutSetupsInput> =
  z
    .object({
      where: z.lazy(() => GPUWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => GPUCreateWithoutSetupsInputSchema),
        z.lazy(() => GPUUncheckedCreateWithoutSetupsInputSchema),
      ]),
    })
    .strict();

export const HDDCreateWithoutSetupsInputSchema: z.ZodType<Prisma.HDDCreateWithoutSetupsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      capacity: z.number().int().optional(),
      price_per_gb: z.number().int().optional(),
      amazonLink: z.string().optional().nullable(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      type: z.string().optional().nullable(),
      cache: z.number().int().optional().nullable(),
      form_factor: z.string().optional().nullable(),
      interface: z.string().optional().nullable(),
    })
    .strict();

export const HDDUncheckedCreateWithoutSetupsInputSchema: z.ZodType<Prisma.HDDUncheckedCreateWithoutSetupsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      capacity: z.number().int().optional(),
      price_per_gb: z.number().int().optional(),
      amazonLink: z.string().optional().nullable(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      type: z.string().optional().nullable(),
      cache: z.number().int().optional().nullable(),
      form_factor: z.string().optional().nullable(),
      interface: z.string().optional().nullable(),
    })
    .strict();

export const HDDCreateOrConnectWithoutSetupsInputSchema: z.ZodType<Prisma.HDDCreateOrConnectWithoutSetupsInput> =
  z
    .object({
      where: z.lazy(() => HDDWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => HDDCreateWithoutSetupsInputSchema),
        z.lazy(() => HDDUncheckedCreateWithoutSetupsInputSchema),
      ]),
    })
    .strict();

export const CaseCreateWithoutSetupsInputSchema: z.ZodType<Prisma.CaseCreateWithoutSetupsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      type: z.lazy(() => CaseTypeSchema).optional(),
      color: z.string().optional().nullable(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      included_PSU_W: z.number().int().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      side_panel: z.string().optional().nullable(),
      external_volume: z.string().optional().nullable(),
      internal_35_bays: z.number().int().optional().nullable(),
    })
    .strict();

export const CaseUncheckedCreateWithoutSetupsInputSchema: z.ZodType<Prisma.CaseUncheckedCreateWithoutSetupsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      type: z.lazy(() => CaseTypeSchema).optional(),
      color: z.string().optional().nullable(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      included_PSU_W: z.number().int().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      side_panel: z.string().optional().nullable(),
      external_volume: z.string().optional().nullable(),
      internal_35_bays: z.number().int().optional().nullable(),
    })
    .strict();

export const CaseCreateOrConnectWithoutSetupsInputSchema: z.ZodType<Prisma.CaseCreateOrConnectWithoutSetupsInput> =
  z
    .object({
      where: z.lazy(() => CaseWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => CaseCreateWithoutSetupsInputSchema),
        z.lazy(() => CaseUncheckedCreateWithoutSetupsInputSchema),
      ]),
    })
    .strict();

export const RAMCreateWithoutSetupsInputSchema: z.ZodType<Prisma.RAMCreateWithoutSetupsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      speed: z
        .union([
          z.lazy(() => RAMCreatespeedInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      modules: z
        .union([
          z.lazy(() => RAMCreatemodulesInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      price_per_gb: z.number().int().optional(),
      color: z.string().optional().nullable(),
      imageUrl: z.string().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      name: z.string(),
      first_word_latency: z.string().optional().nullable(),
      cas_latency: z.string().optional().nullable(),
    })
    .strict();

export const RAMUncheckedCreateWithoutSetupsInputSchema: z.ZodType<Prisma.RAMUncheckedCreateWithoutSetupsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      speed: z
        .union([
          z.lazy(() => RAMCreatespeedInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      modules: z
        .union([
          z.lazy(() => RAMCreatemodulesInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      price_per_gb: z.number().int().optional(),
      color: z.string().optional().nullable(),
      imageUrl: z.string().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      name: z.string(),
      first_word_latency: z.string().optional().nullable(),
      cas_latency: z.string().optional().nullable(),
    })
    .strict();

export const RAMCreateOrConnectWithoutSetupsInputSchema: z.ZodType<Prisma.RAMCreateOrConnectWithoutSetupsInput> =
  z
    .object({
      where: z.lazy(() => RAMWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => RAMCreateWithoutSetupsInputSchema),
        z.lazy(() => RAMUncheckedCreateWithoutSetupsInputSchema),
      ]),
    })
    .strict();

export const PSUCreateWithoutSetupsInputSchema: z.ZodType<Prisma.PSUCreateWithoutSetupsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      type: z.lazy(() => PSUTypeSchema).optional(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      efficiency: z.lazy(() => PSUEffSchema).optional(),
      amazonLink: z.string().optional().nullable(),
      wattage: z.number().int().optional().nullable(),
      modular: z.lazy(() => PSUModulSchema).optional(),
      color: z.string().optional().nullable(),
    })
    .strict();

export const PSUUncheckedCreateWithoutSetupsInputSchema: z.ZodType<Prisma.PSUUncheckedCreateWithoutSetupsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      type: z.lazy(() => PSUTypeSchema).optional(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      efficiency: z.lazy(() => PSUEffSchema).optional(),
      amazonLink: z.string().optional().nullable(),
      wattage: z.number().int().optional().nullable(),
      modular: z.lazy(() => PSUModulSchema).optional(),
      color: z.string().optional().nullable(),
    })
    .strict();

export const PSUCreateOrConnectWithoutSetupsInputSchema: z.ZodType<Prisma.PSUCreateOrConnectWithoutSetupsInput> =
  z
    .object({
      where: z.lazy(() => PSUWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => PSUCreateWithoutSetupsInputSchema),
        z.lazy(() => PSUUncheckedCreateWithoutSetupsInputSchema),
      ]),
    })
    .strict();

export const MonitorsOfSetupCreateWithoutSetupInputSchema: z.ZodType<Prisma.MonitorsOfSetupCreateWithoutSetupInput> =
  z
    .object({
      quantity: z.number().int(),
      monitor: z.lazy(() => MonitorCreateNestedOneWithoutSetupsInputSchema),
    })
    .strict();

export const MonitorsOfSetupUncheckedCreateWithoutSetupInputSchema: z.ZodType<Prisma.MonitorsOfSetupUncheckedCreateWithoutSetupInput> =
  z
    .object({
      monitor_id: z.string(),
      quantity: z.number().int(),
    })
    .strict();

export const MonitorsOfSetupCreateOrConnectWithoutSetupInputSchema: z.ZodType<Prisma.MonitorsOfSetupCreateOrConnectWithoutSetupInput> =
  z
    .object({
      where: z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => MonitorsOfSetupCreateWithoutSetupInputSchema),
        z.lazy(() => MonitorsOfSetupUncheckedCreateWithoutSetupInputSchema),
      ]),
    })
    .strict();

export const MonitorsOfSetupCreateManySetupInputEnvelopeSchema: z.ZodType<Prisma.MonitorsOfSetupCreateManySetupInputEnvelope> =
  z
    .object({
      data: z.union([
        z.lazy(() => MonitorsOfSetupCreateManySetupInputSchema),
        z.lazy(() => MonitorsOfSetupCreateManySetupInputSchema).array(),
      ]),
      skipDuplicates: z.boolean().optional(),
    })
    .strict();

export const SSDOfSetupCreateWithoutSetupInputSchema: z.ZodType<Prisma.SSDOfSetupCreateWithoutSetupInput> =
  z
    .object({
      ssd: z.lazy(() => SSDCreateNestedOneWithoutSetupsInputSchema),
    })
    .strict();

export const SSDOfSetupUncheckedCreateWithoutSetupInputSchema: z.ZodType<Prisma.SSDOfSetupUncheckedCreateWithoutSetupInput> =
  z
    .object({
      ssd_id: z.string(),
    })
    .strict();

export const SSDOfSetupCreateOrConnectWithoutSetupInputSchema: z.ZodType<Prisma.SSDOfSetupCreateOrConnectWithoutSetupInput> =
  z
    .object({
      where: z.lazy(() => SSDOfSetupWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => SSDOfSetupCreateWithoutSetupInputSchema),
        z.lazy(() => SSDOfSetupUncheckedCreateWithoutSetupInputSchema),
      ]),
    })
    .strict();

export const SSDOfSetupCreateManySetupInputEnvelopeSchema: z.ZodType<Prisma.SSDOfSetupCreateManySetupInputEnvelope> =
  z
    .object({
      data: z.union([
        z.lazy(() => SSDOfSetupCreateManySetupInputSchema),
        z.lazy(() => SSDOfSetupCreateManySetupInputSchema).array(),
      ]),
      skipDuplicates: z.boolean().optional(),
    })
    .strict();

export const SoundCardCreateWithoutSetupsInputSchema: z.ZodType<Prisma.SoundCardCreateWithoutSetupsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      channels: z.string().optional().nullable(),
      digital_audio: z.string().optional().nullable(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      snr: z.number().int().optional().nullable(),
      sample_rate: z.number().int().optional().nullable(),
      chipset: z.string().optional().nullable(),
      interface: z.string().optional().nullable(),
    })
    .strict();

export const SoundCardUncheckedCreateWithoutSetupsInputSchema: z.ZodType<Prisma.SoundCardUncheckedCreateWithoutSetupsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      channels: z.string().optional().nullable(),
      digital_audio: z.string().optional().nullable(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      snr: z.number().int().optional().nullable(),
      sample_rate: z.number().int().optional().nullable(),
      chipset: z.string().optional().nullable(),
      interface: z.string().optional().nullable(),
    })
    .strict();

export const SoundCardCreateOrConnectWithoutSetupsInputSchema: z.ZodType<Prisma.SoundCardCreateOrConnectWithoutSetupsInput> =
  z
    .object({
      where: z.lazy(() => SoundCardWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => SoundCardCreateWithoutSetupsInputSchema),
        z.lazy(() => SoundCardUncheckedCreateWithoutSetupsInputSchema),
      ]),
    })
    .strict();

export const CPUCoolerCreateWithoutSetupsInputSchema: z.ZodType<Prisma.CPUCoolerCreateWithoutSetupsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      rpm: z.number().int().optional().nullable(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      noise_level: z.number().int().optional().nullable(),
      color: z.string().optional().nullable(),
      size: z.number().int().optional().nullable(),
    })
    .strict();

export const CPUCoolerUncheckedCreateWithoutSetupsInputSchema: z.ZodType<Prisma.CPUCoolerUncheckedCreateWithoutSetupsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      rpm: z.number().int().optional().nullable(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      noise_level: z.number().int().optional().nullable(),
      color: z.string().optional().nullable(),
      size: z.number().int().optional().nullable(),
    })
    .strict();

export const CPUCoolerCreateOrConnectWithoutSetupsInputSchema: z.ZodType<Prisma.CPUCoolerCreateOrConnectWithoutSetupsInput> =
  z
    .object({
      where: z.lazy(() => CPUCoolerWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => CPUCoolerCreateWithoutSetupsInputSchema),
        z.lazy(() => CPUCoolerUncheckedCreateWithoutSetupsInputSchema),
      ]),
    })
    .strict();

export const MotherboardCreateWithoutSetupsInputSchema: z.ZodType<Prisma.MotherboardCreateWithoutSetupsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      socket: z
        .union([
          z.lazy(() => MotherboardCreatesocketInputSchema),
          z.string().array(),
        ])
        .optional(),
      form_factor: z.string(),
      max_memory: z.number().int().optional(),
      memory_slots: z.number().int().optional(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      color: z.string().optional().nullable(),
    })
    .strict();

export const MotherboardUncheckedCreateWithoutSetupsInputSchema: z.ZodType<Prisma.MotherboardUncheckedCreateWithoutSetupsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      socket: z
        .union([
          z.lazy(() => MotherboardCreatesocketInputSchema),
          z.string().array(),
        ])
        .optional(),
      form_factor: z.string(),
      max_memory: z.number().int().optional(),
      memory_slots: z.number().int().optional(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      color: z.string().optional().nullable(),
    })
    .strict();

export const MotherboardCreateOrConnectWithoutSetupsInputSchema: z.ZodType<Prisma.MotherboardCreateOrConnectWithoutSetupsInput> =
  z
    .object({
      where: z.lazy(() => MotherboardWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => MotherboardCreateWithoutSetupsInputSchema),
        z.lazy(() => MotherboardUncheckedCreateWithoutSetupsInputSchema),
      ]),
    })
    .strict();

export const HeadphonesCreateWithoutSetupsInputSchema: z.ZodType<Prisma.HeadphonesCreateWithoutSetupsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      type: z.lazy(() => HeadphoneTypesSchema).optional(),
      frequency_response: z
        .union([
          z.lazy(() => HeadphonesCreatefrequency_responseInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      microphone: z.boolean().optional().nullable(),
      wireless: z.boolean().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      noise_cancellation: z.boolean().optional().nullable(),
      enclosure_type: z.lazy(() => EnclosureTypeSchema).optional(),
      color: z.string().optional().nullable(),
    })
    .strict();

export const HeadphonesUncheckedCreateWithoutSetupsInputSchema: z.ZodType<Prisma.HeadphonesUncheckedCreateWithoutSetupsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      type: z.lazy(() => HeadphoneTypesSchema).optional(),
      frequency_response: z
        .union([
          z.lazy(() => HeadphonesCreatefrequency_responseInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      microphone: z.boolean().optional().nullable(),
      wireless: z.boolean().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      noise_cancellation: z.boolean().optional().nullable(),
      enclosure_type: z.lazy(() => EnclosureTypeSchema).optional(),
      color: z.string().optional().nullable(),
    })
    .strict();

export const HeadphonesCreateOrConnectWithoutSetupsInputSchema: z.ZodType<Prisma.HeadphonesCreateOrConnectWithoutSetupsInput> =
  z
    .object({
      where: z.lazy(() => HeadphonesWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => HeadphonesCreateWithoutSetupsInputSchema),
        z.lazy(() => HeadphonesUncheckedCreateWithoutSetupsInputSchema),
      ]),
    })
    .strict();

export const KeyboardCreateWithoutSetupsInputSchema: z.ZodType<Prisma.KeyboardCreateWithoutSetupsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      style: z.lazy(() => KeyboardStyleSchema).optional(),
      switches: z.string().optional().nullable(),
      backlit: z.string().optional().nullable(),
      name: z.string(),
      amazonLink: z.string().optional().nullable(),
      imageUrl: z.string().optional().nullable(),
      tenkeyless: z.boolean().optional().nullable(),
      connection_type: z.lazy(() => ConnectionTypeSchema).optional(),
      color: z.string().optional().nullable(),
    })
    .strict();

export const KeyboardUncheckedCreateWithoutSetupsInputSchema: z.ZodType<Prisma.KeyboardUncheckedCreateWithoutSetupsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      style: z.lazy(() => KeyboardStyleSchema).optional(),
      switches: z.string().optional().nullable(),
      backlit: z.string().optional().nullable(),
      name: z.string(),
      amazonLink: z.string().optional().nullable(),
      imageUrl: z.string().optional().nullable(),
      tenkeyless: z.boolean().optional().nullable(),
      connection_type: z.lazy(() => ConnectionTypeSchema).optional(),
      color: z.string().optional().nullable(),
    })
    .strict();

export const KeyboardCreateOrConnectWithoutSetupsInputSchema: z.ZodType<Prisma.KeyboardCreateOrConnectWithoutSetupsInput> =
  z
    .object({
      where: z.lazy(() => KeyboardWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => KeyboardCreateWithoutSetupsInputSchema),
        z.lazy(() => KeyboardUncheckedCreateWithoutSetupsInputSchema),
      ]),
    })
    .strict();

export const MouseCreateWithoutSetupsInputSchema: z.ZodType<Prisma.MouseCreateWithoutSetupsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      tracking_method: z.lazy(() => MouseTrackMethodSchema).optional(),
      connection_type: z.lazy(() => ConnectionTypeSchema).optional(),
      max_dpi: z.number().int().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      hand_orientation: z.lazy(() => MouseOrientationSchema).optional(),
      color: z.string().optional().nullable(),
    })
    .strict();

export const MouseUncheckedCreateWithoutSetupsInputSchema: z.ZodType<Prisma.MouseUncheckedCreateWithoutSetupsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      tracking_method: z.lazy(() => MouseTrackMethodSchema).optional(),
      connection_type: z.lazy(() => ConnectionTypeSchema).optional(),
      max_dpi: z.number().int().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      hand_orientation: z.lazy(() => MouseOrientationSchema).optional(),
      color: z.string().optional().nullable(),
    })
    .strict();

export const MouseCreateOrConnectWithoutSetupsInputSchema: z.ZodType<Prisma.MouseCreateOrConnectWithoutSetupsInput> =
  z
    .object({
      where: z.lazy(() => MouseWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => MouseCreateWithoutSetupsInputSchema),
        z.lazy(() => MouseUncheckedCreateWithoutSetupsInputSchema),
      ]),
    })
    .strict();

export const SpeakersOfSetupCreateWithoutSetupInputSchema: z.ZodType<Prisma.SpeakersOfSetupCreateWithoutSetupInput> =
  z
    .object({
      quantity: z.number().int(),
      speakers: z.lazy(() => SpeakersCreateNestedOneWithoutSetupsInputSchema),
    })
    .strict();

export const SpeakersOfSetupUncheckedCreateWithoutSetupInputSchema: z.ZodType<Prisma.SpeakersOfSetupUncheckedCreateWithoutSetupInput> =
  z
    .object({
      speakers_id: z.string(),
      quantity: z.number().int(),
    })
    .strict();

export const SpeakersOfSetupCreateOrConnectWithoutSetupInputSchema: z.ZodType<Prisma.SpeakersOfSetupCreateOrConnectWithoutSetupInput> =
  z
    .object({
      where: z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => SpeakersOfSetupCreateWithoutSetupInputSchema),
        z.lazy(() => SpeakersOfSetupUncheckedCreateWithoutSetupInputSchema),
      ]),
    })
    .strict();

export const SpeakersOfSetupCreateManySetupInputEnvelopeSchema: z.ZodType<Prisma.SpeakersOfSetupCreateManySetupInputEnvelope> =
  z
    .object({
      data: z.union([
        z.lazy(() => SpeakersOfSetupCreateManySetupInputSchema),
        z.lazy(() => SpeakersOfSetupCreateManySetupInputSchema).array(),
      ]),
      skipDuplicates: z.boolean().optional(),
    })
    .strict();

export const WebcamCreateWithoutSetupsInputSchema: z.ZodType<Prisma.WebcamCreateWithoutSetupsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      resolutions: z
        .union([
          z.lazy(() => WebcamCreateresolutionsInputSchema),
          z.string().array(),
        ])
        .optional(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      connection: z.lazy(() => ConnectionTypeSchema).optional(),
      focus_type: z.lazy(() => FocusTypeSchema).optional(),
      os: z
        .union([z.lazy(() => WebcamCreateosInputSchema), z.string().array()])
        .optional(),
      amazonLink: z.string().optional().nullable(),
      fov: z.number().int().optional().nullable(),
    })
    .strict();

export const WebcamUncheckedCreateWithoutSetupsInputSchema: z.ZodType<Prisma.WebcamUncheckedCreateWithoutSetupsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      resolutions: z
        .union([
          z.lazy(() => WebcamCreateresolutionsInputSchema),
          z.string().array(),
        ])
        .optional(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      connection: z.lazy(() => ConnectionTypeSchema).optional(),
      focus_type: z.lazy(() => FocusTypeSchema).optional(),
      os: z
        .union([z.lazy(() => WebcamCreateosInputSchema), z.string().array()])
        .optional(),
      amazonLink: z.string().optional().nullable(),
      fov: z.number().int().optional().nullable(),
    })
    .strict();

export const WebcamCreateOrConnectWithoutSetupsInputSchema: z.ZodType<Prisma.WebcamCreateOrConnectWithoutSetupsInput> =
  z
    .object({
      where: z.lazy(() => WebcamWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => WebcamCreateWithoutSetupsInputSchema),
        z.lazy(() => WebcamUncheckedCreateWithoutSetupsInputSchema),
      ]),
    })
    .strict();

export const CaseFanOfSetupCreateWithoutSetupInputSchema: z.ZodType<Prisma.CaseFanOfSetupCreateWithoutSetupInput> =
  z
    .object({
      quantity: z.number().int(),
      case_fan: z.lazy(() => CaseFanCreateNestedOneWithoutSetupsInputSchema),
    })
    .strict();

export const CaseFanOfSetupUncheckedCreateWithoutSetupInputSchema: z.ZodType<Prisma.CaseFanOfSetupUncheckedCreateWithoutSetupInput> =
  z
    .object({
      case_fan_id: z.string(),
      quantity: z.number().int(),
    })
    .strict();

export const CaseFanOfSetupCreateOrConnectWithoutSetupInputSchema: z.ZodType<Prisma.CaseFanOfSetupCreateOrConnectWithoutSetupInput> =
  z
    .object({
      where: z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => CaseFanOfSetupCreateWithoutSetupInputSchema),
        z.lazy(() => CaseFanOfSetupUncheckedCreateWithoutSetupInputSchema),
      ]),
    })
    .strict();

export const CaseFanOfSetupCreateManySetupInputEnvelopeSchema: z.ZodType<Prisma.CaseFanOfSetupCreateManySetupInputEnvelope> =
  z
    .object({
      data: z.union([
        z.lazy(() => CaseFanOfSetupCreateManySetupInputSchema),
        z.lazy(() => CaseFanOfSetupCreateManySetupInputSchema).array(),
      ]),
      skipDuplicates: z.boolean().optional(),
    })
    .strict();

export const UserCreateWithoutSetupsInputSchema: z.ZodType<Prisma.UserCreateWithoutSetupsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      name: z.string().optional().nullable(),
      email: z.string().optional().nullable(),
      emailVerified: z.coerce.date().optional().nullable(),
      image: z.string().optional().nullable(),
      role: z.lazy(() => UserRoleSchema).optional(),
      accounts: z
        .lazy(() => AccountCreateNestedManyWithoutUserInputSchema)
        .optional(),
      sessions: z
        .lazy(() => SessionCreateNestedManyWithoutUserInputSchema)
        .optional(),
    })
    .strict();

export const UserUncheckedCreateWithoutSetupsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutSetupsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      name: z.string().optional().nullable(),
      email: z.string().optional().nullable(),
      emailVerified: z.coerce.date().optional().nullable(),
      image: z.string().optional().nullable(),
      role: z.lazy(() => UserRoleSchema).optional(),
      accounts: z
        .lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema)
        .optional(),
      sessions: z
        .lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema)
        .optional(),
    })
    .strict();

export const UserCreateOrConnectWithoutSetupsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutSetupsInput> =
  z
    .object({
      where: z.lazy(() => UserWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => UserCreateWithoutSetupsInputSchema),
        z.lazy(() => UserUncheckedCreateWithoutSetupsInputSchema),
      ]),
    })
    .strict();

export const CPUUpsertWithoutSetupsInputSchema: z.ZodType<Prisma.CPUUpsertWithoutSetupsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => CPUUpdateWithoutSetupsInputSchema),
        z.lazy(() => CPUUncheckedUpdateWithoutSetupsInputSchema),
      ]),
      create: z.union([
        z.lazy(() => CPUCreateWithoutSetupsInputSchema),
        z.lazy(() => CPUUncheckedCreateWithoutSetupsInputSchema),
      ]),
      where: z.lazy(() => CPUWhereInputSchema).optional(),
    })
    .strict();

export const CPUUpdateToOneWithWhereWithoutSetupsInputSchema: z.ZodType<Prisma.CPUUpdateToOneWithWhereWithoutSetupsInput> =
  z
    .object({
      where: z.lazy(() => CPUWhereInputSchema).optional(),
      data: z.union([
        z.lazy(() => CPUUpdateWithoutSetupsInputSchema),
        z.lazy(() => CPUUncheckedUpdateWithoutSetupsInputSchema),
      ]),
    })
    .strict();

export const CPUUpdateWithoutSetupsInputSchema: z.ZodType<Prisma.CPUUpdateWithoutSetupsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      core_count: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      threads_count: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      core_clock: z
        .union([
          z.number(),
          z.lazy(() => FloatFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      boost_clock: z
        .union([
          z.number(),
          z.lazy(() => FloatFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      tdp: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      graphics: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      smt: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const CPUUncheckedUpdateWithoutSetupsInputSchema: z.ZodType<Prisma.CPUUncheckedUpdateWithoutSetupsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      core_count: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      threads_count: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      core_clock: z
        .union([
          z.number(),
          z.lazy(() => FloatFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      boost_clock: z
        .union([
          z.number(),
          z.lazy(() => FloatFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      tdp: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      graphics: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      smt: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const GPUUpsertWithoutSetupsInputSchema: z.ZodType<Prisma.GPUUpsertWithoutSetupsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => GPUUpdateWithoutSetupsInputSchema),
        z.lazy(() => GPUUncheckedUpdateWithoutSetupsInputSchema),
      ]),
      create: z.union([
        z.lazy(() => GPUCreateWithoutSetupsInputSchema),
        z.lazy(() => GPUUncheckedCreateWithoutSetupsInputSchema),
      ]),
      where: z.lazy(() => GPUWhereInputSchema).optional(),
    })
    .strict();

export const GPUUpdateToOneWithWhereWithoutSetupsInputSchema: z.ZodType<Prisma.GPUUpdateToOneWithWhereWithoutSetupsInput> =
  z
    .object({
      where: z.lazy(() => GPUWhereInputSchema).optional(),
      data: z.union([
        z.lazy(() => GPUUpdateWithoutSetupsInputSchema),
        z.lazy(() => GPUUncheckedUpdateWithoutSetupsInputSchema),
      ]),
    })
    .strict();

export const GPUUpdateWithoutSetupsInputSchema: z.ZodType<Prisma.GPUUpdateWithoutSetupsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      chipset: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      memory: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      core_clock: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      boost_clock: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      length: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const GPUUncheckedUpdateWithoutSetupsInputSchema: z.ZodType<Prisma.GPUUncheckedUpdateWithoutSetupsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      chipset: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      memory: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      core_clock: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      boost_clock: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      length: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const HDDUpsertWithoutSetupsInputSchema: z.ZodType<Prisma.HDDUpsertWithoutSetupsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => HDDUpdateWithoutSetupsInputSchema),
        z.lazy(() => HDDUncheckedUpdateWithoutSetupsInputSchema),
      ]),
      create: z.union([
        z.lazy(() => HDDCreateWithoutSetupsInputSchema),
        z.lazy(() => HDDUncheckedCreateWithoutSetupsInputSchema),
      ]),
      where: z.lazy(() => HDDWhereInputSchema).optional(),
    })
    .strict();

export const HDDUpdateToOneWithWhereWithoutSetupsInputSchema: z.ZodType<Prisma.HDDUpdateToOneWithWhereWithoutSetupsInput> =
  z
    .object({
      where: z.lazy(() => HDDWhereInputSchema).optional(),
      data: z.union([
        z.lazy(() => HDDUpdateWithoutSetupsInputSchema),
        z.lazy(() => HDDUncheckedUpdateWithoutSetupsInputSchema),
      ]),
    })
    .strict();

export const HDDUpdateWithoutSetupsInputSchema: z.ZodType<Prisma.HDDUpdateWithoutSetupsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      capacity: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      price_per_gb: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      type: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      cache: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      form_factor: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      interface: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const HDDUncheckedUpdateWithoutSetupsInputSchema: z.ZodType<Prisma.HDDUncheckedUpdateWithoutSetupsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      capacity: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      price_per_gb: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      type: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      cache: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      form_factor: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      interface: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const CaseUpsertWithoutSetupsInputSchema: z.ZodType<Prisma.CaseUpsertWithoutSetupsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => CaseUpdateWithoutSetupsInputSchema),
        z.lazy(() => CaseUncheckedUpdateWithoutSetupsInputSchema),
      ]),
      create: z.union([
        z.lazy(() => CaseCreateWithoutSetupsInputSchema),
        z.lazy(() => CaseUncheckedCreateWithoutSetupsInputSchema),
      ]),
      where: z.lazy(() => CaseWhereInputSchema).optional(),
    })
    .strict();

export const CaseUpdateToOneWithWhereWithoutSetupsInputSchema: z.ZodType<Prisma.CaseUpdateToOneWithWhereWithoutSetupsInput> =
  z
    .object({
      where: z.lazy(() => CaseWhereInputSchema).optional(),
      data: z.union([
        z.lazy(() => CaseUpdateWithoutSetupsInputSchema),
        z.lazy(() => CaseUncheckedUpdateWithoutSetupsInputSchema),
      ]),
    })
    .strict();

export const CaseUpdateWithoutSetupsInputSchema: z.ZodType<Prisma.CaseUpdateWithoutSetupsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      type: z
        .union([
          z.lazy(() => CaseTypeSchema),
          z.lazy(() => EnumCaseTypeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      included_PSU_W: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      side_panel: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      external_volume: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      internal_35_bays: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const CaseUncheckedUpdateWithoutSetupsInputSchema: z.ZodType<Prisma.CaseUncheckedUpdateWithoutSetupsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      type: z
        .union([
          z.lazy(() => CaseTypeSchema),
          z.lazy(() => EnumCaseTypeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      included_PSU_W: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      side_panel: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      external_volume: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      internal_35_bays: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const RAMUpsertWithoutSetupsInputSchema: z.ZodType<Prisma.RAMUpsertWithoutSetupsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => RAMUpdateWithoutSetupsInputSchema),
        z.lazy(() => RAMUncheckedUpdateWithoutSetupsInputSchema),
      ]),
      create: z.union([
        z.lazy(() => RAMCreateWithoutSetupsInputSchema),
        z.lazy(() => RAMUncheckedCreateWithoutSetupsInputSchema),
      ]),
      where: z.lazy(() => RAMWhereInputSchema).optional(),
    })
    .strict();

export const RAMUpdateToOneWithWhereWithoutSetupsInputSchema: z.ZodType<Prisma.RAMUpdateToOneWithWhereWithoutSetupsInput> =
  z
    .object({
      where: z.lazy(() => RAMWhereInputSchema).optional(),
      data: z.union([
        z.lazy(() => RAMUpdateWithoutSetupsInputSchema),
        z.lazy(() => RAMUncheckedUpdateWithoutSetupsInputSchema),
      ]),
    })
    .strict();

export const RAMUpdateWithoutSetupsInputSchema: z.ZodType<Prisma.RAMUpdateWithoutSetupsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      speed: z
        .union([
          z.lazy(() => RAMUpdatespeedInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      modules: z
        .union([
          z.lazy(() => RAMUpdatemodulesInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      price_per_gb: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      first_word_latency: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      cas_latency: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const RAMUncheckedUpdateWithoutSetupsInputSchema: z.ZodType<Prisma.RAMUncheckedUpdateWithoutSetupsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      speed: z
        .union([
          z.lazy(() => RAMUpdatespeedInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      modules: z
        .union([
          z.lazy(() => RAMUpdatemodulesInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      price_per_gb: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      first_word_latency: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      cas_latency: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const PSUUpsertWithoutSetupsInputSchema: z.ZodType<Prisma.PSUUpsertWithoutSetupsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => PSUUpdateWithoutSetupsInputSchema),
        z.lazy(() => PSUUncheckedUpdateWithoutSetupsInputSchema),
      ]),
      create: z.union([
        z.lazy(() => PSUCreateWithoutSetupsInputSchema),
        z.lazy(() => PSUUncheckedCreateWithoutSetupsInputSchema),
      ]),
      where: z.lazy(() => PSUWhereInputSchema).optional(),
    })
    .strict();

export const PSUUpdateToOneWithWhereWithoutSetupsInputSchema: z.ZodType<Prisma.PSUUpdateToOneWithWhereWithoutSetupsInput> =
  z
    .object({
      where: z.lazy(() => PSUWhereInputSchema).optional(),
      data: z.union([
        z.lazy(() => PSUUpdateWithoutSetupsInputSchema),
        z.lazy(() => PSUUncheckedUpdateWithoutSetupsInputSchema),
      ]),
    })
    .strict();

export const PSUUpdateWithoutSetupsInputSchema: z.ZodType<Prisma.PSUUpdateWithoutSetupsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      type: z
        .union([
          z.lazy(() => PSUTypeSchema),
          z.lazy(() => EnumPSUTypeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      efficiency: z
        .union([
          z.lazy(() => PSUEffSchema),
          z.lazy(() => EnumPSUEffFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      wattage: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      modular: z
        .union([
          z.lazy(() => PSUModulSchema),
          z.lazy(() => EnumPSUModulFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const PSUUncheckedUpdateWithoutSetupsInputSchema: z.ZodType<Prisma.PSUUncheckedUpdateWithoutSetupsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      type: z
        .union([
          z.lazy(() => PSUTypeSchema),
          z.lazy(() => EnumPSUTypeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      efficiency: z
        .union([
          z.lazy(() => PSUEffSchema),
          z.lazy(() => EnumPSUEffFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      wattage: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      modular: z
        .union([
          z.lazy(() => PSUModulSchema),
          z.lazy(() => EnumPSUModulFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const MonitorsOfSetupUpsertWithWhereUniqueWithoutSetupInputSchema: z.ZodType<Prisma.MonitorsOfSetupUpsertWithWhereUniqueWithoutSetupInput> =
  z
    .object({
      where: z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => MonitorsOfSetupUpdateWithoutSetupInputSchema),
        z.lazy(() => MonitorsOfSetupUncheckedUpdateWithoutSetupInputSchema),
      ]),
      create: z.union([
        z.lazy(() => MonitorsOfSetupCreateWithoutSetupInputSchema),
        z.lazy(() => MonitorsOfSetupUncheckedCreateWithoutSetupInputSchema),
      ]),
    })
    .strict();

export const MonitorsOfSetupUpdateWithWhereUniqueWithoutSetupInputSchema: z.ZodType<Prisma.MonitorsOfSetupUpdateWithWhereUniqueWithoutSetupInput> =
  z
    .object({
      where: z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => MonitorsOfSetupUpdateWithoutSetupInputSchema),
        z.lazy(() => MonitorsOfSetupUncheckedUpdateWithoutSetupInputSchema),
      ]),
    })
    .strict();

export const MonitorsOfSetupUpdateManyWithWhereWithoutSetupInputSchema: z.ZodType<Prisma.MonitorsOfSetupUpdateManyWithWhereWithoutSetupInput> =
  z
    .object({
      where: z.lazy(() => MonitorsOfSetupScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => MonitorsOfSetupUpdateManyMutationInputSchema),
        z.lazy(() => MonitorsOfSetupUncheckedUpdateManyWithoutSetupInputSchema),
      ]),
    })
    .strict();

export const MonitorsOfSetupScalarWhereInputSchema: z.ZodType<Prisma.MonitorsOfSetupScalarWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => MonitorsOfSetupScalarWhereInputSchema),
          z.lazy(() => MonitorsOfSetupScalarWhereInputSchema).array(),
        ])
        .optional(),
      OR: z
        .lazy(() => MonitorsOfSetupScalarWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => MonitorsOfSetupScalarWhereInputSchema),
          z.lazy(() => MonitorsOfSetupScalarWhereInputSchema).array(),
        ])
        .optional(),
      monitor_id: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      setup_id: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      quantity: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
    })
    .strict();

export const SSDOfSetupUpsertWithWhereUniqueWithoutSetupInputSchema: z.ZodType<Prisma.SSDOfSetupUpsertWithWhereUniqueWithoutSetupInput> =
  z
    .object({
      where: z.lazy(() => SSDOfSetupWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => SSDOfSetupUpdateWithoutSetupInputSchema),
        z.lazy(() => SSDOfSetupUncheckedUpdateWithoutSetupInputSchema),
      ]),
      create: z.union([
        z.lazy(() => SSDOfSetupCreateWithoutSetupInputSchema),
        z.lazy(() => SSDOfSetupUncheckedCreateWithoutSetupInputSchema),
      ]),
    })
    .strict();

export const SSDOfSetupUpdateWithWhereUniqueWithoutSetupInputSchema: z.ZodType<Prisma.SSDOfSetupUpdateWithWhereUniqueWithoutSetupInput> =
  z
    .object({
      where: z.lazy(() => SSDOfSetupWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => SSDOfSetupUpdateWithoutSetupInputSchema),
        z.lazy(() => SSDOfSetupUncheckedUpdateWithoutSetupInputSchema),
      ]),
    })
    .strict();

export const SSDOfSetupUpdateManyWithWhereWithoutSetupInputSchema: z.ZodType<Prisma.SSDOfSetupUpdateManyWithWhereWithoutSetupInput> =
  z
    .object({
      where: z.lazy(() => SSDOfSetupScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => SSDOfSetupUpdateManyMutationInputSchema),
        z.lazy(() => SSDOfSetupUncheckedUpdateManyWithoutSetupInputSchema),
      ]),
    })
    .strict();

export const SoundCardUpsertWithoutSetupsInputSchema: z.ZodType<Prisma.SoundCardUpsertWithoutSetupsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => SoundCardUpdateWithoutSetupsInputSchema),
        z.lazy(() => SoundCardUncheckedUpdateWithoutSetupsInputSchema),
      ]),
      create: z.union([
        z.lazy(() => SoundCardCreateWithoutSetupsInputSchema),
        z.lazy(() => SoundCardUncheckedCreateWithoutSetupsInputSchema),
      ]),
      where: z.lazy(() => SoundCardWhereInputSchema).optional(),
    })
    .strict();

export const SoundCardUpdateToOneWithWhereWithoutSetupsInputSchema: z.ZodType<Prisma.SoundCardUpdateToOneWithWhereWithoutSetupsInput> =
  z
    .object({
      where: z.lazy(() => SoundCardWhereInputSchema).optional(),
      data: z.union([
        z.lazy(() => SoundCardUpdateWithoutSetupsInputSchema),
        z.lazy(() => SoundCardUncheckedUpdateWithoutSetupsInputSchema),
      ]),
    })
    .strict();

export const SoundCardUpdateWithoutSetupsInputSchema: z.ZodType<Prisma.SoundCardUpdateWithoutSetupsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      channels: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      digital_audio: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      snr: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      sample_rate: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      chipset: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      interface: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const SoundCardUncheckedUpdateWithoutSetupsInputSchema: z.ZodType<Prisma.SoundCardUncheckedUpdateWithoutSetupsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      channels: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      digital_audio: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      snr: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      sample_rate: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      chipset: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      interface: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const CPUCoolerUpsertWithoutSetupsInputSchema: z.ZodType<Prisma.CPUCoolerUpsertWithoutSetupsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => CPUCoolerUpdateWithoutSetupsInputSchema),
        z.lazy(() => CPUCoolerUncheckedUpdateWithoutSetupsInputSchema),
      ]),
      create: z.union([
        z.lazy(() => CPUCoolerCreateWithoutSetupsInputSchema),
        z.lazy(() => CPUCoolerUncheckedCreateWithoutSetupsInputSchema),
      ]),
      where: z.lazy(() => CPUCoolerWhereInputSchema).optional(),
    })
    .strict();

export const CPUCoolerUpdateToOneWithWhereWithoutSetupsInputSchema: z.ZodType<Prisma.CPUCoolerUpdateToOneWithWhereWithoutSetupsInput> =
  z
    .object({
      where: z.lazy(() => CPUCoolerWhereInputSchema).optional(),
      data: z.union([
        z.lazy(() => CPUCoolerUpdateWithoutSetupsInputSchema),
        z.lazy(() => CPUCoolerUncheckedUpdateWithoutSetupsInputSchema),
      ]),
    })
    .strict();

export const CPUCoolerUpdateWithoutSetupsInputSchema: z.ZodType<Prisma.CPUCoolerUpdateWithoutSetupsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      rpm: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      noise_level: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      size: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const CPUCoolerUncheckedUpdateWithoutSetupsInputSchema: z.ZodType<Prisma.CPUCoolerUncheckedUpdateWithoutSetupsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      rpm: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      noise_level: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      size: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const MotherboardUpsertWithoutSetupsInputSchema: z.ZodType<Prisma.MotherboardUpsertWithoutSetupsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => MotherboardUpdateWithoutSetupsInputSchema),
        z.lazy(() => MotherboardUncheckedUpdateWithoutSetupsInputSchema),
      ]),
      create: z.union([
        z.lazy(() => MotherboardCreateWithoutSetupsInputSchema),
        z.lazy(() => MotherboardUncheckedCreateWithoutSetupsInputSchema),
      ]),
      where: z.lazy(() => MotherboardWhereInputSchema).optional(),
    })
    .strict();

export const MotherboardUpdateToOneWithWhereWithoutSetupsInputSchema: z.ZodType<Prisma.MotherboardUpdateToOneWithWhereWithoutSetupsInput> =
  z
    .object({
      where: z.lazy(() => MotherboardWhereInputSchema).optional(),
      data: z.union([
        z.lazy(() => MotherboardUpdateWithoutSetupsInputSchema),
        z.lazy(() => MotherboardUncheckedUpdateWithoutSetupsInputSchema),
      ]),
    })
    .strict();

export const MotherboardUpdateWithoutSetupsInputSchema: z.ZodType<Prisma.MotherboardUpdateWithoutSetupsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      socket: z
        .union([
          z.lazy(() => MotherboardUpdatesocketInputSchema),
          z.string().array(),
        ])
        .optional(),
      form_factor: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      max_memory: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      memory_slots: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const MotherboardUncheckedUpdateWithoutSetupsInputSchema: z.ZodType<Prisma.MotherboardUncheckedUpdateWithoutSetupsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      socket: z
        .union([
          z.lazy(() => MotherboardUpdatesocketInputSchema),
          z.string().array(),
        ])
        .optional(),
      form_factor: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      max_memory: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      memory_slots: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const HeadphonesUpsertWithoutSetupsInputSchema: z.ZodType<Prisma.HeadphonesUpsertWithoutSetupsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => HeadphonesUpdateWithoutSetupsInputSchema),
        z.lazy(() => HeadphonesUncheckedUpdateWithoutSetupsInputSchema),
      ]),
      create: z.union([
        z.lazy(() => HeadphonesCreateWithoutSetupsInputSchema),
        z.lazy(() => HeadphonesUncheckedCreateWithoutSetupsInputSchema),
      ]),
      where: z.lazy(() => HeadphonesWhereInputSchema).optional(),
    })
    .strict();

export const HeadphonesUpdateToOneWithWhereWithoutSetupsInputSchema: z.ZodType<Prisma.HeadphonesUpdateToOneWithWhereWithoutSetupsInput> =
  z
    .object({
      where: z.lazy(() => HeadphonesWhereInputSchema).optional(),
      data: z.union([
        z.lazy(() => HeadphonesUpdateWithoutSetupsInputSchema),
        z.lazy(() => HeadphonesUncheckedUpdateWithoutSetupsInputSchema),
      ]),
    })
    .strict();

export const HeadphonesUpdateWithoutSetupsInputSchema: z.ZodType<Prisma.HeadphonesUpdateWithoutSetupsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      type: z
        .union([
          z.lazy(() => HeadphoneTypesSchema),
          z.lazy(() => EnumHeadphoneTypesFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      frequency_response: z
        .union([
          z.lazy(() => HeadphonesUpdatefrequency_responseInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      microphone: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      wireless: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      noise_cancellation: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      enclosure_type: z
        .union([
          z.lazy(() => EnclosureTypeSchema),
          z.lazy(() => EnumEnclosureTypeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const HeadphonesUncheckedUpdateWithoutSetupsInputSchema: z.ZodType<Prisma.HeadphonesUncheckedUpdateWithoutSetupsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      type: z
        .union([
          z.lazy(() => HeadphoneTypesSchema),
          z.lazy(() => EnumHeadphoneTypesFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      frequency_response: z
        .union([
          z.lazy(() => HeadphonesUpdatefrequency_responseInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      microphone: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      wireless: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      noise_cancellation: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      enclosure_type: z
        .union([
          z.lazy(() => EnclosureTypeSchema),
          z.lazy(() => EnumEnclosureTypeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const KeyboardUpsertWithoutSetupsInputSchema: z.ZodType<Prisma.KeyboardUpsertWithoutSetupsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => KeyboardUpdateWithoutSetupsInputSchema),
        z.lazy(() => KeyboardUncheckedUpdateWithoutSetupsInputSchema),
      ]),
      create: z.union([
        z.lazy(() => KeyboardCreateWithoutSetupsInputSchema),
        z.lazy(() => KeyboardUncheckedCreateWithoutSetupsInputSchema),
      ]),
      where: z.lazy(() => KeyboardWhereInputSchema).optional(),
    })
    .strict();

export const KeyboardUpdateToOneWithWhereWithoutSetupsInputSchema: z.ZodType<Prisma.KeyboardUpdateToOneWithWhereWithoutSetupsInput> =
  z
    .object({
      where: z.lazy(() => KeyboardWhereInputSchema).optional(),
      data: z.union([
        z.lazy(() => KeyboardUpdateWithoutSetupsInputSchema),
        z.lazy(() => KeyboardUncheckedUpdateWithoutSetupsInputSchema),
      ]),
    })
    .strict();

export const KeyboardUpdateWithoutSetupsInputSchema: z.ZodType<Prisma.KeyboardUpdateWithoutSetupsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      style: z
        .union([
          z.lazy(() => KeyboardStyleSchema),
          z.lazy(() => EnumKeyboardStyleFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      switches: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      backlit: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      tenkeyless: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      connection_type: z
        .union([
          z.lazy(() => ConnectionTypeSchema),
          z.lazy(() => EnumConnectionTypeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const KeyboardUncheckedUpdateWithoutSetupsInputSchema: z.ZodType<Prisma.KeyboardUncheckedUpdateWithoutSetupsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      style: z
        .union([
          z.lazy(() => KeyboardStyleSchema),
          z.lazy(() => EnumKeyboardStyleFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      switches: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      backlit: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      tenkeyless: z
        .union([
          z.boolean(),
          z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      connection_type: z
        .union([
          z.lazy(() => ConnectionTypeSchema),
          z.lazy(() => EnumConnectionTypeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const MouseUpsertWithoutSetupsInputSchema: z.ZodType<Prisma.MouseUpsertWithoutSetupsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => MouseUpdateWithoutSetupsInputSchema),
        z.lazy(() => MouseUncheckedUpdateWithoutSetupsInputSchema),
      ]),
      create: z.union([
        z.lazy(() => MouseCreateWithoutSetupsInputSchema),
        z.lazy(() => MouseUncheckedCreateWithoutSetupsInputSchema),
      ]),
      where: z.lazy(() => MouseWhereInputSchema).optional(),
    })
    .strict();

export const MouseUpdateToOneWithWhereWithoutSetupsInputSchema: z.ZodType<Prisma.MouseUpdateToOneWithWhereWithoutSetupsInput> =
  z
    .object({
      where: z.lazy(() => MouseWhereInputSchema).optional(),
      data: z.union([
        z.lazy(() => MouseUpdateWithoutSetupsInputSchema),
        z.lazy(() => MouseUncheckedUpdateWithoutSetupsInputSchema),
      ]),
    })
    .strict();

export const MouseUpdateWithoutSetupsInputSchema: z.ZodType<Prisma.MouseUpdateWithoutSetupsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      tracking_method: z
        .union([
          z.lazy(() => MouseTrackMethodSchema),
          z.lazy(() => EnumMouseTrackMethodFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      connection_type: z
        .union([
          z.lazy(() => ConnectionTypeSchema),
          z.lazy(() => EnumConnectionTypeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      max_dpi: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      hand_orientation: z
        .union([
          z.lazy(() => MouseOrientationSchema),
          z.lazy(() => EnumMouseOrientationFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const MouseUncheckedUpdateWithoutSetupsInputSchema: z.ZodType<Prisma.MouseUncheckedUpdateWithoutSetupsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      tracking_method: z
        .union([
          z.lazy(() => MouseTrackMethodSchema),
          z.lazy(() => EnumMouseTrackMethodFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      connection_type: z
        .union([
          z.lazy(() => ConnectionTypeSchema),
          z.lazy(() => EnumConnectionTypeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      max_dpi: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      hand_orientation: z
        .union([
          z.lazy(() => MouseOrientationSchema),
          z.lazy(() => EnumMouseOrientationFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const SpeakersOfSetupUpsertWithWhereUniqueWithoutSetupInputSchema: z.ZodType<Prisma.SpeakersOfSetupUpsertWithWhereUniqueWithoutSetupInput> =
  z
    .object({
      where: z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => SpeakersOfSetupUpdateWithoutSetupInputSchema),
        z.lazy(() => SpeakersOfSetupUncheckedUpdateWithoutSetupInputSchema),
      ]),
      create: z.union([
        z.lazy(() => SpeakersOfSetupCreateWithoutSetupInputSchema),
        z.lazy(() => SpeakersOfSetupUncheckedCreateWithoutSetupInputSchema),
      ]),
    })
    .strict();

export const SpeakersOfSetupUpdateWithWhereUniqueWithoutSetupInputSchema: z.ZodType<Prisma.SpeakersOfSetupUpdateWithWhereUniqueWithoutSetupInput> =
  z
    .object({
      where: z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => SpeakersOfSetupUpdateWithoutSetupInputSchema),
        z.lazy(() => SpeakersOfSetupUncheckedUpdateWithoutSetupInputSchema),
      ]),
    })
    .strict();

export const SpeakersOfSetupUpdateManyWithWhereWithoutSetupInputSchema: z.ZodType<Prisma.SpeakersOfSetupUpdateManyWithWhereWithoutSetupInput> =
  z
    .object({
      where: z.lazy(() => SpeakersOfSetupScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => SpeakersOfSetupUpdateManyMutationInputSchema),
        z.lazy(() => SpeakersOfSetupUncheckedUpdateManyWithoutSetupInputSchema),
      ]),
    })
    .strict();

export const SpeakersOfSetupScalarWhereInputSchema: z.ZodType<Prisma.SpeakersOfSetupScalarWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => SpeakersOfSetupScalarWhereInputSchema),
          z.lazy(() => SpeakersOfSetupScalarWhereInputSchema).array(),
        ])
        .optional(),
      OR: z
        .lazy(() => SpeakersOfSetupScalarWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => SpeakersOfSetupScalarWhereInputSchema),
          z.lazy(() => SpeakersOfSetupScalarWhereInputSchema).array(),
        ])
        .optional(),
      speakers_id: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      setup_id: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      quantity: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
    })
    .strict();

export const WebcamUpsertWithoutSetupsInputSchema: z.ZodType<Prisma.WebcamUpsertWithoutSetupsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => WebcamUpdateWithoutSetupsInputSchema),
        z.lazy(() => WebcamUncheckedUpdateWithoutSetupsInputSchema),
      ]),
      create: z.union([
        z.lazy(() => WebcamCreateWithoutSetupsInputSchema),
        z.lazy(() => WebcamUncheckedCreateWithoutSetupsInputSchema),
      ]),
      where: z.lazy(() => WebcamWhereInputSchema).optional(),
    })
    .strict();

export const WebcamUpdateToOneWithWhereWithoutSetupsInputSchema: z.ZodType<Prisma.WebcamUpdateToOneWithWhereWithoutSetupsInput> =
  z
    .object({
      where: z.lazy(() => WebcamWhereInputSchema).optional(),
      data: z.union([
        z.lazy(() => WebcamUpdateWithoutSetupsInputSchema),
        z.lazy(() => WebcamUncheckedUpdateWithoutSetupsInputSchema),
      ]),
    })
    .strict();

export const WebcamUpdateWithoutSetupsInputSchema: z.ZodType<Prisma.WebcamUpdateWithoutSetupsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      resolutions: z
        .union([
          z.lazy(() => WebcamUpdateresolutionsInputSchema),
          z.string().array(),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      connection: z
        .union([
          z.lazy(() => ConnectionTypeSchema),
          z.lazy(() => EnumConnectionTypeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      focus_type: z
        .union([
          z.lazy(() => FocusTypeSchema),
          z.lazy(() => EnumFocusTypeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      os: z
        .union([z.lazy(() => WebcamUpdateosInputSchema), z.string().array()])
        .optional(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      fov: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const WebcamUncheckedUpdateWithoutSetupsInputSchema: z.ZodType<Prisma.WebcamUncheckedUpdateWithoutSetupsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      resolutions: z
        .union([
          z.lazy(() => WebcamUpdateresolutionsInputSchema),
          z.string().array(),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      connection: z
        .union([
          z.lazy(() => ConnectionTypeSchema),
          z.lazy(() => EnumConnectionTypeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      focus_type: z
        .union([
          z.lazy(() => FocusTypeSchema),
          z.lazy(() => EnumFocusTypeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      os: z
        .union([z.lazy(() => WebcamUpdateosInputSchema), z.string().array()])
        .optional(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      fov: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const CaseFanOfSetupUpsertWithWhereUniqueWithoutSetupInputSchema: z.ZodType<Prisma.CaseFanOfSetupUpsertWithWhereUniqueWithoutSetupInput> =
  z
    .object({
      where: z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => CaseFanOfSetupUpdateWithoutSetupInputSchema),
        z.lazy(() => CaseFanOfSetupUncheckedUpdateWithoutSetupInputSchema),
      ]),
      create: z.union([
        z.lazy(() => CaseFanOfSetupCreateWithoutSetupInputSchema),
        z.lazy(() => CaseFanOfSetupUncheckedCreateWithoutSetupInputSchema),
      ]),
    })
    .strict();

export const CaseFanOfSetupUpdateWithWhereUniqueWithoutSetupInputSchema: z.ZodType<Prisma.CaseFanOfSetupUpdateWithWhereUniqueWithoutSetupInput> =
  z
    .object({
      where: z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => CaseFanOfSetupUpdateWithoutSetupInputSchema),
        z.lazy(() => CaseFanOfSetupUncheckedUpdateWithoutSetupInputSchema),
      ]),
    })
    .strict();

export const CaseFanOfSetupUpdateManyWithWhereWithoutSetupInputSchema: z.ZodType<Prisma.CaseFanOfSetupUpdateManyWithWhereWithoutSetupInput> =
  z
    .object({
      where: z.lazy(() => CaseFanOfSetupScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => CaseFanOfSetupUpdateManyMutationInputSchema),
        z.lazy(() => CaseFanOfSetupUncheckedUpdateManyWithoutSetupInputSchema),
      ]),
    })
    .strict();

export const CaseFanOfSetupScalarWhereInputSchema: z.ZodType<Prisma.CaseFanOfSetupScalarWhereInput> =
  z
    .object({
      AND: z
        .union([
          z.lazy(() => CaseFanOfSetupScalarWhereInputSchema),
          z.lazy(() => CaseFanOfSetupScalarWhereInputSchema).array(),
        ])
        .optional(),
      OR: z
        .lazy(() => CaseFanOfSetupScalarWhereInputSchema)
        .array()
        .optional(),
      NOT: z
        .union([
          z.lazy(() => CaseFanOfSetupScalarWhereInputSchema),
          z.lazy(() => CaseFanOfSetupScalarWhereInputSchema).array(),
        ])
        .optional(),
      case_fan_id: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      setup_id: z
        .union([z.lazy(() => StringFilterSchema), z.string()])
        .optional(),
      quantity: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
    })
    .strict();

export const UserUpsertWithoutSetupsInputSchema: z.ZodType<Prisma.UserUpsertWithoutSetupsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => UserUpdateWithoutSetupsInputSchema),
        z.lazy(() => UserUncheckedUpdateWithoutSetupsInputSchema),
      ]),
      create: z.union([
        z.lazy(() => UserCreateWithoutSetupsInputSchema),
        z.lazy(() => UserUncheckedCreateWithoutSetupsInputSchema),
      ]),
      where: z.lazy(() => UserWhereInputSchema).optional(),
    })
    .strict();

export const UserUpdateToOneWithWhereWithoutSetupsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutSetupsInput> =
  z
    .object({
      where: z.lazy(() => UserWhereInputSchema).optional(),
      data: z.union([
        z.lazy(() => UserUpdateWithoutSetupsInputSchema),
        z.lazy(() => UserUncheckedUpdateWithoutSetupsInputSchema),
      ]),
    })
    .strict();

export const UserUpdateWithoutSetupsInputSchema: z.ZodType<Prisma.UserUpdateWithoutSetupsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      emailVerified: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      image: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      role: z
        .union([
          z.lazy(() => UserRoleSchema),
          z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      accounts: z
        .lazy(() => AccountUpdateManyWithoutUserNestedInputSchema)
        .optional(),
      sessions: z
        .lazy(() => SessionUpdateManyWithoutUserNestedInputSchema)
        .optional(),
    })
    .strict();

export const UserUncheckedUpdateWithoutSetupsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutSetupsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      email: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      emailVerified: z
        .union([
          z.coerce.date(),
          z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      image: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      role: z
        .union([
          z.lazy(() => UserRoleSchema),
          z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      accounts: z
        .lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema)
        .optional(),
      sessions: z
        .lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema)
        .optional(),
    })
    .strict();

export const SSDCreateWithoutSetupsInputSchema: z.ZodType<Prisma.SSDCreateWithoutSetupsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      capacity: z.number().int().optional(),
      price_per_gb: z.number().int().optional(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      type: z.string().optional().nullable(),
      cache: z.number().int().optional().nullable(),
      form_factor: z.string().optional().nullable(),
      interface: z.string().optional().nullable(),
    })
    .strict();

export const SSDUncheckedCreateWithoutSetupsInputSchema: z.ZodType<Prisma.SSDUncheckedCreateWithoutSetupsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      capacity: z.number().int().optional(),
      price_per_gb: z.number().int().optional(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      type: z.string().optional().nullable(),
      cache: z.number().int().optional().nullable(),
      form_factor: z.string().optional().nullable(),
      interface: z.string().optional().nullable(),
    })
    .strict();

export const SSDCreateOrConnectWithoutSetupsInputSchema: z.ZodType<Prisma.SSDCreateOrConnectWithoutSetupsInput> =
  z
    .object({
      where: z.lazy(() => SSDWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => SSDCreateWithoutSetupsInputSchema),
        z.lazy(() => SSDUncheckedCreateWithoutSetupsInputSchema),
      ]),
    })
    .strict();

export const SetupCreateWithoutSddsInputSchema: z.ZodType<Prisma.SetupCreateWithoutSddsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      name: z.string().optional().nullable(),
      cpu: z.lazy(() => CPUCreateNestedOneWithoutSetupsInputSchema),
      gpu: z.lazy(() => GPUCreateNestedOneWithoutSetupsInputSchema),
      hdd: z.lazy(() => HDDCreateNestedOneWithoutSetupsInputSchema),
      case: z.lazy(() => CaseCreateNestedOneWithoutSetupsInputSchema),
      ram: z.lazy(() => RAMCreateNestedOneWithoutSetupsInputSchema),
      psu: z.lazy(() => PSUCreateNestedOneWithoutSetupsInputSchema),
      monitors: z
        .lazy(() => MonitorsOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      sound_card: z.lazy(
        () => SoundCardCreateNestedOneWithoutSetupsInputSchema,
      ),
      cpu_cooler: z.lazy(
        () => CPUCoolerCreateNestedOneWithoutSetupsInputSchema,
      ),
      motherboard: z.lazy(
        () => MotherboardCreateNestedOneWithoutSetupsInputSchema,
      ),
      headphones: z.lazy(
        () => HeadphonesCreateNestedOneWithoutSetupsInputSchema,
      ),
      keyboard: z.lazy(() => KeyboardCreateNestedOneWithoutSetupsInputSchema),
      mouse: z.lazy(() => MouseCreateNestedOneWithoutSetupsInputSchema),
      speakers: z
        .lazy(() => SpeakersOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      webcam: z.lazy(() => WebcamCreateNestedOneWithoutSetupsInputSchema),
      case_fans: z
        .lazy(() => CaseFanOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      user: z.lazy(() => UserCreateNestedOneWithoutSetupsInputSchema),
    })
    .strict();

export const SetupUncheckedCreateWithoutSddsInputSchema: z.ZodType<Prisma.SetupUncheckedCreateWithoutSddsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      cpu_id: z.string(),
      gpu_id: z.string(),
      hdd_id: z.string(),
      case_id: z.string(),
      psu_id: z.string(),
      ram_id: z.string(),
      name: z.string().optional().nullable(),
      sound_card_id: z.string(),
      cpu_cooler_id: z.string(),
      motherboard_id: z.string(),
      headphones_id: z.string(),
      keyboard_id: z.string(),
      mouse_id: z.string(),
      webcam_id: z.string(),
      user_id: z.string(),
      monitors: z
        .lazy(
          () => MonitorsOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
      speakers: z
        .lazy(
          () => SpeakersOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
      case_fans: z
        .lazy(
          () => CaseFanOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
    })
    .strict();

export const SetupCreateOrConnectWithoutSddsInputSchema: z.ZodType<Prisma.SetupCreateOrConnectWithoutSddsInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => SetupCreateWithoutSddsInputSchema),
        z.lazy(() => SetupUncheckedCreateWithoutSddsInputSchema),
      ]),
    })
    .strict();

export const SSDUpsertWithoutSetupsInputSchema: z.ZodType<Prisma.SSDUpsertWithoutSetupsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => SSDUpdateWithoutSetupsInputSchema),
        z.lazy(() => SSDUncheckedUpdateWithoutSetupsInputSchema),
      ]),
      create: z.union([
        z.lazy(() => SSDCreateWithoutSetupsInputSchema),
        z.lazy(() => SSDUncheckedCreateWithoutSetupsInputSchema),
      ]),
      where: z.lazy(() => SSDWhereInputSchema).optional(),
    })
    .strict();

export const SSDUpdateToOneWithWhereWithoutSetupsInputSchema: z.ZodType<Prisma.SSDUpdateToOneWithWhereWithoutSetupsInput> =
  z
    .object({
      where: z.lazy(() => SSDWhereInputSchema).optional(),
      data: z.union([
        z.lazy(() => SSDUpdateWithoutSetupsInputSchema),
        z.lazy(() => SSDUncheckedUpdateWithoutSetupsInputSchema),
      ]),
    })
    .strict();

export const SSDUpdateWithoutSetupsInputSchema: z.ZodType<Prisma.SSDUpdateWithoutSetupsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      capacity: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      price_per_gb: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      type: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      cache: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      form_factor: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      interface: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const SSDUncheckedUpdateWithoutSetupsInputSchema: z.ZodType<Prisma.SSDUncheckedUpdateWithoutSetupsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      capacity: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      price_per_gb: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      type: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      cache: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      form_factor: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      interface: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const SetupUpsertWithoutSddsInputSchema: z.ZodType<Prisma.SetupUpsertWithoutSddsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => SetupUpdateWithoutSddsInputSchema),
        z.lazy(() => SetupUncheckedUpdateWithoutSddsInputSchema),
      ]),
      create: z.union([
        z.lazy(() => SetupCreateWithoutSddsInputSchema),
        z.lazy(() => SetupUncheckedCreateWithoutSddsInputSchema),
      ]),
      where: z.lazy(() => SetupWhereInputSchema).optional(),
    })
    .strict();

export const SetupUpdateToOneWithWhereWithoutSddsInputSchema: z.ZodType<Prisma.SetupUpdateToOneWithWhereWithoutSddsInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereInputSchema).optional(),
      data: z.union([
        z.lazy(() => SetupUpdateWithoutSddsInputSchema),
        z.lazy(() => SetupUncheckedUpdateWithoutSddsInputSchema),
      ]),
    })
    .strict();

export const SetupUpdateWithoutSddsInputSchema: z.ZodType<Prisma.SetupUpdateWithoutSddsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      cpu: z
        .lazy(() => CPUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      gpu: z
        .lazy(() => GPUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      hdd: z
        .lazy(() => HDDUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      case: z
        .lazy(() => CaseUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      ram: z
        .lazy(() => RAMUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      psu: z
        .lazy(() => PSUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      monitors: z
        .lazy(() => MonitorsOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      sound_card: z
        .lazy(() => SoundCardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      cpu_cooler: z
        .lazy(() => CPUCoolerUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      motherboard: z
        .lazy(() => MotherboardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      headphones: z
        .lazy(() => HeadphonesUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      keyboard: z
        .lazy(() => KeyboardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      mouse: z
        .lazy(() => MouseUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      speakers: z
        .lazy(() => SpeakersOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      webcam: z
        .lazy(() => WebcamUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      case_fans: z
        .lazy(() => CaseFanOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      user: z
        .lazy(() => UserUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateWithoutSddsInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateWithoutSddsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      gpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      hdd_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      case_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      psu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      ram_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      sound_card_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_cooler_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      motherboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      headphones_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      keyboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      mouse_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      webcam_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      user_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      monitors: z
        .lazy(
          () => MonitorsOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
      speakers: z
        .lazy(
          () => SpeakersOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
      case_fans: z
        .lazy(
          () => CaseFanOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
    })
    .strict();

export const CaseFanCreateWithoutSetupsInputSchema: z.ZodType<Prisma.CaseFanCreateWithoutSetupsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      size: z.number().int().optional(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      color: z.string().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      rpm: z
        .union([
          z.lazy(() => CaseFanCreaterpmInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      airflow: z
        .union([
          z.lazy(() => CaseFanCreateairflowInputSchema),
          z.number().int().array(),
        ])
        .optional(),
    })
    .strict();

export const CaseFanUncheckedCreateWithoutSetupsInputSchema: z.ZodType<Prisma.CaseFanUncheckedCreateWithoutSetupsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      size: z.number().int().optional(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      color: z.string().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      rpm: z
        .union([
          z.lazy(() => CaseFanCreaterpmInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      airflow: z
        .union([
          z.lazy(() => CaseFanCreateairflowInputSchema),
          z.number().int().array(),
        ])
        .optional(),
    })
    .strict();

export const CaseFanCreateOrConnectWithoutSetupsInputSchema: z.ZodType<Prisma.CaseFanCreateOrConnectWithoutSetupsInput> =
  z
    .object({
      where: z.lazy(() => CaseFanWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => CaseFanCreateWithoutSetupsInputSchema),
        z.lazy(() => CaseFanUncheckedCreateWithoutSetupsInputSchema),
      ]),
    })
    .strict();

export const SetupCreateWithoutCase_fansInputSchema: z.ZodType<Prisma.SetupCreateWithoutCase_fansInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      name: z.string().optional().nullable(),
      cpu: z.lazy(() => CPUCreateNestedOneWithoutSetupsInputSchema),
      gpu: z.lazy(() => GPUCreateNestedOneWithoutSetupsInputSchema),
      hdd: z.lazy(() => HDDCreateNestedOneWithoutSetupsInputSchema),
      case: z.lazy(() => CaseCreateNestedOneWithoutSetupsInputSchema),
      ram: z.lazy(() => RAMCreateNestedOneWithoutSetupsInputSchema),
      psu: z.lazy(() => PSUCreateNestedOneWithoutSetupsInputSchema),
      monitors: z
        .lazy(() => MonitorsOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      sound_card: z.lazy(
        () => SoundCardCreateNestedOneWithoutSetupsInputSchema,
      ),
      cpu_cooler: z.lazy(
        () => CPUCoolerCreateNestedOneWithoutSetupsInputSchema,
      ),
      motherboard: z.lazy(
        () => MotherboardCreateNestedOneWithoutSetupsInputSchema,
      ),
      headphones: z.lazy(
        () => HeadphonesCreateNestedOneWithoutSetupsInputSchema,
      ),
      keyboard: z.lazy(() => KeyboardCreateNestedOneWithoutSetupsInputSchema),
      mouse: z.lazy(() => MouseCreateNestedOneWithoutSetupsInputSchema),
      speakers: z
        .lazy(() => SpeakersOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      webcam: z.lazy(() => WebcamCreateNestedOneWithoutSetupsInputSchema),
      user: z.lazy(() => UserCreateNestedOneWithoutSetupsInputSchema),
    })
    .strict();

export const SetupUncheckedCreateWithoutCase_fansInputSchema: z.ZodType<Prisma.SetupUncheckedCreateWithoutCase_fansInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      cpu_id: z.string(),
      gpu_id: z.string(),
      hdd_id: z.string(),
      case_id: z.string(),
      psu_id: z.string(),
      ram_id: z.string(),
      name: z.string().optional().nullable(),
      sound_card_id: z.string(),
      cpu_cooler_id: z.string(),
      motherboard_id: z.string(),
      headphones_id: z.string(),
      keyboard_id: z.string(),
      mouse_id: z.string(),
      webcam_id: z.string(),
      user_id: z.string(),
      monitors: z
        .lazy(
          () => MonitorsOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      speakers: z
        .lazy(
          () => SpeakersOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
    })
    .strict();

export const SetupCreateOrConnectWithoutCase_fansInputSchema: z.ZodType<Prisma.SetupCreateOrConnectWithoutCase_fansInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => SetupCreateWithoutCase_fansInputSchema),
        z.lazy(() => SetupUncheckedCreateWithoutCase_fansInputSchema),
      ]),
    })
    .strict();

export const CaseFanUpsertWithoutSetupsInputSchema: z.ZodType<Prisma.CaseFanUpsertWithoutSetupsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => CaseFanUpdateWithoutSetupsInputSchema),
        z.lazy(() => CaseFanUncheckedUpdateWithoutSetupsInputSchema),
      ]),
      create: z.union([
        z.lazy(() => CaseFanCreateWithoutSetupsInputSchema),
        z.lazy(() => CaseFanUncheckedCreateWithoutSetupsInputSchema),
      ]),
      where: z.lazy(() => CaseFanWhereInputSchema).optional(),
    })
    .strict();

export const CaseFanUpdateToOneWithWhereWithoutSetupsInputSchema: z.ZodType<Prisma.CaseFanUpdateToOneWithWhereWithoutSetupsInput> =
  z
    .object({
      where: z.lazy(() => CaseFanWhereInputSchema).optional(),
      data: z.union([
        z.lazy(() => CaseFanUpdateWithoutSetupsInputSchema),
        z.lazy(() => CaseFanUncheckedUpdateWithoutSetupsInputSchema),
      ]),
    })
    .strict();

export const CaseFanUpdateWithoutSetupsInputSchema: z.ZodType<Prisma.CaseFanUpdateWithoutSetupsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      size: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      rpm: z
        .union([
          z.lazy(() => CaseFanUpdaterpmInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      airflow: z
        .union([
          z.lazy(() => CaseFanUpdateairflowInputSchema),
          z.number().int().array(),
        ])
        .optional(),
    })
    .strict();

export const CaseFanUncheckedUpdateWithoutSetupsInputSchema: z.ZodType<Prisma.CaseFanUncheckedUpdateWithoutSetupsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      size: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      rpm: z
        .union([
          z.lazy(() => CaseFanUpdaterpmInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      airflow: z
        .union([
          z.lazy(() => CaseFanUpdateairflowInputSchema),
          z.number().int().array(),
        ])
        .optional(),
    })
    .strict();

export const SetupUpsertWithoutCase_fansInputSchema: z.ZodType<Prisma.SetupUpsertWithoutCase_fansInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => SetupUpdateWithoutCase_fansInputSchema),
        z.lazy(() => SetupUncheckedUpdateWithoutCase_fansInputSchema),
      ]),
      create: z.union([
        z.lazy(() => SetupCreateWithoutCase_fansInputSchema),
        z.lazy(() => SetupUncheckedCreateWithoutCase_fansInputSchema),
      ]),
      where: z.lazy(() => SetupWhereInputSchema).optional(),
    })
    .strict();

export const SetupUpdateToOneWithWhereWithoutCase_fansInputSchema: z.ZodType<Prisma.SetupUpdateToOneWithWhereWithoutCase_fansInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereInputSchema).optional(),
      data: z.union([
        z.lazy(() => SetupUpdateWithoutCase_fansInputSchema),
        z.lazy(() => SetupUncheckedUpdateWithoutCase_fansInputSchema),
      ]),
    })
    .strict();

export const SetupUpdateWithoutCase_fansInputSchema: z.ZodType<Prisma.SetupUpdateWithoutCase_fansInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      cpu: z
        .lazy(() => CPUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      gpu: z
        .lazy(() => GPUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      hdd: z
        .lazy(() => HDDUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      case: z
        .lazy(() => CaseUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      ram: z
        .lazy(() => RAMUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      psu: z
        .lazy(() => PSUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      monitors: z
        .lazy(() => MonitorsOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      sound_card: z
        .lazy(() => SoundCardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      cpu_cooler: z
        .lazy(() => CPUCoolerUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      motherboard: z
        .lazy(() => MotherboardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      headphones: z
        .lazy(() => HeadphonesUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      keyboard: z
        .lazy(() => KeyboardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      mouse: z
        .lazy(() => MouseUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      speakers: z
        .lazy(() => SpeakersOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      webcam: z
        .lazy(() => WebcamUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      user: z
        .lazy(() => UserUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateWithoutCase_fansInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateWithoutCase_fansInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      gpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      hdd_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      case_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      psu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      ram_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      sound_card_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_cooler_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      motherboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      headphones_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      keyboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      mouse_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      webcam_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      user_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      monitors: z
        .lazy(
          () => MonitorsOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      speakers: z
        .lazy(
          () => SpeakersOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
    })
    .strict();

export const SpeakersCreateWithoutSetupsInputSchema: z.ZodType<Prisma.SpeakersCreateWithoutSetupsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      configuration: z.string().optional().nullable(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      wattage: z.number().int().optional().nullable(),
      frequency_response: z.number().int().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      color: z.string().optional().nullable(),
    })
    .strict();

export const SpeakersUncheckedCreateWithoutSetupsInputSchema: z.ZodType<Prisma.SpeakersUncheckedCreateWithoutSetupsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      configuration: z.string().optional().nullable(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      wattage: z.number().int().optional().nullable(),
      frequency_response: z.number().int().optional().nullable(),
      amazonLink: z.string().optional().nullable(),
      color: z.string().optional().nullable(),
    })
    .strict();

export const SpeakersCreateOrConnectWithoutSetupsInputSchema: z.ZodType<Prisma.SpeakersCreateOrConnectWithoutSetupsInput> =
  z
    .object({
      where: z.lazy(() => SpeakersWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => SpeakersCreateWithoutSetupsInputSchema),
        z.lazy(() => SpeakersUncheckedCreateWithoutSetupsInputSchema),
      ]),
    })
    .strict();

export const SetupCreateWithoutSpeakersInputSchema: z.ZodType<Prisma.SetupCreateWithoutSpeakersInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      name: z.string().optional().nullable(),
      cpu: z.lazy(() => CPUCreateNestedOneWithoutSetupsInputSchema),
      gpu: z.lazy(() => GPUCreateNestedOneWithoutSetupsInputSchema),
      hdd: z.lazy(() => HDDCreateNestedOneWithoutSetupsInputSchema),
      case: z.lazy(() => CaseCreateNestedOneWithoutSetupsInputSchema),
      ram: z.lazy(() => RAMCreateNestedOneWithoutSetupsInputSchema),
      psu: z.lazy(() => PSUCreateNestedOneWithoutSetupsInputSchema),
      monitors: z
        .lazy(() => MonitorsOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      sound_card: z.lazy(
        () => SoundCardCreateNestedOneWithoutSetupsInputSchema,
      ),
      cpu_cooler: z.lazy(
        () => CPUCoolerCreateNestedOneWithoutSetupsInputSchema,
      ),
      motherboard: z.lazy(
        () => MotherboardCreateNestedOneWithoutSetupsInputSchema,
      ),
      headphones: z.lazy(
        () => HeadphonesCreateNestedOneWithoutSetupsInputSchema,
      ),
      keyboard: z.lazy(() => KeyboardCreateNestedOneWithoutSetupsInputSchema),
      mouse: z.lazy(() => MouseCreateNestedOneWithoutSetupsInputSchema),
      webcam: z.lazy(() => WebcamCreateNestedOneWithoutSetupsInputSchema),
      case_fans: z
        .lazy(() => CaseFanOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      user: z.lazy(() => UserCreateNestedOneWithoutSetupsInputSchema),
    })
    .strict();

export const SetupUncheckedCreateWithoutSpeakersInputSchema: z.ZodType<Prisma.SetupUncheckedCreateWithoutSpeakersInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      cpu_id: z.string(),
      gpu_id: z.string(),
      hdd_id: z.string(),
      case_id: z.string(),
      psu_id: z.string(),
      ram_id: z.string(),
      name: z.string().optional().nullable(),
      sound_card_id: z.string(),
      cpu_cooler_id: z.string(),
      motherboard_id: z.string(),
      headphones_id: z.string(),
      keyboard_id: z.string(),
      mouse_id: z.string(),
      webcam_id: z.string(),
      user_id: z.string(),
      monitors: z
        .lazy(
          () => MonitorsOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      case_fans: z
        .lazy(
          () => CaseFanOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
    })
    .strict();

export const SetupCreateOrConnectWithoutSpeakersInputSchema: z.ZodType<Prisma.SetupCreateOrConnectWithoutSpeakersInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => SetupCreateWithoutSpeakersInputSchema),
        z.lazy(() => SetupUncheckedCreateWithoutSpeakersInputSchema),
      ]),
    })
    .strict();

export const SpeakersUpsertWithoutSetupsInputSchema: z.ZodType<Prisma.SpeakersUpsertWithoutSetupsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => SpeakersUpdateWithoutSetupsInputSchema),
        z.lazy(() => SpeakersUncheckedUpdateWithoutSetupsInputSchema),
      ]),
      create: z.union([
        z.lazy(() => SpeakersCreateWithoutSetupsInputSchema),
        z.lazy(() => SpeakersUncheckedCreateWithoutSetupsInputSchema),
      ]),
      where: z.lazy(() => SpeakersWhereInputSchema).optional(),
    })
    .strict();

export const SpeakersUpdateToOneWithWhereWithoutSetupsInputSchema: z.ZodType<Prisma.SpeakersUpdateToOneWithWhereWithoutSetupsInput> =
  z
    .object({
      where: z.lazy(() => SpeakersWhereInputSchema).optional(),
      data: z.union([
        z.lazy(() => SpeakersUpdateWithoutSetupsInputSchema),
        z.lazy(() => SpeakersUncheckedUpdateWithoutSetupsInputSchema),
      ]),
    })
    .strict();

export const SpeakersUpdateWithoutSetupsInputSchema: z.ZodType<Prisma.SpeakersUpdateWithoutSetupsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      configuration: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      wattage: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      frequency_response: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const SpeakersUncheckedUpdateWithoutSetupsInputSchema: z.ZodType<Prisma.SpeakersUncheckedUpdateWithoutSetupsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      configuration: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      wattage: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      frequency_response: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      color: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const SetupUpsertWithoutSpeakersInputSchema: z.ZodType<Prisma.SetupUpsertWithoutSpeakersInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => SetupUpdateWithoutSpeakersInputSchema),
        z.lazy(() => SetupUncheckedUpdateWithoutSpeakersInputSchema),
      ]),
      create: z.union([
        z.lazy(() => SetupCreateWithoutSpeakersInputSchema),
        z.lazy(() => SetupUncheckedCreateWithoutSpeakersInputSchema),
      ]),
      where: z.lazy(() => SetupWhereInputSchema).optional(),
    })
    .strict();

export const SetupUpdateToOneWithWhereWithoutSpeakersInputSchema: z.ZodType<Prisma.SetupUpdateToOneWithWhereWithoutSpeakersInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereInputSchema).optional(),
      data: z.union([
        z.lazy(() => SetupUpdateWithoutSpeakersInputSchema),
        z.lazy(() => SetupUncheckedUpdateWithoutSpeakersInputSchema),
      ]),
    })
    .strict();

export const SetupUpdateWithoutSpeakersInputSchema: z.ZodType<Prisma.SetupUpdateWithoutSpeakersInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      cpu: z
        .lazy(() => CPUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      gpu: z
        .lazy(() => GPUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      hdd: z
        .lazy(() => HDDUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      case: z
        .lazy(() => CaseUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      ram: z
        .lazy(() => RAMUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      psu: z
        .lazy(() => PSUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      monitors: z
        .lazy(() => MonitorsOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      sound_card: z
        .lazy(() => SoundCardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      cpu_cooler: z
        .lazy(() => CPUCoolerUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      motherboard: z
        .lazy(() => MotherboardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      headphones: z
        .lazy(() => HeadphonesUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      keyboard: z
        .lazy(() => KeyboardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      mouse: z
        .lazy(() => MouseUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      webcam: z
        .lazy(() => WebcamUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      case_fans: z
        .lazy(() => CaseFanOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      user: z
        .lazy(() => UserUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateWithoutSpeakersInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateWithoutSpeakersInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      gpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      hdd_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      case_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      psu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      ram_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      sound_card_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_cooler_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      motherboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      headphones_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      keyboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      mouse_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      webcam_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      user_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      monitors: z
        .lazy(
          () => MonitorsOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      case_fans: z
        .lazy(
          () => CaseFanOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
    })
    .strict();

export const MonitorCreateWithoutSetupsInputSchema: z.ZodType<Prisma.MonitorCreateWithoutSetupsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      screen_size: z.number().int().optional().nullable(),
      resolution: z
        .union([
          z.lazy(() => MonitorCreateresolutionInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      amazonLink: z.string().optional().nullable(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      refresh_rate: z.number().int().optional().nullable(),
      response_time: z.number().int().optional().nullable(),
      panel_type: z.lazy(() => MonitorPanelTypeSchema).optional(),
      aspect_ratio: z.string().optional().nullable(),
    })
    .strict();

export const MonitorUncheckedCreateWithoutSetupsInputSchema: z.ZodType<Prisma.MonitorUncheckedCreateWithoutSetupsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      screen_size: z.number().int().optional().nullable(),
      resolution: z
        .union([
          z.lazy(() => MonitorCreateresolutionInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      amazonLink: z.string().optional().nullable(),
      name: z.string(),
      imageUrl: z.string().optional().nullable(),
      refresh_rate: z.number().int().optional().nullable(),
      response_time: z.number().int().optional().nullable(),
      panel_type: z.lazy(() => MonitorPanelTypeSchema).optional(),
      aspect_ratio: z.string().optional().nullable(),
    })
    .strict();

export const MonitorCreateOrConnectWithoutSetupsInputSchema: z.ZodType<Prisma.MonitorCreateOrConnectWithoutSetupsInput> =
  z
    .object({
      where: z.lazy(() => MonitorWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => MonitorCreateWithoutSetupsInputSchema),
        z.lazy(() => MonitorUncheckedCreateWithoutSetupsInputSchema),
      ]),
    })
    .strict();

export const SetupCreateWithoutMonitorsInputSchema: z.ZodType<Prisma.SetupCreateWithoutMonitorsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      name: z.string().optional().nullable(),
      cpu: z.lazy(() => CPUCreateNestedOneWithoutSetupsInputSchema),
      gpu: z.lazy(() => GPUCreateNestedOneWithoutSetupsInputSchema),
      hdd: z.lazy(() => HDDCreateNestedOneWithoutSetupsInputSchema),
      case: z.lazy(() => CaseCreateNestedOneWithoutSetupsInputSchema),
      ram: z.lazy(() => RAMCreateNestedOneWithoutSetupsInputSchema),
      psu: z.lazy(() => PSUCreateNestedOneWithoutSetupsInputSchema),
      sdds: z
        .lazy(() => SSDOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      sound_card: z.lazy(
        () => SoundCardCreateNestedOneWithoutSetupsInputSchema,
      ),
      cpu_cooler: z.lazy(
        () => CPUCoolerCreateNestedOneWithoutSetupsInputSchema,
      ),
      motherboard: z.lazy(
        () => MotherboardCreateNestedOneWithoutSetupsInputSchema,
      ),
      headphones: z.lazy(
        () => HeadphonesCreateNestedOneWithoutSetupsInputSchema,
      ),
      keyboard: z.lazy(() => KeyboardCreateNestedOneWithoutSetupsInputSchema),
      mouse: z.lazy(() => MouseCreateNestedOneWithoutSetupsInputSchema),
      speakers: z
        .lazy(() => SpeakersOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      webcam: z.lazy(() => WebcamCreateNestedOneWithoutSetupsInputSchema),
      case_fans: z
        .lazy(() => CaseFanOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      user: z.lazy(() => UserCreateNestedOneWithoutSetupsInputSchema),
    })
    .strict();

export const SetupUncheckedCreateWithoutMonitorsInputSchema: z.ZodType<Prisma.SetupUncheckedCreateWithoutMonitorsInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      cpu_id: z.string(),
      gpu_id: z.string(),
      hdd_id: z.string(),
      case_id: z.string(),
      psu_id: z.string(),
      ram_id: z.string(),
      name: z.string().optional().nullable(),
      sound_card_id: z.string(),
      cpu_cooler_id: z.string(),
      motherboard_id: z.string(),
      headphones_id: z.string(),
      keyboard_id: z.string(),
      mouse_id: z.string(),
      webcam_id: z.string(),
      user_id: z.string(),
      sdds: z
        .lazy(() => SSDOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      speakers: z
        .lazy(
          () => SpeakersOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
      case_fans: z
        .lazy(
          () => CaseFanOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
    })
    .strict();

export const SetupCreateOrConnectWithoutMonitorsInputSchema: z.ZodType<Prisma.SetupCreateOrConnectWithoutMonitorsInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => SetupCreateWithoutMonitorsInputSchema),
        z.lazy(() => SetupUncheckedCreateWithoutMonitorsInputSchema),
      ]),
    })
    .strict();

export const MonitorUpsertWithoutSetupsInputSchema: z.ZodType<Prisma.MonitorUpsertWithoutSetupsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => MonitorUpdateWithoutSetupsInputSchema),
        z.lazy(() => MonitorUncheckedUpdateWithoutSetupsInputSchema),
      ]),
      create: z.union([
        z.lazy(() => MonitorCreateWithoutSetupsInputSchema),
        z.lazy(() => MonitorUncheckedCreateWithoutSetupsInputSchema),
      ]),
      where: z.lazy(() => MonitorWhereInputSchema).optional(),
    })
    .strict();

export const MonitorUpdateToOneWithWhereWithoutSetupsInputSchema: z.ZodType<Prisma.MonitorUpdateToOneWithWhereWithoutSetupsInput> =
  z
    .object({
      where: z.lazy(() => MonitorWhereInputSchema).optional(),
      data: z.union([
        z.lazy(() => MonitorUpdateWithoutSetupsInputSchema),
        z.lazy(() => MonitorUncheckedUpdateWithoutSetupsInputSchema),
      ]),
    })
    .strict();

export const MonitorUpdateWithoutSetupsInputSchema: z.ZodType<Prisma.MonitorUpdateWithoutSetupsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      screen_size: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      resolution: z
        .union([
          z.lazy(() => MonitorUpdateresolutionInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      refresh_rate: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      response_time: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      panel_type: z
        .union([
          z.lazy(() => MonitorPanelTypeSchema),
          z.lazy(() => EnumMonitorPanelTypeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      aspect_ratio: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const MonitorUncheckedUpdateWithoutSetupsInputSchema: z.ZodType<Prisma.MonitorUncheckedUpdateWithoutSetupsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      screen_size: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      resolution: z
        .union([
          z.lazy(() => MonitorUpdateresolutionInputSchema),
          z.number().int().array(),
        ])
        .optional(),
      amazonLink: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      name: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      imageUrl: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      refresh_rate: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      response_time: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      panel_type: z
        .union([
          z.lazy(() => MonitorPanelTypeSchema),
          z.lazy(() => EnumMonitorPanelTypeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      aspect_ratio: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const SetupUpsertWithoutMonitorsInputSchema: z.ZodType<Prisma.SetupUpsertWithoutMonitorsInput> =
  z
    .object({
      update: z.union([
        z.lazy(() => SetupUpdateWithoutMonitorsInputSchema),
        z.lazy(() => SetupUncheckedUpdateWithoutMonitorsInputSchema),
      ]),
      create: z.union([
        z.lazy(() => SetupCreateWithoutMonitorsInputSchema),
        z.lazy(() => SetupUncheckedCreateWithoutMonitorsInputSchema),
      ]),
      where: z.lazy(() => SetupWhereInputSchema).optional(),
    })
    .strict();

export const SetupUpdateToOneWithWhereWithoutMonitorsInputSchema: z.ZodType<Prisma.SetupUpdateToOneWithWhereWithoutMonitorsInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereInputSchema).optional(),
      data: z.union([
        z.lazy(() => SetupUpdateWithoutMonitorsInputSchema),
        z.lazy(() => SetupUncheckedUpdateWithoutMonitorsInputSchema),
      ]),
    })
    .strict();

export const SetupUpdateWithoutMonitorsInputSchema: z.ZodType<Prisma.SetupUpdateWithoutMonitorsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      cpu: z
        .lazy(() => CPUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      gpu: z
        .lazy(() => GPUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      hdd: z
        .lazy(() => HDDUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      case: z
        .lazy(() => CaseUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      ram: z
        .lazy(() => RAMUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      psu: z
        .lazy(() => PSUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      sound_card: z
        .lazy(() => SoundCardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      cpu_cooler: z
        .lazy(() => CPUCoolerUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      motherboard: z
        .lazy(() => MotherboardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      headphones: z
        .lazy(() => HeadphonesUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      keyboard: z
        .lazy(() => KeyboardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      mouse: z
        .lazy(() => MouseUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      speakers: z
        .lazy(() => SpeakersOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      webcam: z
        .lazy(() => WebcamUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      case_fans: z
        .lazy(() => CaseFanOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      user: z
        .lazy(() => UserUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateWithoutMonitorsInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateWithoutMonitorsInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      gpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      hdd_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      case_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      psu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      ram_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      sound_card_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_cooler_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      motherboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      headphones_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      keyboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      mouse_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      webcam_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      user_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      speakers: z
        .lazy(
          () => SpeakersOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
      case_fans: z
        .lazy(
          () => CaseFanOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
    })
    .strict();

export const MonitorsOfSetupCreateWithoutMonitorInputSchema: z.ZodType<Prisma.MonitorsOfSetupCreateWithoutMonitorInput> =
  z
    .object({
      quantity: z.number().int(),
      setup: z.lazy(() => SetupCreateNestedOneWithoutMonitorsInputSchema),
    })
    .strict();

export const MonitorsOfSetupUncheckedCreateWithoutMonitorInputSchema: z.ZodType<Prisma.MonitorsOfSetupUncheckedCreateWithoutMonitorInput> =
  z
    .object({
      setup_id: z.string(),
      quantity: z.number().int(),
    })
    .strict();

export const MonitorsOfSetupCreateOrConnectWithoutMonitorInputSchema: z.ZodType<Prisma.MonitorsOfSetupCreateOrConnectWithoutMonitorInput> =
  z
    .object({
      where: z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => MonitorsOfSetupCreateWithoutMonitorInputSchema),
        z.lazy(() => MonitorsOfSetupUncheckedCreateWithoutMonitorInputSchema),
      ]),
    })
    .strict();

export const MonitorsOfSetupCreateManyMonitorInputEnvelopeSchema: z.ZodType<Prisma.MonitorsOfSetupCreateManyMonitorInputEnvelope> =
  z
    .object({
      data: z.union([
        z.lazy(() => MonitorsOfSetupCreateManyMonitorInputSchema),
        z.lazy(() => MonitorsOfSetupCreateManyMonitorInputSchema).array(),
      ]),
      skipDuplicates: z.boolean().optional(),
    })
    .strict();

export const MonitorsOfSetupUpsertWithWhereUniqueWithoutMonitorInputSchema: z.ZodType<Prisma.MonitorsOfSetupUpsertWithWhereUniqueWithoutMonitorInput> =
  z
    .object({
      where: z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => MonitorsOfSetupUpdateWithoutMonitorInputSchema),
        z.lazy(() => MonitorsOfSetupUncheckedUpdateWithoutMonitorInputSchema),
      ]),
      create: z.union([
        z.lazy(() => MonitorsOfSetupCreateWithoutMonitorInputSchema),
        z.lazy(() => MonitorsOfSetupUncheckedCreateWithoutMonitorInputSchema),
      ]),
    })
    .strict();

export const MonitorsOfSetupUpdateWithWhereUniqueWithoutMonitorInputSchema: z.ZodType<Prisma.MonitorsOfSetupUpdateWithWhereUniqueWithoutMonitorInput> =
  z
    .object({
      where: z.lazy(() => MonitorsOfSetupWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => MonitorsOfSetupUpdateWithoutMonitorInputSchema),
        z.lazy(() => MonitorsOfSetupUncheckedUpdateWithoutMonitorInputSchema),
      ]),
    })
    .strict();

export const MonitorsOfSetupUpdateManyWithWhereWithoutMonitorInputSchema: z.ZodType<Prisma.MonitorsOfSetupUpdateManyWithWhereWithoutMonitorInput> =
  z
    .object({
      where: z.lazy(() => MonitorsOfSetupScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => MonitorsOfSetupUpdateManyMutationInputSchema),
        z.lazy(
          () => MonitorsOfSetupUncheckedUpdateManyWithoutMonitorInputSchema,
        ),
      ]),
    })
    .strict();

export const SetupCreateWithoutSound_cardInputSchema: z.ZodType<Prisma.SetupCreateWithoutSound_cardInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      name: z.string().optional().nullable(),
      cpu: z.lazy(() => CPUCreateNestedOneWithoutSetupsInputSchema),
      gpu: z.lazy(() => GPUCreateNestedOneWithoutSetupsInputSchema),
      hdd: z.lazy(() => HDDCreateNestedOneWithoutSetupsInputSchema),
      case: z.lazy(() => CaseCreateNestedOneWithoutSetupsInputSchema),
      ram: z.lazy(() => RAMCreateNestedOneWithoutSetupsInputSchema),
      psu: z.lazy(() => PSUCreateNestedOneWithoutSetupsInputSchema),
      monitors: z
        .lazy(() => MonitorsOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      cpu_cooler: z.lazy(
        () => CPUCoolerCreateNestedOneWithoutSetupsInputSchema,
      ),
      motherboard: z.lazy(
        () => MotherboardCreateNestedOneWithoutSetupsInputSchema,
      ),
      headphones: z.lazy(
        () => HeadphonesCreateNestedOneWithoutSetupsInputSchema,
      ),
      keyboard: z.lazy(() => KeyboardCreateNestedOneWithoutSetupsInputSchema),
      mouse: z.lazy(() => MouseCreateNestedOneWithoutSetupsInputSchema),
      speakers: z
        .lazy(() => SpeakersOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      webcam: z.lazy(() => WebcamCreateNestedOneWithoutSetupsInputSchema),
      case_fans: z
        .lazy(() => CaseFanOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      user: z.lazy(() => UserCreateNestedOneWithoutSetupsInputSchema),
    })
    .strict();

export const SetupUncheckedCreateWithoutSound_cardInputSchema: z.ZodType<Prisma.SetupUncheckedCreateWithoutSound_cardInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      cpu_id: z.string(),
      gpu_id: z.string(),
      hdd_id: z.string(),
      case_id: z.string(),
      psu_id: z.string(),
      ram_id: z.string(),
      name: z.string().optional().nullable(),
      cpu_cooler_id: z.string(),
      motherboard_id: z.string(),
      headphones_id: z.string(),
      keyboard_id: z.string(),
      mouse_id: z.string(),
      webcam_id: z.string(),
      user_id: z.string(),
      monitors: z
        .lazy(
          () => MonitorsOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      speakers: z
        .lazy(
          () => SpeakersOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
      case_fans: z
        .lazy(
          () => CaseFanOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
    })
    .strict();

export const SetupCreateOrConnectWithoutSound_cardInputSchema: z.ZodType<Prisma.SetupCreateOrConnectWithoutSound_cardInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => SetupCreateWithoutSound_cardInputSchema),
        z.lazy(() => SetupUncheckedCreateWithoutSound_cardInputSchema),
      ]),
    })
    .strict();

export const SetupCreateManySound_cardInputEnvelopeSchema: z.ZodType<Prisma.SetupCreateManySound_cardInputEnvelope> =
  z
    .object({
      data: z.union([
        z.lazy(() => SetupCreateManySound_cardInputSchema),
        z.lazy(() => SetupCreateManySound_cardInputSchema).array(),
      ]),
      skipDuplicates: z.boolean().optional(),
    })
    .strict();

export const SetupUpsertWithWhereUniqueWithoutSound_cardInputSchema: z.ZodType<Prisma.SetupUpsertWithWhereUniqueWithoutSound_cardInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => SetupUpdateWithoutSound_cardInputSchema),
        z.lazy(() => SetupUncheckedUpdateWithoutSound_cardInputSchema),
      ]),
      create: z.union([
        z.lazy(() => SetupCreateWithoutSound_cardInputSchema),
        z.lazy(() => SetupUncheckedCreateWithoutSound_cardInputSchema),
      ]),
    })
    .strict();

export const SetupUpdateWithWhereUniqueWithoutSound_cardInputSchema: z.ZodType<Prisma.SetupUpdateWithWhereUniqueWithoutSound_cardInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => SetupUpdateWithoutSound_cardInputSchema),
        z.lazy(() => SetupUncheckedUpdateWithoutSound_cardInputSchema),
      ]),
    })
    .strict();

export const SetupUpdateManyWithWhereWithoutSound_cardInputSchema: z.ZodType<Prisma.SetupUpdateManyWithWhereWithoutSound_cardInput> =
  z
    .object({
      where: z.lazy(() => SetupScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => SetupUpdateManyMutationInputSchema),
        z.lazy(() => SetupUncheckedUpdateManyWithoutSound_cardInputSchema),
      ]),
    })
    .strict();

export const SetupCreateWithoutHeadphonesInputSchema: z.ZodType<Prisma.SetupCreateWithoutHeadphonesInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      name: z.string().optional().nullable(),
      cpu: z.lazy(() => CPUCreateNestedOneWithoutSetupsInputSchema),
      gpu: z.lazy(() => GPUCreateNestedOneWithoutSetupsInputSchema),
      hdd: z.lazy(() => HDDCreateNestedOneWithoutSetupsInputSchema),
      case: z.lazy(() => CaseCreateNestedOneWithoutSetupsInputSchema),
      ram: z.lazy(() => RAMCreateNestedOneWithoutSetupsInputSchema),
      psu: z.lazy(() => PSUCreateNestedOneWithoutSetupsInputSchema),
      monitors: z
        .lazy(() => MonitorsOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      sound_card: z.lazy(
        () => SoundCardCreateNestedOneWithoutSetupsInputSchema,
      ),
      cpu_cooler: z.lazy(
        () => CPUCoolerCreateNestedOneWithoutSetupsInputSchema,
      ),
      motherboard: z.lazy(
        () => MotherboardCreateNestedOneWithoutSetupsInputSchema,
      ),
      keyboard: z.lazy(() => KeyboardCreateNestedOneWithoutSetupsInputSchema),
      mouse: z.lazy(() => MouseCreateNestedOneWithoutSetupsInputSchema),
      speakers: z
        .lazy(() => SpeakersOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      webcam: z.lazy(() => WebcamCreateNestedOneWithoutSetupsInputSchema),
      case_fans: z
        .lazy(() => CaseFanOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      user: z.lazy(() => UserCreateNestedOneWithoutSetupsInputSchema),
    })
    .strict();

export const SetupUncheckedCreateWithoutHeadphonesInputSchema: z.ZodType<Prisma.SetupUncheckedCreateWithoutHeadphonesInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      cpu_id: z.string(),
      gpu_id: z.string(),
      hdd_id: z.string(),
      case_id: z.string(),
      psu_id: z.string(),
      ram_id: z.string(),
      name: z.string().optional().nullable(),
      sound_card_id: z.string(),
      cpu_cooler_id: z.string(),
      motherboard_id: z.string(),
      keyboard_id: z.string(),
      mouse_id: z.string(),
      webcam_id: z.string(),
      user_id: z.string(),
      monitors: z
        .lazy(
          () => MonitorsOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      speakers: z
        .lazy(
          () => SpeakersOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
      case_fans: z
        .lazy(
          () => CaseFanOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
    })
    .strict();

export const SetupCreateOrConnectWithoutHeadphonesInputSchema: z.ZodType<Prisma.SetupCreateOrConnectWithoutHeadphonesInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => SetupCreateWithoutHeadphonesInputSchema),
        z.lazy(() => SetupUncheckedCreateWithoutHeadphonesInputSchema),
      ]),
    })
    .strict();

export const SetupCreateManyHeadphonesInputEnvelopeSchema: z.ZodType<Prisma.SetupCreateManyHeadphonesInputEnvelope> =
  z
    .object({
      data: z.union([
        z.lazy(() => SetupCreateManyHeadphonesInputSchema),
        z.lazy(() => SetupCreateManyHeadphonesInputSchema).array(),
      ]),
      skipDuplicates: z.boolean().optional(),
    })
    .strict();

export const SetupUpsertWithWhereUniqueWithoutHeadphonesInputSchema: z.ZodType<Prisma.SetupUpsertWithWhereUniqueWithoutHeadphonesInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => SetupUpdateWithoutHeadphonesInputSchema),
        z.lazy(() => SetupUncheckedUpdateWithoutHeadphonesInputSchema),
      ]),
      create: z.union([
        z.lazy(() => SetupCreateWithoutHeadphonesInputSchema),
        z.lazy(() => SetupUncheckedCreateWithoutHeadphonesInputSchema),
      ]),
    })
    .strict();

export const SetupUpdateWithWhereUniqueWithoutHeadphonesInputSchema: z.ZodType<Prisma.SetupUpdateWithWhereUniqueWithoutHeadphonesInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => SetupUpdateWithoutHeadphonesInputSchema),
        z.lazy(() => SetupUncheckedUpdateWithoutHeadphonesInputSchema),
      ]),
    })
    .strict();

export const SetupUpdateManyWithWhereWithoutHeadphonesInputSchema: z.ZodType<Prisma.SetupUpdateManyWithWhereWithoutHeadphonesInput> =
  z
    .object({
      where: z.lazy(() => SetupScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => SetupUpdateManyMutationInputSchema),
        z.lazy(() => SetupUncheckedUpdateManyWithoutHeadphonesInputSchema),
      ]),
    })
    .strict();

export const SetupCreateWithoutKeyboardInputSchema: z.ZodType<Prisma.SetupCreateWithoutKeyboardInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      name: z.string().optional().nullable(),
      cpu: z.lazy(() => CPUCreateNestedOneWithoutSetupsInputSchema),
      gpu: z.lazy(() => GPUCreateNestedOneWithoutSetupsInputSchema),
      hdd: z.lazy(() => HDDCreateNestedOneWithoutSetupsInputSchema),
      case: z.lazy(() => CaseCreateNestedOneWithoutSetupsInputSchema),
      ram: z.lazy(() => RAMCreateNestedOneWithoutSetupsInputSchema),
      psu: z.lazy(() => PSUCreateNestedOneWithoutSetupsInputSchema),
      monitors: z
        .lazy(() => MonitorsOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      sound_card: z.lazy(
        () => SoundCardCreateNestedOneWithoutSetupsInputSchema,
      ),
      cpu_cooler: z.lazy(
        () => CPUCoolerCreateNestedOneWithoutSetupsInputSchema,
      ),
      motherboard: z.lazy(
        () => MotherboardCreateNestedOneWithoutSetupsInputSchema,
      ),
      headphones: z.lazy(
        () => HeadphonesCreateNestedOneWithoutSetupsInputSchema,
      ),
      mouse: z.lazy(() => MouseCreateNestedOneWithoutSetupsInputSchema),
      speakers: z
        .lazy(() => SpeakersOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      webcam: z.lazy(() => WebcamCreateNestedOneWithoutSetupsInputSchema),
      case_fans: z
        .lazy(() => CaseFanOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      user: z.lazy(() => UserCreateNestedOneWithoutSetupsInputSchema),
    })
    .strict();

export const SetupUncheckedCreateWithoutKeyboardInputSchema: z.ZodType<Prisma.SetupUncheckedCreateWithoutKeyboardInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      cpu_id: z.string(),
      gpu_id: z.string(),
      hdd_id: z.string(),
      case_id: z.string(),
      psu_id: z.string(),
      ram_id: z.string(),
      name: z.string().optional().nullable(),
      sound_card_id: z.string(),
      cpu_cooler_id: z.string(),
      motherboard_id: z.string(),
      headphones_id: z.string(),
      mouse_id: z.string(),
      webcam_id: z.string(),
      user_id: z.string(),
      monitors: z
        .lazy(
          () => MonitorsOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      speakers: z
        .lazy(
          () => SpeakersOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
      case_fans: z
        .lazy(
          () => CaseFanOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
    })
    .strict();

export const SetupCreateOrConnectWithoutKeyboardInputSchema: z.ZodType<Prisma.SetupCreateOrConnectWithoutKeyboardInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => SetupCreateWithoutKeyboardInputSchema),
        z.lazy(() => SetupUncheckedCreateWithoutKeyboardInputSchema),
      ]),
    })
    .strict();

export const SetupCreateManyKeyboardInputEnvelopeSchema: z.ZodType<Prisma.SetupCreateManyKeyboardInputEnvelope> =
  z
    .object({
      data: z.union([
        z.lazy(() => SetupCreateManyKeyboardInputSchema),
        z.lazy(() => SetupCreateManyKeyboardInputSchema).array(),
      ]),
      skipDuplicates: z.boolean().optional(),
    })
    .strict();

export const SetupUpsertWithWhereUniqueWithoutKeyboardInputSchema: z.ZodType<Prisma.SetupUpsertWithWhereUniqueWithoutKeyboardInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => SetupUpdateWithoutKeyboardInputSchema),
        z.lazy(() => SetupUncheckedUpdateWithoutKeyboardInputSchema),
      ]),
      create: z.union([
        z.lazy(() => SetupCreateWithoutKeyboardInputSchema),
        z.lazy(() => SetupUncheckedCreateWithoutKeyboardInputSchema),
      ]),
    })
    .strict();

export const SetupUpdateWithWhereUniqueWithoutKeyboardInputSchema: z.ZodType<Prisma.SetupUpdateWithWhereUniqueWithoutKeyboardInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => SetupUpdateWithoutKeyboardInputSchema),
        z.lazy(() => SetupUncheckedUpdateWithoutKeyboardInputSchema),
      ]),
    })
    .strict();

export const SetupUpdateManyWithWhereWithoutKeyboardInputSchema: z.ZodType<Prisma.SetupUpdateManyWithWhereWithoutKeyboardInput> =
  z
    .object({
      where: z.lazy(() => SetupScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => SetupUpdateManyMutationInputSchema),
        z.lazy(() => SetupUncheckedUpdateManyWithoutKeyboardInputSchema),
      ]),
    })
    .strict();

export const SetupCreateWithoutMouseInputSchema: z.ZodType<Prisma.SetupCreateWithoutMouseInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      name: z.string().optional().nullable(),
      cpu: z.lazy(() => CPUCreateNestedOneWithoutSetupsInputSchema),
      gpu: z.lazy(() => GPUCreateNestedOneWithoutSetupsInputSchema),
      hdd: z.lazy(() => HDDCreateNestedOneWithoutSetupsInputSchema),
      case: z.lazy(() => CaseCreateNestedOneWithoutSetupsInputSchema),
      ram: z.lazy(() => RAMCreateNestedOneWithoutSetupsInputSchema),
      psu: z.lazy(() => PSUCreateNestedOneWithoutSetupsInputSchema),
      monitors: z
        .lazy(() => MonitorsOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      sound_card: z.lazy(
        () => SoundCardCreateNestedOneWithoutSetupsInputSchema,
      ),
      cpu_cooler: z.lazy(
        () => CPUCoolerCreateNestedOneWithoutSetupsInputSchema,
      ),
      motherboard: z.lazy(
        () => MotherboardCreateNestedOneWithoutSetupsInputSchema,
      ),
      headphones: z.lazy(
        () => HeadphonesCreateNestedOneWithoutSetupsInputSchema,
      ),
      keyboard: z.lazy(() => KeyboardCreateNestedOneWithoutSetupsInputSchema),
      speakers: z
        .lazy(() => SpeakersOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      webcam: z.lazy(() => WebcamCreateNestedOneWithoutSetupsInputSchema),
      case_fans: z
        .lazy(() => CaseFanOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      user: z.lazy(() => UserCreateNestedOneWithoutSetupsInputSchema),
    })
    .strict();

export const SetupUncheckedCreateWithoutMouseInputSchema: z.ZodType<Prisma.SetupUncheckedCreateWithoutMouseInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      cpu_id: z.string(),
      gpu_id: z.string(),
      hdd_id: z.string(),
      case_id: z.string(),
      psu_id: z.string(),
      ram_id: z.string(),
      name: z.string().optional().nullable(),
      sound_card_id: z.string(),
      cpu_cooler_id: z.string(),
      motherboard_id: z.string(),
      headphones_id: z.string(),
      keyboard_id: z.string(),
      webcam_id: z.string(),
      user_id: z.string(),
      monitors: z
        .lazy(
          () => MonitorsOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      speakers: z
        .lazy(
          () => SpeakersOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
      case_fans: z
        .lazy(
          () => CaseFanOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
    })
    .strict();

export const SetupCreateOrConnectWithoutMouseInputSchema: z.ZodType<Prisma.SetupCreateOrConnectWithoutMouseInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => SetupCreateWithoutMouseInputSchema),
        z.lazy(() => SetupUncheckedCreateWithoutMouseInputSchema),
      ]),
    })
    .strict();

export const SetupCreateManyMouseInputEnvelopeSchema: z.ZodType<Prisma.SetupCreateManyMouseInputEnvelope> =
  z
    .object({
      data: z.union([
        z.lazy(() => SetupCreateManyMouseInputSchema),
        z.lazy(() => SetupCreateManyMouseInputSchema).array(),
      ]),
      skipDuplicates: z.boolean().optional(),
    })
    .strict();

export const SetupUpsertWithWhereUniqueWithoutMouseInputSchema: z.ZodType<Prisma.SetupUpsertWithWhereUniqueWithoutMouseInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => SetupUpdateWithoutMouseInputSchema),
        z.lazy(() => SetupUncheckedUpdateWithoutMouseInputSchema),
      ]),
      create: z.union([
        z.lazy(() => SetupCreateWithoutMouseInputSchema),
        z.lazy(() => SetupUncheckedCreateWithoutMouseInputSchema),
      ]),
    })
    .strict();

export const SetupUpdateWithWhereUniqueWithoutMouseInputSchema: z.ZodType<Prisma.SetupUpdateWithWhereUniqueWithoutMouseInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => SetupUpdateWithoutMouseInputSchema),
        z.lazy(() => SetupUncheckedUpdateWithoutMouseInputSchema),
      ]),
    })
    .strict();

export const SetupUpdateManyWithWhereWithoutMouseInputSchema: z.ZodType<Prisma.SetupUpdateManyWithWhereWithoutMouseInput> =
  z
    .object({
      where: z.lazy(() => SetupScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => SetupUpdateManyMutationInputSchema),
        z.lazy(() => SetupUncheckedUpdateManyWithoutMouseInputSchema),
      ]),
    })
    .strict();

export const SpeakersOfSetupCreateWithoutSpeakersInputSchema: z.ZodType<Prisma.SpeakersOfSetupCreateWithoutSpeakersInput> =
  z
    .object({
      quantity: z.number().int(),
      setup: z.lazy(() => SetupCreateNestedOneWithoutSpeakersInputSchema),
    })
    .strict();

export const SpeakersOfSetupUncheckedCreateWithoutSpeakersInputSchema: z.ZodType<Prisma.SpeakersOfSetupUncheckedCreateWithoutSpeakersInput> =
  z
    .object({
      setup_id: z.string(),
      quantity: z.number().int(),
    })
    .strict();

export const SpeakersOfSetupCreateOrConnectWithoutSpeakersInputSchema: z.ZodType<Prisma.SpeakersOfSetupCreateOrConnectWithoutSpeakersInput> =
  z
    .object({
      where: z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => SpeakersOfSetupCreateWithoutSpeakersInputSchema),
        z.lazy(() => SpeakersOfSetupUncheckedCreateWithoutSpeakersInputSchema),
      ]),
    })
    .strict();

export const SpeakersOfSetupCreateManySpeakersInputEnvelopeSchema: z.ZodType<Prisma.SpeakersOfSetupCreateManySpeakersInputEnvelope> =
  z
    .object({
      data: z.union([
        z.lazy(() => SpeakersOfSetupCreateManySpeakersInputSchema),
        z.lazy(() => SpeakersOfSetupCreateManySpeakersInputSchema).array(),
      ]),
      skipDuplicates: z.boolean().optional(),
    })
    .strict();

export const SpeakersOfSetupUpsertWithWhereUniqueWithoutSpeakersInputSchema: z.ZodType<Prisma.SpeakersOfSetupUpsertWithWhereUniqueWithoutSpeakersInput> =
  z
    .object({
      where: z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => SpeakersOfSetupUpdateWithoutSpeakersInputSchema),
        z.lazy(() => SpeakersOfSetupUncheckedUpdateWithoutSpeakersInputSchema),
      ]),
      create: z.union([
        z.lazy(() => SpeakersOfSetupCreateWithoutSpeakersInputSchema),
        z.lazy(() => SpeakersOfSetupUncheckedCreateWithoutSpeakersInputSchema),
      ]),
    })
    .strict();

export const SpeakersOfSetupUpdateWithWhereUniqueWithoutSpeakersInputSchema: z.ZodType<Prisma.SpeakersOfSetupUpdateWithWhereUniqueWithoutSpeakersInput> =
  z
    .object({
      where: z.lazy(() => SpeakersOfSetupWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => SpeakersOfSetupUpdateWithoutSpeakersInputSchema),
        z.lazy(() => SpeakersOfSetupUncheckedUpdateWithoutSpeakersInputSchema),
      ]),
    })
    .strict();

export const SpeakersOfSetupUpdateManyWithWhereWithoutSpeakersInputSchema: z.ZodType<Prisma.SpeakersOfSetupUpdateManyWithWhereWithoutSpeakersInput> =
  z
    .object({
      where: z.lazy(() => SpeakersOfSetupScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => SpeakersOfSetupUpdateManyMutationInputSchema),
        z.lazy(
          () => SpeakersOfSetupUncheckedUpdateManyWithoutSpeakersInputSchema,
        ),
      ]),
    })
    .strict();

export const SetupCreateWithoutWebcamInputSchema: z.ZodType<Prisma.SetupCreateWithoutWebcamInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      name: z.string().optional().nullable(),
      cpu: z.lazy(() => CPUCreateNestedOneWithoutSetupsInputSchema),
      gpu: z.lazy(() => GPUCreateNestedOneWithoutSetupsInputSchema),
      hdd: z.lazy(() => HDDCreateNestedOneWithoutSetupsInputSchema),
      case: z.lazy(() => CaseCreateNestedOneWithoutSetupsInputSchema),
      ram: z.lazy(() => RAMCreateNestedOneWithoutSetupsInputSchema),
      psu: z.lazy(() => PSUCreateNestedOneWithoutSetupsInputSchema),
      monitors: z
        .lazy(() => MonitorsOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      sound_card: z.lazy(
        () => SoundCardCreateNestedOneWithoutSetupsInputSchema,
      ),
      cpu_cooler: z.lazy(
        () => CPUCoolerCreateNestedOneWithoutSetupsInputSchema,
      ),
      motherboard: z.lazy(
        () => MotherboardCreateNestedOneWithoutSetupsInputSchema,
      ),
      headphones: z.lazy(
        () => HeadphonesCreateNestedOneWithoutSetupsInputSchema,
      ),
      keyboard: z.lazy(() => KeyboardCreateNestedOneWithoutSetupsInputSchema),
      mouse: z.lazy(() => MouseCreateNestedOneWithoutSetupsInputSchema),
      speakers: z
        .lazy(() => SpeakersOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      case_fans: z
        .lazy(() => CaseFanOfSetupCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      user: z.lazy(() => UserCreateNestedOneWithoutSetupsInputSchema),
    })
    .strict();

export const SetupUncheckedCreateWithoutWebcamInputSchema: z.ZodType<Prisma.SetupUncheckedCreateWithoutWebcamInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      cpu_id: z.string(),
      gpu_id: z.string(),
      hdd_id: z.string(),
      case_id: z.string(),
      psu_id: z.string(),
      ram_id: z.string(),
      name: z.string().optional().nullable(),
      sound_card_id: z.string(),
      cpu_cooler_id: z.string(),
      motherboard_id: z.string(),
      headphones_id: z.string(),
      keyboard_id: z.string(),
      mouse_id: z.string(),
      user_id: z.string(),
      monitors: z
        .lazy(
          () => MonitorsOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema)
        .optional(),
      speakers: z
        .lazy(
          () => SpeakersOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
      case_fans: z
        .lazy(
          () => CaseFanOfSetupUncheckedCreateNestedManyWithoutSetupInputSchema,
        )
        .optional(),
    })
    .strict();

export const SetupCreateOrConnectWithoutWebcamInputSchema: z.ZodType<Prisma.SetupCreateOrConnectWithoutWebcamInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => SetupCreateWithoutWebcamInputSchema),
        z.lazy(() => SetupUncheckedCreateWithoutWebcamInputSchema),
      ]),
    })
    .strict();

export const SetupCreateManyWebcamInputEnvelopeSchema: z.ZodType<Prisma.SetupCreateManyWebcamInputEnvelope> =
  z
    .object({
      data: z.union([
        z.lazy(() => SetupCreateManyWebcamInputSchema),
        z.lazy(() => SetupCreateManyWebcamInputSchema).array(),
      ]),
      skipDuplicates: z.boolean().optional(),
    })
    .strict();

export const SetupUpsertWithWhereUniqueWithoutWebcamInputSchema: z.ZodType<Prisma.SetupUpsertWithWhereUniqueWithoutWebcamInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => SetupUpdateWithoutWebcamInputSchema),
        z.lazy(() => SetupUncheckedUpdateWithoutWebcamInputSchema),
      ]),
      create: z.union([
        z.lazy(() => SetupCreateWithoutWebcamInputSchema),
        z.lazy(() => SetupUncheckedCreateWithoutWebcamInputSchema),
      ]),
    })
    .strict();

export const SetupUpdateWithWhereUniqueWithoutWebcamInputSchema: z.ZodType<Prisma.SetupUpdateWithWhereUniqueWithoutWebcamInput> =
  z
    .object({
      where: z.lazy(() => SetupWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => SetupUpdateWithoutWebcamInputSchema),
        z.lazy(() => SetupUncheckedUpdateWithoutWebcamInputSchema),
      ]),
    })
    .strict();

export const SetupUpdateManyWithWhereWithoutWebcamInputSchema: z.ZodType<Prisma.SetupUpdateManyWithWhereWithoutWebcamInput> =
  z
    .object({
      where: z.lazy(() => SetupScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => SetupUpdateManyMutationInputSchema),
        z.lazy(() => SetupUncheckedUpdateManyWithoutWebcamInputSchema),
      ]),
    })
    .strict();

export const CaseFanOfSetupCreateWithoutCase_fanInputSchema: z.ZodType<Prisma.CaseFanOfSetupCreateWithoutCase_fanInput> =
  z
    .object({
      quantity: z.number().int(),
      setup: z.lazy(() => SetupCreateNestedOneWithoutCase_fansInputSchema),
    })
    .strict();

export const CaseFanOfSetupUncheckedCreateWithoutCase_fanInputSchema: z.ZodType<Prisma.CaseFanOfSetupUncheckedCreateWithoutCase_fanInput> =
  z
    .object({
      setup_id: z.string(),
      quantity: z.number().int(),
    })
    .strict();

export const CaseFanOfSetupCreateOrConnectWithoutCase_fanInputSchema: z.ZodType<Prisma.CaseFanOfSetupCreateOrConnectWithoutCase_fanInput> =
  z
    .object({
      where: z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema),
      create: z.union([
        z.lazy(() => CaseFanOfSetupCreateWithoutCase_fanInputSchema),
        z.lazy(() => CaseFanOfSetupUncheckedCreateWithoutCase_fanInputSchema),
      ]),
    })
    .strict();

export const CaseFanOfSetupCreateManyCase_fanInputEnvelopeSchema: z.ZodType<Prisma.CaseFanOfSetupCreateManyCase_fanInputEnvelope> =
  z
    .object({
      data: z.union([
        z.lazy(() => CaseFanOfSetupCreateManyCase_fanInputSchema),
        z.lazy(() => CaseFanOfSetupCreateManyCase_fanInputSchema).array(),
      ]),
      skipDuplicates: z.boolean().optional(),
    })
    .strict();

export const CaseFanOfSetupUpsertWithWhereUniqueWithoutCase_fanInputSchema: z.ZodType<Prisma.CaseFanOfSetupUpsertWithWhereUniqueWithoutCase_fanInput> =
  z
    .object({
      where: z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema),
      update: z.union([
        z.lazy(() => CaseFanOfSetupUpdateWithoutCase_fanInputSchema),
        z.lazy(() => CaseFanOfSetupUncheckedUpdateWithoutCase_fanInputSchema),
      ]),
      create: z.union([
        z.lazy(() => CaseFanOfSetupCreateWithoutCase_fanInputSchema),
        z.lazy(() => CaseFanOfSetupUncheckedCreateWithoutCase_fanInputSchema),
      ]),
    })
    .strict();

export const CaseFanOfSetupUpdateWithWhereUniqueWithoutCase_fanInputSchema: z.ZodType<Prisma.CaseFanOfSetupUpdateWithWhereUniqueWithoutCase_fanInput> =
  z
    .object({
      where: z.lazy(() => CaseFanOfSetupWhereUniqueInputSchema),
      data: z.union([
        z.lazy(() => CaseFanOfSetupUpdateWithoutCase_fanInputSchema),
        z.lazy(() => CaseFanOfSetupUncheckedUpdateWithoutCase_fanInputSchema),
      ]),
    })
    .strict();

export const CaseFanOfSetupUpdateManyWithWhereWithoutCase_fanInputSchema: z.ZodType<Prisma.CaseFanOfSetupUpdateManyWithWhereWithoutCase_fanInput> =
  z
    .object({
      where: z.lazy(() => CaseFanOfSetupScalarWhereInputSchema),
      data: z.union([
        z.lazy(() => CaseFanOfSetupUpdateManyMutationInputSchema),
        z.lazy(
          () => CaseFanOfSetupUncheckedUpdateManyWithoutCase_fanInputSchema,
        ),
      ]),
    })
    .strict();

export const SetupCreateManyUserInputSchema: z.ZodType<Prisma.SetupCreateManyUserInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      cpu_id: z.string(),
      gpu_id: z.string(),
      hdd_id: z.string(),
      case_id: z.string(),
      psu_id: z.string(),
      ram_id: z.string(),
      name: z.string().optional().nullable(),
      sound_card_id: z.string(),
      cpu_cooler_id: z.string(),
      motherboard_id: z.string(),
      headphones_id: z.string(),
      keyboard_id: z.string(),
      mouse_id: z.string(),
      webcam_id: z.string(),
    })
    .strict();

export const AccountCreateManyUserInputSchema: z.ZodType<Prisma.AccountCreateManyUserInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      type: z.string(),
      provider: z.string(),
      providerAccountId: z.string(),
      refresh_token: z.string().optional().nullable(),
      access_token: z.string().optional().nullable(),
      expires_at: z.number().int().optional().nullable(),
      token_type: z.string().optional().nullable(),
      scope: z.string().optional().nullable(),
      id_token: z.string().optional().nullable(),
      session_state: z.string().optional().nullable(),
    })
    .strict();

export const SessionCreateManyUserInputSchema: z.ZodType<Prisma.SessionCreateManyUserInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      sessionToken: z.string(),
      expires: z.coerce.date(),
    })
    .strict();

export const SetupUpdateWithoutUserInputSchema: z.ZodType<Prisma.SetupUpdateWithoutUserInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      cpu: z
        .lazy(() => CPUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      gpu: z
        .lazy(() => GPUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      hdd: z
        .lazy(() => HDDUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      case: z
        .lazy(() => CaseUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      ram: z
        .lazy(() => RAMUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      psu: z
        .lazy(() => PSUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      monitors: z
        .lazy(() => MonitorsOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      sound_card: z
        .lazy(() => SoundCardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      cpu_cooler: z
        .lazy(() => CPUCoolerUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      motherboard: z
        .lazy(() => MotherboardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      headphones: z
        .lazy(() => HeadphonesUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      keyboard: z
        .lazy(() => KeyboardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      mouse: z
        .lazy(() => MouseUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      speakers: z
        .lazy(() => SpeakersOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      webcam: z
        .lazy(() => WebcamUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      case_fans: z
        .lazy(() => CaseFanOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateWithoutUserInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      gpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      hdd_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      case_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      psu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      ram_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      sound_card_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_cooler_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      motherboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      headphones_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      keyboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      mouse_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      webcam_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      monitors: z
        .lazy(
          () => MonitorsOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      speakers: z
        .lazy(
          () => SpeakersOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
      case_fans: z
        .lazy(
          () => CaseFanOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateManyWithoutUserInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      gpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      hdd_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      case_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      psu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      ram_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      sound_card_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_cooler_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      motherboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      headphones_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      keyboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      mouse_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      webcam_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const AccountUpdateWithoutUserInputSchema: z.ZodType<Prisma.AccountUpdateWithoutUserInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      type: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      provider: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      providerAccountId: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      refresh_token: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      access_token: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      expires_at: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      token_type: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      scope: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      id_token: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      session_state: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const AccountUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateWithoutUserInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      type: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      provider: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      providerAccountId: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      refresh_token: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      access_token: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      expires_at: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      token_type: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      scope: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      id_token: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      session_state: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const AccountUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateManyWithoutUserInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      type: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      provider: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      providerAccountId: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      refresh_token: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      access_token: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      expires_at: z
        .union([
          z.number().int(),
          z.lazy(() => NullableIntFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      token_type: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      scope: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      id_token: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      session_state: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
    })
    .strict();

export const SessionUpdateWithoutUserInputSchema: z.ZodType<Prisma.SessionUpdateWithoutUserInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      sessionToken: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      expires: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const SessionUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateWithoutUserInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      sessionToken: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      expires: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const SessionUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyWithoutUserInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      sessionToken: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      expires: z
        .union([
          z.coerce.date(),
          z.lazy(() => DateTimeFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const SetupCreateManyCpu_coolerInputSchema: z.ZodType<Prisma.SetupCreateManyCpu_coolerInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      cpu_id: z.string(),
      gpu_id: z.string(),
      hdd_id: z.string(),
      case_id: z.string(),
      psu_id: z.string(),
      ram_id: z.string(),
      name: z.string().optional().nullable(),
      sound_card_id: z.string(),
      motherboard_id: z.string(),
      headphones_id: z.string(),
      keyboard_id: z.string(),
      mouse_id: z.string(),
      webcam_id: z.string(),
      user_id: z.string(),
    })
    .strict();

export const SetupUpdateWithoutCpu_coolerInputSchema: z.ZodType<Prisma.SetupUpdateWithoutCpu_coolerInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      cpu: z
        .lazy(() => CPUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      gpu: z
        .lazy(() => GPUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      hdd: z
        .lazy(() => HDDUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      case: z
        .lazy(() => CaseUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      ram: z
        .lazy(() => RAMUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      psu: z
        .lazy(() => PSUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      monitors: z
        .lazy(() => MonitorsOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      sound_card: z
        .lazy(() => SoundCardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      motherboard: z
        .lazy(() => MotherboardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      headphones: z
        .lazy(() => HeadphonesUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      keyboard: z
        .lazy(() => KeyboardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      mouse: z
        .lazy(() => MouseUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      speakers: z
        .lazy(() => SpeakersOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      webcam: z
        .lazy(() => WebcamUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      case_fans: z
        .lazy(() => CaseFanOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      user: z
        .lazy(() => UserUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateWithoutCpu_coolerInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateWithoutCpu_coolerInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      gpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      hdd_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      case_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      psu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      ram_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      sound_card_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      motherboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      headphones_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      keyboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      mouse_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      webcam_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      user_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      monitors: z
        .lazy(
          () => MonitorsOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      speakers: z
        .lazy(
          () => SpeakersOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
      case_fans: z
        .lazy(
          () => CaseFanOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateManyWithoutCpu_coolerInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateManyWithoutCpu_coolerInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      gpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      hdd_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      case_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      psu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      ram_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      sound_card_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      motherboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      headphones_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      keyboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      mouse_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      webcam_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      user_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const SetupCreateManyMotherboardInputSchema: z.ZodType<Prisma.SetupCreateManyMotherboardInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      cpu_id: z.string(),
      gpu_id: z.string(),
      hdd_id: z.string(),
      case_id: z.string(),
      psu_id: z.string(),
      ram_id: z.string(),
      name: z.string().optional().nullable(),
      sound_card_id: z.string(),
      cpu_cooler_id: z.string(),
      headphones_id: z.string(),
      keyboard_id: z.string(),
      mouse_id: z.string(),
      webcam_id: z.string(),
      user_id: z.string(),
    })
    .strict();

export const SetupUpdateWithoutMotherboardInputSchema: z.ZodType<Prisma.SetupUpdateWithoutMotherboardInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      cpu: z
        .lazy(() => CPUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      gpu: z
        .lazy(() => GPUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      hdd: z
        .lazy(() => HDDUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      case: z
        .lazy(() => CaseUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      ram: z
        .lazy(() => RAMUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      psu: z
        .lazy(() => PSUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      monitors: z
        .lazy(() => MonitorsOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      sound_card: z
        .lazy(() => SoundCardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      cpu_cooler: z
        .lazy(() => CPUCoolerUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      headphones: z
        .lazy(() => HeadphonesUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      keyboard: z
        .lazy(() => KeyboardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      mouse: z
        .lazy(() => MouseUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      speakers: z
        .lazy(() => SpeakersOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      webcam: z
        .lazy(() => WebcamUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      case_fans: z
        .lazy(() => CaseFanOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      user: z
        .lazy(() => UserUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateWithoutMotherboardInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateWithoutMotherboardInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      gpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      hdd_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      case_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      psu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      ram_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      sound_card_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_cooler_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      headphones_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      keyboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      mouse_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      webcam_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      user_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      monitors: z
        .lazy(
          () => MonitorsOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      speakers: z
        .lazy(
          () => SpeakersOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
      case_fans: z
        .lazy(
          () => CaseFanOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateManyWithoutMotherboardInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateManyWithoutMotherboardInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      gpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      hdd_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      case_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      psu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      ram_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      sound_card_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_cooler_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      headphones_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      keyboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      mouse_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      webcam_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      user_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const SetupCreateManyRamInputSchema: z.ZodType<Prisma.SetupCreateManyRamInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      cpu_id: z.string(),
      gpu_id: z.string(),
      hdd_id: z.string(),
      case_id: z.string(),
      psu_id: z.string(),
      name: z.string().optional().nullable(),
      sound_card_id: z.string(),
      cpu_cooler_id: z.string(),
      motherboard_id: z.string(),
      headphones_id: z.string(),
      keyboard_id: z.string(),
      mouse_id: z.string(),
      webcam_id: z.string(),
      user_id: z.string(),
    })
    .strict();

export const SetupUpdateWithoutRamInputSchema: z.ZodType<Prisma.SetupUpdateWithoutRamInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      cpu: z
        .lazy(() => CPUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      gpu: z
        .lazy(() => GPUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      hdd: z
        .lazy(() => HDDUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      case: z
        .lazy(() => CaseUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      psu: z
        .lazy(() => PSUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      monitors: z
        .lazy(() => MonitorsOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      sound_card: z
        .lazy(() => SoundCardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      cpu_cooler: z
        .lazy(() => CPUCoolerUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      motherboard: z
        .lazy(() => MotherboardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      headphones: z
        .lazy(() => HeadphonesUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      keyboard: z
        .lazy(() => KeyboardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      mouse: z
        .lazy(() => MouseUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      speakers: z
        .lazy(() => SpeakersOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      webcam: z
        .lazy(() => WebcamUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      case_fans: z
        .lazy(() => CaseFanOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      user: z
        .lazy(() => UserUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateWithoutRamInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateWithoutRamInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      gpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      hdd_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      case_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      psu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      sound_card_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_cooler_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      motherboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      headphones_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      keyboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      mouse_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      webcam_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      user_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      monitors: z
        .lazy(
          () => MonitorsOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      speakers: z
        .lazy(
          () => SpeakersOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
      case_fans: z
        .lazy(
          () => CaseFanOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateManyWithoutRamInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateManyWithoutRamInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      gpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      hdd_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      case_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      psu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      sound_card_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_cooler_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      motherboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      headphones_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      keyboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      mouse_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      webcam_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      user_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const SetupCreateManyCpuInputSchema: z.ZodType<Prisma.SetupCreateManyCpuInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      gpu_id: z.string(),
      hdd_id: z.string(),
      case_id: z.string(),
      psu_id: z.string(),
      ram_id: z.string(),
      name: z.string().optional().nullable(),
      sound_card_id: z.string(),
      cpu_cooler_id: z.string(),
      motherboard_id: z.string(),
      headphones_id: z.string(),
      keyboard_id: z.string(),
      mouse_id: z.string(),
      webcam_id: z.string(),
      user_id: z.string(),
    })
    .strict();

export const SetupUpdateWithoutCpuInputSchema: z.ZodType<Prisma.SetupUpdateWithoutCpuInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      gpu: z
        .lazy(() => GPUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      hdd: z
        .lazy(() => HDDUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      case: z
        .lazy(() => CaseUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      ram: z
        .lazy(() => RAMUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      psu: z
        .lazy(() => PSUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      monitors: z
        .lazy(() => MonitorsOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      sound_card: z
        .lazy(() => SoundCardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      cpu_cooler: z
        .lazy(() => CPUCoolerUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      motherboard: z
        .lazy(() => MotherboardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      headphones: z
        .lazy(() => HeadphonesUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      keyboard: z
        .lazy(() => KeyboardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      mouse: z
        .lazy(() => MouseUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      speakers: z
        .lazy(() => SpeakersOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      webcam: z
        .lazy(() => WebcamUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      case_fans: z
        .lazy(() => CaseFanOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      user: z
        .lazy(() => UserUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateWithoutCpuInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateWithoutCpuInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      gpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      hdd_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      case_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      psu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      ram_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      sound_card_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_cooler_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      motherboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      headphones_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      keyboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      mouse_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      webcam_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      user_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      monitors: z
        .lazy(
          () => MonitorsOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      speakers: z
        .lazy(
          () => SpeakersOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
      case_fans: z
        .lazy(
          () => CaseFanOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateManyWithoutCpuInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateManyWithoutCpuInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      gpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      hdd_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      case_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      psu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      ram_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      sound_card_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_cooler_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      motherboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      headphones_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      keyboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      mouse_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      webcam_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      user_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const SetupCreateManyHddInputSchema: z.ZodType<Prisma.SetupCreateManyHddInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      cpu_id: z.string(),
      gpu_id: z.string(),
      case_id: z.string(),
      psu_id: z.string(),
      ram_id: z.string(),
      name: z.string().optional().nullable(),
      sound_card_id: z.string(),
      cpu_cooler_id: z.string(),
      motherboard_id: z.string(),
      headphones_id: z.string(),
      keyboard_id: z.string(),
      mouse_id: z.string(),
      webcam_id: z.string(),
      user_id: z.string(),
    })
    .strict();

export const SetupUpdateWithoutHddInputSchema: z.ZodType<Prisma.SetupUpdateWithoutHddInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      cpu: z
        .lazy(() => CPUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      gpu: z
        .lazy(() => GPUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      case: z
        .lazy(() => CaseUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      ram: z
        .lazy(() => RAMUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      psu: z
        .lazy(() => PSUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      monitors: z
        .lazy(() => MonitorsOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      sound_card: z
        .lazy(() => SoundCardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      cpu_cooler: z
        .lazy(() => CPUCoolerUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      motherboard: z
        .lazy(() => MotherboardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      headphones: z
        .lazy(() => HeadphonesUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      keyboard: z
        .lazy(() => KeyboardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      mouse: z
        .lazy(() => MouseUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      speakers: z
        .lazy(() => SpeakersOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      webcam: z
        .lazy(() => WebcamUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      case_fans: z
        .lazy(() => CaseFanOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      user: z
        .lazy(() => UserUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateWithoutHddInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateWithoutHddInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      gpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      case_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      psu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      ram_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      sound_card_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_cooler_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      motherboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      headphones_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      keyboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      mouse_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      webcam_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      user_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      monitors: z
        .lazy(
          () => MonitorsOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      speakers: z
        .lazy(
          () => SpeakersOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
      case_fans: z
        .lazy(
          () => CaseFanOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateManyWithoutHddInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateManyWithoutHddInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      gpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      case_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      psu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      ram_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      sound_card_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_cooler_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      motherboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      headphones_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      keyboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      mouse_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      webcam_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      user_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const SSDOfSetupCreateManySsdInputSchema: z.ZodType<Prisma.SSDOfSetupCreateManySsdInput> =
  z
    .object({
      setup_id: z.string(),
    })
    .strict();

export const SSDOfSetupUpdateWithoutSsdInputSchema: z.ZodType<Prisma.SSDOfSetupUpdateWithoutSsdInput> =
  z
    .object({
      setup: z
        .lazy(() => SetupUpdateOneRequiredWithoutSddsNestedInputSchema)
        .optional(),
    })
    .strict();

export const SSDOfSetupUncheckedUpdateWithoutSsdInputSchema: z.ZodType<Prisma.SSDOfSetupUncheckedUpdateWithoutSsdInput> =
  z
    .object({
      setup_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const SSDOfSetupUncheckedUpdateManyWithoutSsdInputSchema: z.ZodType<Prisma.SSDOfSetupUncheckedUpdateManyWithoutSsdInput> =
  z
    .object({
      setup_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const SetupCreateManyGpuInputSchema: z.ZodType<Prisma.SetupCreateManyGpuInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      cpu_id: z.string(),
      hdd_id: z.string(),
      case_id: z.string(),
      psu_id: z.string(),
      ram_id: z.string(),
      name: z.string().optional().nullable(),
      sound_card_id: z.string(),
      cpu_cooler_id: z.string(),
      motherboard_id: z.string(),
      headphones_id: z.string(),
      keyboard_id: z.string(),
      mouse_id: z.string(),
      webcam_id: z.string(),
      user_id: z.string(),
    })
    .strict();

export const SetupUpdateWithoutGpuInputSchema: z.ZodType<Prisma.SetupUpdateWithoutGpuInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      cpu: z
        .lazy(() => CPUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      hdd: z
        .lazy(() => HDDUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      case: z
        .lazy(() => CaseUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      ram: z
        .lazy(() => RAMUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      psu: z
        .lazy(() => PSUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      monitors: z
        .lazy(() => MonitorsOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      sound_card: z
        .lazy(() => SoundCardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      cpu_cooler: z
        .lazy(() => CPUCoolerUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      motherboard: z
        .lazy(() => MotherboardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      headphones: z
        .lazy(() => HeadphonesUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      keyboard: z
        .lazy(() => KeyboardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      mouse: z
        .lazy(() => MouseUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      speakers: z
        .lazy(() => SpeakersOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      webcam: z
        .lazy(() => WebcamUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      case_fans: z
        .lazy(() => CaseFanOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      user: z
        .lazy(() => UserUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateWithoutGpuInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateWithoutGpuInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      hdd_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      case_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      psu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      ram_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      sound_card_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_cooler_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      motherboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      headphones_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      keyboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      mouse_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      webcam_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      user_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      monitors: z
        .lazy(
          () => MonitorsOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      speakers: z
        .lazy(
          () => SpeakersOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
      case_fans: z
        .lazy(
          () => CaseFanOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateManyWithoutGpuInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateManyWithoutGpuInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      hdd_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      case_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      psu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      ram_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      sound_card_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_cooler_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      motherboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      headphones_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      keyboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      mouse_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      webcam_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      user_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const SetupCreateManyCaseInputSchema: z.ZodType<Prisma.SetupCreateManyCaseInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      cpu_id: z.string(),
      gpu_id: z.string(),
      hdd_id: z.string(),
      psu_id: z.string(),
      ram_id: z.string(),
      name: z.string().optional().nullable(),
      sound_card_id: z.string(),
      cpu_cooler_id: z.string(),
      motherboard_id: z.string(),
      headphones_id: z.string(),
      keyboard_id: z.string(),
      mouse_id: z.string(),
      webcam_id: z.string(),
      user_id: z.string(),
    })
    .strict();

export const SetupUpdateWithoutCaseInputSchema: z.ZodType<Prisma.SetupUpdateWithoutCaseInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      cpu: z
        .lazy(() => CPUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      gpu: z
        .lazy(() => GPUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      hdd: z
        .lazy(() => HDDUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      ram: z
        .lazy(() => RAMUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      psu: z
        .lazy(() => PSUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      monitors: z
        .lazy(() => MonitorsOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      sound_card: z
        .lazy(() => SoundCardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      cpu_cooler: z
        .lazy(() => CPUCoolerUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      motherboard: z
        .lazy(() => MotherboardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      headphones: z
        .lazy(() => HeadphonesUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      keyboard: z
        .lazy(() => KeyboardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      mouse: z
        .lazy(() => MouseUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      speakers: z
        .lazy(() => SpeakersOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      webcam: z
        .lazy(() => WebcamUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      case_fans: z
        .lazy(() => CaseFanOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      user: z
        .lazy(() => UserUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateWithoutCaseInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateWithoutCaseInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      gpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      hdd_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      psu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      ram_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      sound_card_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_cooler_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      motherboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      headphones_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      keyboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      mouse_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      webcam_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      user_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      monitors: z
        .lazy(
          () => MonitorsOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      speakers: z
        .lazy(
          () => SpeakersOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
      case_fans: z
        .lazy(
          () => CaseFanOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateManyWithoutCaseInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateManyWithoutCaseInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      gpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      hdd_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      psu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      ram_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      sound_card_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_cooler_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      motherboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      headphones_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      keyboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      mouse_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      webcam_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      user_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const SetupCreateManyPsuInputSchema: z.ZodType<Prisma.SetupCreateManyPsuInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      cpu_id: z.string(),
      gpu_id: z.string(),
      hdd_id: z.string(),
      case_id: z.string(),
      ram_id: z.string(),
      name: z.string().optional().nullable(),
      sound_card_id: z.string(),
      cpu_cooler_id: z.string(),
      motherboard_id: z.string(),
      headphones_id: z.string(),
      keyboard_id: z.string(),
      mouse_id: z.string(),
      webcam_id: z.string(),
      user_id: z.string(),
    })
    .strict();

export const SetupUpdateWithoutPsuInputSchema: z.ZodType<Prisma.SetupUpdateWithoutPsuInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      cpu: z
        .lazy(() => CPUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      gpu: z
        .lazy(() => GPUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      hdd: z
        .lazy(() => HDDUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      case: z
        .lazy(() => CaseUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      ram: z
        .lazy(() => RAMUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      monitors: z
        .lazy(() => MonitorsOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      sound_card: z
        .lazy(() => SoundCardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      cpu_cooler: z
        .lazy(() => CPUCoolerUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      motherboard: z
        .lazy(() => MotherboardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      headphones: z
        .lazy(() => HeadphonesUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      keyboard: z
        .lazy(() => KeyboardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      mouse: z
        .lazy(() => MouseUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      speakers: z
        .lazy(() => SpeakersOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      webcam: z
        .lazy(() => WebcamUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      case_fans: z
        .lazy(() => CaseFanOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      user: z
        .lazy(() => UserUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateWithoutPsuInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateWithoutPsuInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      gpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      hdd_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      case_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      ram_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      sound_card_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_cooler_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      motherboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      headphones_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      keyboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      mouse_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      webcam_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      user_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      monitors: z
        .lazy(
          () => MonitorsOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      speakers: z
        .lazy(
          () => SpeakersOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
      case_fans: z
        .lazy(
          () => CaseFanOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateManyWithoutPsuInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateManyWithoutPsuInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      gpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      hdd_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      case_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      ram_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      sound_card_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_cooler_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      motherboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      headphones_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      keyboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      mouse_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      webcam_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      user_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const MonitorsOfSetupCreateManySetupInputSchema: z.ZodType<Prisma.MonitorsOfSetupCreateManySetupInput> =
  z
    .object({
      monitor_id: z.string(),
      quantity: z.number().int(),
    })
    .strict();

export const SSDOfSetupCreateManySetupInputSchema: z.ZodType<Prisma.SSDOfSetupCreateManySetupInput> =
  z
    .object({
      ssd_id: z.string(),
    })
    .strict();

export const SpeakersOfSetupCreateManySetupInputSchema: z.ZodType<Prisma.SpeakersOfSetupCreateManySetupInput> =
  z
    .object({
      speakers_id: z.string(),
      quantity: z.number().int(),
    })
    .strict();

export const CaseFanOfSetupCreateManySetupInputSchema: z.ZodType<Prisma.CaseFanOfSetupCreateManySetupInput> =
  z
    .object({
      case_fan_id: z.string(),
      quantity: z.number().int(),
    })
    .strict();

export const MonitorsOfSetupUpdateWithoutSetupInputSchema: z.ZodType<Prisma.MonitorsOfSetupUpdateWithoutSetupInput> =
  z
    .object({
      quantity: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      monitor: z
        .lazy(() => MonitorUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
    })
    .strict();

export const MonitorsOfSetupUncheckedUpdateWithoutSetupInputSchema: z.ZodType<Prisma.MonitorsOfSetupUncheckedUpdateWithoutSetupInput> =
  z
    .object({
      monitor_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      quantity: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const MonitorsOfSetupUncheckedUpdateManyWithoutSetupInputSchema: z.ZodType<Prisma.MonitorsOfSetupUncheckedUpdateManyWithoutSetupInput> =
  z
    .object({
      monitor_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      quantity: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const SSDOfSetupUpdateWithoutSetupInputSchema: z.ZodType<Prisma.SSDOfSetupUpdateWithoutSetupInput> =
  z
    .object({
      ssd: z
        .lazy(() => SSDUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
    })
    .strict();

export const SSDOfSetupUncheckedUpdateWithoutSetupInputSchema: z.ZodType<Prisma.SSDOfSetupUncheckedUpdateWithoutSetupInput> =
  z
    .object({
      ssd_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const SSDOfSetupUncheckedUpdateManyWithoutSetupInputSchema: z.ZodType<Prisma.SSDOfSetupUncheckedUpdateManyWithoutSetupInput> =
  z
    .object({
      ssd_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const SpeakersOfSetupUpdateWithoutSetupInputSchema: z.ZodType<Prisma.SpeakersOfSetupUpdateWithoutSetupInput> =
  z
    .object({
      quantity: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      speakers: z
        .lazy(() => SpeakersUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
    })
    .strict();

export const SpeakersOfSetupUncheckedUpdateWithoutSetupInputSchema: z.ZodType<Prisma.SpeakersOfSetupUncheckedUpdateWithoutSetupInput> =
  z
    .object({
      speakers_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      quantity: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const SpeakersOfSetupUncheckedUpdateManyWithoutSetupInputSchema: z.ZodType<Prisma.SpeakersOfSetupUncheckedUpdateManyWithoutSetupInput> =
  z
    .object({
      speakers_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      quantity: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const CaseFanOfSetupUpdateWithoutSetupInputSchema: z.ZodType<Prisma.CaseFanOfSetupUpdateWithoutSetupInput> =
  z
    .object({
      quantity: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      case_fan: z
        .lazy(() => CaseFanUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
    })
    .strict();

export const CaseFanOfSetupUncheckedUpdateWithoutSetupInputSchema: z.ZodType<Prisma.CaseFanOfSetupUncheckedUpdateWithoutSetupInput> =
  z
    .object({
      case_fan_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      quantity: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const CaseFanOfSetupUncheckedUpdateManyWithoutSetupInputSchema: z.ZodType<Prisma.CaseFanOfSetupUncheckedUpdateManyWithoutSetupInput> =
  z
    .object({
      case_fan_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      quantity: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const MonitorsOfSetupCreateManyMonitorInputSchema: z.ZodType<Prisma.MonitorsOfSetupCreateManyMonitorInput> =
  z
    .object({
      setup_id: z.string(),
      quantity: z.number().int(),
    })
    .strict();

export const MonitorsOfSetupUpdateWithoutMonitorInputSchema: z.ZodType<Prisma.MonitorsOfSetupUpdateWithoutMonitorInput> =
  z
    .object({
      quantity: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      setup: z
        .lazy(() => SetupUpdateOneRequiredWithoutMonitorsNestedInputSchema)
        .optional(),
    })
    .strict();

export const MonitorsOfSetupUncheckedUpdateWithoutMonitorInputSchema: z.ZodType<Prisma.MonitorsOfSetupUncheckedUpdateWithoutMonitorInput> =
  z
    .object({
      setup_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      quantity: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const MonitorsOfSetupUncheckedUpdateManyWithoutMonitorInputSchema: z.ZodType<Prisma.MonitorsOfSetupUncheckedUpdateManyWithoutMonitorInput> =
  z
    .object({
      setup_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      quantity: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const SetupCreateManySound_cardInputSchema: z.ZodType<Prisma.SetupCreateManySound_cardInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      cpu_id: z.string(),
      gpu_id: z.string(),
      hdd_id: z.string(),
      case_id: z.string(),
      psu_id: z.string(),
      ram_id: z.string(),
      name: z.string().optional().nullable(),
      cpu_cooler_id: z.string(),
      motherboard_id: z.string(),
      headphones_id: z.string(),
      keyboard_id: z.string(),
      mouse_id: z.string(),
      webcam_id: z.string(),
      user_id: z.string(),
    })
    .strict();

export const SetupUpdateWithoutSound_cardInputSchema: z.ZodType<Prisma.SetupUpdateWithoutSound_cardInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      cpu: z
        .lazy(() => CPUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      gpu: z
        .lazy(() => GPUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      hdd: z
        .lazy(() => HDDUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      case: z
        .lazy(() => CaseUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      ram: z
        .lazy(() => RAMUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      psu: z
        .lazy(() => PSUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      monitors: z
        .lazy(() => MonitorsOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      cpu_cooler: z
        .lazy(() => CPUCoolerUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      motherboard: z
        .lazy(() => MotherboardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      headphones: z
        .lazy(() => HeadphonesUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      keyboard: z
        .lazy(() => KeyboardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      mouse: z
        .lazy(() => MouseUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      speakers: z
        .lazy(() => SpeakersOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      webcam: z
        .lazy(() => WebcamUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      case_fans: z
        .lazy(() => CaseFanOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      user: z
        .lazy(() => UserUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateWithoutSound_cardInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateWithoutSound_cardInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      gpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      hdd_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      case_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      psu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      ram_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      cpu_cooler_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      motherboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      headphones_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      keyboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      mouse_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      webcam_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      user_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      monitors: z
        .lazy(
          () => MonitorsOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      speakers: z
        .lazy(
          () => SpeakersOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
      case_fans: z
        .lazy(
          () => CaseFanOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateManyWithoutSound_cardInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateManyWithoutSound_cardInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      gpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      hdd_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      case_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      psu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      ram_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      cpu_cooler_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      motherboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      headphones_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      keyboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      mouse_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      webcam_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      user_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const SetupCreateManyHeadphonesInputSchema: z.ZodType<Prisma.SetupCreateManyHeadphonesInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      cpu_id: z.string(),
      gpu_id: z.string(),
      hdd_id: z.string(),
      case_id: z.string(),
      psu_id: z.string(),
      ram_id: z.string(),
      name: z.string().optional().nullable(),
      sound_card_id: z.string(),
      cpu_cooler_id: z.string(),
      motherboard_id: z.string(),
      keyboard_id: z.string(),
      mouse_id: z.string(),
      webcam_id: z.string(),
      user_id: z.string(),
    })
    .strict();

export const SetupUpdateWithoutHeadphonesInputSchema: z.ZodType<Prisma.SetupUpdateWithoutHeadphonesInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      cpu: z
        .lazy(() => CPUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      gpu: z
        .lazy(() => GPUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      hdd: z
        .lazy(() => HDDUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      case: z
        .lazy(() => CaseUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      ram: z
        .lazy(() => RAMUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      psu: z
        .lazy(() => PSUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      monitors: z
        .lazy(() => MonitorsOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      sound_card: z
        .lazy(() => SoundCardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      cpu_cooler: z
        .lazy(() => CPUCoolerUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      motherboard: z
        .lazy(() => MotherboardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      keyboard: z
        .lazy(() => KeyboardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      mouse: z
        .lazy(() => MouseUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      speakers: z
        .lazy(() => SpeakersOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      webcam: z
        .lazy(() => WebcamUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      case_fans: z
        .lazy(() => CaseFanOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      user: z
        .lazy(() => UserUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateWithoutHeadphonesInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateWithoutHeadphonesInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      gpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      hdd_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      case_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      psu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      ram_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      sound_card_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_cooler_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      motherboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      keyboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      mouse_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      webcam_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      user_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      monitors: z
        .lazy(
          () => MonitorsOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      speakers: z
        .lazy(
          () => SpeakersOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
      case_fans: z
        .lazy(
          () => CaseFanOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateManyWithoutHeadphonesInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateManyWithoutHeadphonesInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      gpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      hdd_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      case_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      psu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      ram_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      sound_card_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_cooler_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      motherboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      keyboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      mouse_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      webcam_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      user_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const SetupCreateManyKeyboardInputSchema: z.ZodType<Prisma.SetupCreateManyKeyboardInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      cpu_id: z.string(),
      gpu_id: z.string(),
      hdd_id: z.string(),
      case_id: z.string(),
      psu_id: z.string(),
      ram_id: z.string(),
      name: z.string().optional().nullable(),
      sound_card_id: z.string(),
      cpu_cooler_id: z.string(),
      motherboard_id: z.string(),
      headphones_id: z.string(),
      mouse_id: z.string(),
      webcam_id: z.string(),
      user_id: z.string(),
    })
    .strict();

export const SetupUpdateWithoutKeyboardInputSchema: z.ZodType<Prisma.SetupUpdateWithoutKeyboardInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      cpu: z
        .lazy(() => CPUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      gpu: z
        .lazy(() => GPUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      hdd: z
        .lazy(() => HDDUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      case: z
        .lazy(() => CaseUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      ram: z
        .lazy(() => RAMUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      psu: z
        .lazy(() => PSUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      monitors: z
        .lazy(() => MonitorsOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      sound_card: z
        .lazy(() => SoundCardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      cpu_cooler: z
        .lazy(() => CPUCoolerUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      motherboard: z
        .lazy(() => MotherboardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      headphones: z
        .lazy(() => HeadphonesUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      mouse: z
        .lazy(() => MouseUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      speakers: z
        .lazy(() => SpeakersOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      webcam: z
        .lazy(() => WebcamUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      case_fans: z
        .lazy(() => CaseFanOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      user: z
        .lazy(() => UserUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateWithoutKeyboardInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateWithoutKeyboardInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      gpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      hdd_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      case_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      psu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      ram_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      sound_card_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_cooler_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      motherboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      headphones_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      mouse_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      webcam_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      user_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      monitors: z
        .lazy(
          () => MonitorsOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      speakers: z
        .lazy(
          () => SpeakersOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
      case_fans: z
        .lazy(
          () => CaseFanOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateManyWithoutKeyboardInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateManyWithoutKeyboardInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      gpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      hdd_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      case_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      psu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      ram_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      sound_card_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_cooler_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      motherboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      headphones_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      mouse_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      webcam_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      user_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const SetupCreateManyMouseInputSchema: z.ZodType<Prisma.SetupCreateManyMouseInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      cpu_id: z.string(),
      gpu_id: z.string(),
      hdd_id: z.string(),
      case_id: z.string(),
      psu_id: z.string(),
      ram_id: z.string(),
      name: z.string().optional().nullable(),
      sound_card_id: z.string(),
      cpu_cooler_id: z.string(),
      motherboard_id: z.string(),
      headphones_id: z.string(),
      keyboard_id: z.string(),
      webcam_id: z.string(),
      user_id: z.string(),
    })
    .strict();

export const SetupUpdateWithoutMouseInputSchema: z.ZodType<Prisma.SetupUpdateWithoutMouseInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      cpu: z
        .lazy(() => CPUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      gpu: z
        .lazy(() => GPUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      hdd: z
        .lazy(() => HDDUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      case: z
        .lazy(() => CaseUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      ram: z
        .lazy(() => RAMUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      psu: z
        .lazy(() => PSUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      monitors: z
        .lazy(() => MonitorsOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      sound_card: z
        .lazy(() => SoundCardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      cpu_cooler: z
        .lazy(() => CPUCoolerUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      motherboard: z
        .lazy(() => MotherboardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      headphones: z
        .lazy(() => HeadphonesUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      keyboard: z
        .lazy(() => KeyboardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      speakers: z
        .lazy(() => SpeakersOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      webcam: z
        .lazy(() => WebcamUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      case_fans: z
        .lazy(() => CaseFanOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      user: z
        .lazy(() => UserUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateWithoutMouseInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateWithoutMouseInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      gpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      hdd_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      case_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      psu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      ram_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      sound_card_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_cooler_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      motherboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      headphones_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      keyboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      webcam_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      user_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      monitors: z
        .lazy(
          () => MonitorsOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      speakers: z
        .lazy(
          () => SpeakersOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
      case_fans: z
        .lazy(
          () => CaseFanOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateManyWithoutMouseInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateManyWithoutMouseInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      gpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      hdd_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      case_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      psu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      ram_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      sound_card_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_cooler_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      motherboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      headphones_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      keyboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      webcam_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      user_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const SpeakersOfSetupCreateManySpeakersInputSchema: z.ZodType<Prisma.SpeakersOfSetupCreateManySpeakersInput> =
  z
    .object({
      setup_id: z.string(),
      quantity: z.number().int(),
    })
    .strict();

export const SpeakersOfSetupUpdateWithoutSpeakersInputSchema: z.ZodType<Prisma.SpeakersOfSetupUpdateWithoutSpeakersInput> =
  z
    .object({
      quantity: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      setup: z
        .lazy(() => SetupUpdateOneRequiredWithoutSpeakersNestedInputSchema)
        .optional(),
    })
    .strict();

export const SpeakersOfSetupUncheckedUpdateWithoutSpeakersInputSchema: z.ZodType<Prisma.SpeakersOfSetupUncheckedUpdateWithoutSpeakersInput> =
  z
    .object({
      setup_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      quantity: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const SpeakersOfSetupUncheckedUpdateManyWithoutSpeakersInputSchema: z.ZodType<Prisma.SpeakersOfSetupUncheckedUpdateManyWithoutSpeakersInput> =
  z
    .object({
      setup_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      quantity: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const SetupCreateManyWebcamInputSchema: z.ZodType<Prisma.SetupCreateManyWebcamInput> =
  z
    .object({
      id: z.string().cuid().optional(),
      cpu_id: z.string(),
      gpu_id: z.string(),
      hdd_id: z.string(),
      case_id: z.string(),
      psu_id: z.string(),
      ram_id: z.string(),
      name: z.string().optional().nullable(),
      sound_card_id: z.string(),
      cpu_cooler_id: z.string(),
      motherboard_id: z.string(),
      headphones_id: z.string(),
      keyboard_id: z.string(),
      mouse_id: z.string(),
      user_id: z.string(),
    })
    .strict();

export const SetupUpdateWithoutWebcamInputSchema: z.ZodType<Prisma.SetupUpdateWithoutWebcamInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      cpu: z
        .lazy(() => CPUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      gpu: z
        .lazy(() => GPUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      hdd: z
        .lazy(() => HDDUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      case: z
        .lazy(() => CaseUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      ram: z
        .lazy(() => RAMUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      psu: z
        .lazy(() => PSUUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      monitors: z
        .lazy(() => MonitorsOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      sound_card: z
        .lazy(() => SoundCardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      cpu_cooler: z
        .lazy(() => CPUCoolerUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      motherboard: z
        .lazy(() => MotherboardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      headphones: z
        .lazy(() => HeadphonesUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      keyboard: z
        .lazy(() => KeyboardUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      mouse: z
        .lazy(() => MouseUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
      speakers: z
        .lazy(() => SpeakersOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      case_fans: z
        .lazy(() => CaseFanOfSetupUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      user: z
        .lazy(() => UserUpdateOneRequiredWithoutSetupsNestedInputSchema)
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateWithoutWebcamInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateWithoutWebcamInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      gpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      hdd_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      case_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      psu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      ram_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      sound_card_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_cooler_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      motherboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      headphones_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      keyboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      mouse_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      user_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      monitors: z
        .lazy(
          () => MonitorsOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
      sdds: z
        .lazy(() => SSDOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema)
        .optional(),
      speakers: z
        .lazy(
          () => SpeakersOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
      case_fans: z
        .lazy(
          () => CaseFanOfSetupUncheckedUpdateManyWithoutSetupNestedInputSchema,
        )
        .optional(),
    })
    .strict();

export const SetupUncheckedUpdateManyWithoutWebcamInputSchema: z.ZodType<Prisma.SetupUncheckedUpdateManyWithoutWebcamInput> =
  z
    .object({
      id: z
        .union([
          z.string().cuid(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      gpu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      hdd_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      case_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      psu_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      ram_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      name: z
        .union([
          z.string(),
          z.lazy(() => NullableStringFieldUpdateOperationsInputSchema),
        ])
        .optional()
        .nullable(),
      sound_card_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      cpu_cooler_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      motherboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      headphones_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      keyboard_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      mouse_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      user_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const CaseFanOfSetupCreateManyCase_fanInputSchema: z.ZodType<Prisma.CaseFanOfSetupCreateManyCase_fanInput> =
  z
    .object({
      setup_id: z.string(),
      quantity: z.number().int(),
    })
    .strict();

export const CaseFanOfSetupUpdateWithoutCase_fanInputSchema: z.ZodType<Prisma.CaseFanOfSetupUpdateWithoutCase_fanInput> =
  z
    .object({
      quantity: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      setup: z
        .lazy(() => SetupUpdateOneRequiredWithoutCase_fansNestedInputSchema)
        .optional(),
    })
    .strict();

export const CaseFanOfSetupUncheckedUpdateWithoutCase_fanInputSchema: z.ZodType<Prisma.CaseFanOfSetupUncheckedUpdateWithoutCase_fanInput> =
  z
    .object({
      setup_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      quantity: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

export const CaseFanOfSetupUncheckedUpdateManyWithoutCase_fanInputSchema: z.ZodType<Prisma.CaseFanOfSetupUncheckedUpdateManyWithoutCase_fanInput> =
  z
    .object({
      setup_id: z
        .union([
          z.string(),
          z.lazy(() => StringFieldUpdateOperationsInputSchema),
        ])
        .optional(),
      quantity: z
        .union([
          z.number().int(),
          z.lazy(() => IntFieldUpdateOperationsInputSchema),
        ])
        .optional(),
    })
    .strict();

/////////////////////////////////////////
// ARGS
/////////////////////////////////////////

export const AccountFindFirstArgsSchema: z.ZodType<Prisma.AccountFindFirstArgs> =
  z
    .object({
      select: AccountSelectSchema.optional(),
      include: AccountIncludeSchema.optional(),
      where: AccountWhereInputSchema.optional(),
      orderBy: z
        .union([
          AccountOrderByWithRelationInputSchema.array(),
          AccountOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: AccountWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          AccountScalarFieldEnumSchema,
          AccountScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const AccountFindFirstOrThrowArgsSchema: z.ZodType<Prisma.AccountFindFirstOrThrowArgs> =
  z
    .object({
      select: AccountSelectSchema.optional(),
      include: AccountIncludeSchema.optional(),
      where: AccountWhereInputSchema.optional(),
      orderBy: z
        .union([
          AccountOrderByWithRelationInputSchema.array(),
          AccountOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: AccountWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          AccountScalarFieldEnumSchema,
          AccountScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const AccountFindManyArgsSchema: z.ZodType<Prisma.AccountFindManyArgs> =
  z
    .object({
      select: AccountSelectSchema.optional(),
      include: AccountIncludeSchema.optional(),
      where: AccountWhereInputSchema.optional(),
      orderBy: z
        .union([
          AccountOrderByWithRelationInputSchema.array(),
          AccountOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: AccountWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          AccountScalarFieldEnumSchema,
          AccountScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const AccountAggregateArgsSchema: z.ZodType<Prisma.AccountAggregateArgs> =
  z
    .object({
      where: AccountWhereInputSchema.optional(),
      orderBy: z
        .union([
          AccountOrderByWithRelationInputSchema.array(),
          AccountOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: AccountWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
    })
    .strict();

export const AccountGroupByArgsSchema: z.ZodType<Prisma.AccountGroupByArgs> = z
  .object({
    where: AccountWhereInputSchema.optional(),
    orderBy: z
      .union([
        AccountOrderByWithAggregationInputSchema.array(),
        AccountOrderByWithAggregationInputSchema,
      ])
      .optional(),
    by: AccountScalarFieldEnumSchema.array(),
    having: AccountScalarWhereWithAggregatesInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
  })
  .strict();

export const AccountFindUniqueArgsSchema: z.ZodType<Prisma.AccountFindUniqueArgs> =
  z
    .object({
      select: AccountSelectSchema.optional(),
      include: AccountIncludeSchema.optional(),
      where: AccountWhereUniqueInputSchema,
    })
    .strict();

export const AccountFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.AccountFindUniqueOrThrowArgs> =
  z
    .object({
      select: AccountSelectSchema.optional(),
      include: AccountIncludeSchema.optional(),
      where: AccountWhereUniqueInputSchema,
    })
    .strict();

export const SessionFindFirstArgsSchema: z.ZodType<Prisma.SessionFindFirstArgs> =
  z
    .object({
      select: SessionSelectSchema.optional(),
      include: SessionIncludeSchema.optional(),
      where: SessionWhereInputSchema.optional(),
      orderBy: z
        .union([
          SessionOrderByWithRelationInputSchema.array(),
          SessionOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: SessionWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          SessionScalarFieldEnumSchema,
          SessionScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const SessionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SessionFindFirstOrThrowArgs> =
  z
    .object({
      select: SessionSelectSchema.optional(),
      include: SessionIncludeSchema.optional(),
      where: SessionWhereInputSchema.optional(),
      orderBy: z
        .union([
          SessionOrderByWithRelationInputSchema.array(),
          SessionOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: SessionWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          SessionScalarFieldEnumSchema,
          SessionScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const SessionFindManyArgsSchema: z.ZodType<Prisma.SessionFindManyArgs> =
  z
    .object({
      select: SessionSelectSchema.optional(),
      include: SessionIncludeSchema.optional(),
      where: SessionWhereInputSchema.optional(),
      orderBy: z
        .union([
          SessionOrderByWithRelationInputSchema.array(),
          SessionOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: SessionWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          SessionScalarFieldEnumSchema,
          SessionScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const SessionAggregateArgsSchema: z.ZodType<Prisma.SessionAggregateArgs> =
  z
    .object({
      where: SessionWhereInputSchema.optional(),
      orderBy: z
        .union([
          SessionOrderByWithRelationInputSchema.array(),
          SessionOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: SessionWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
    })
    .strict();

export const SessionGroupByArgsSchema: z.ZodType<Prisma.SessionGroupByArgs> = z
  .object({
    where: SessionWhereInputSchema.optional(),
    orderBy: z
      .union([
        SessionOrderByWithAggregationInputSchema.array(),
        SessionOrderByWithAggregationInputSchema,
      ])
      .optional(),
    by: SessionScalarFieldEnumSchema.array(),
    having: SessionScalarWhereWithAggregatesInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
  })
  .strict();

export const SessionFindUniqueArgsSchema: z.ZodType<Prisma.SessionFindUniqueArgs> =
  z
    .object({
      select: SessionSelectSchema.optional(),
      include: SessionIncludeSchema.optional(),
      where: SessionWhereUniqueInputSchema,
    })
    .strict();

export const SessionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SessionFindUniqueOrThrowArgs> =
  z
    .object({
      select: SessionSelectSchema.optional(),
      include: SessionIncludeSchema.optional(),
      where: SessionWhereUniqueInputSchema,
    })
    .strict();

export const UserFindFirstArgsSchema: z.ZodType<Prisma.UserFindFirstArgs> = z
  .object({
    select: UserSelectSchema.optional(),
    include: UserIncludeSchema.optional(),
    where: UserWhereInputSchema.optional(),
    orderBy: z
      .union([
        UserOrderByWithRelationInputSchema.array(),
        UserOrderByWithRelationInputSchema,
      ])
      .optional(),
    cursor: UserWhereUniqueInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
    distinct: z
      .union([UserScalarFieldEnumSchema, UserScalarFieldEnumSchema.array()])
      .optional(),
  })
  .strict();

export const UserFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UserFindFirstOrThrowArgs> =
  z
    .object({
      select: UserSelectSchema.optional(),
      include: UserIncludeSchema.optional(),
      where: UserWhereInputSchema.optional(),
      orderBy: z
        .union([
          UserOrderByWithRelationInputSchema.array(),
          UserOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: UserWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([UserScalarFieldEnumSchema, UserScalarFieldEnumSchema.array()])
        .optional(),
    })
    .strict();

export const UserFindManyArgsSchema: z.ZodType<Prisma.UserFindManyArgs> = z
  .object({
    select: UserSelectSchema.optional(),
    include: UserIncludeSchema.optional(),
    where: UserWhereInputSchema.optional(),
    orderBy: z
      .union([
        UserOrderByWithRelationInputSchema.array(),
        UserOrderByWithRelationInputSchema,
      ])
      .optional(),
    cursor: UserWhereUniqueInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
    distinct: z
      .union([UserScalarFieldEnumSchema, UserScalarFieldEnumSchema.array()])
      .optional(),
  })
  .strict();

export const UserAggregateArgsSchema: z.ZodType<Prisma.UserAggregateArgs> = z
  .object({
    where: UserWhereInputSchema.optional(),
    orderBy: z
      .union([
        UserOrderByWithRelationInputSchema.array(),
        UserOrderByWithRelationInputSchema,
      ])
      .optional(),
    cursor: UserWhereUniqueInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
  })
  .strict();

export const UserGroupByArgsSchema: z.ZodType<Prisma.UserGroupByArgs> = z
  .object({
    where: UserWhereInputSchema.optional(),
    orderBy: z
      .union([
        UserOrderByWithAggregationInputSchema.array(),
        UserOrderByWithAggregationInputSchema,
      ])
      .optional(),
    by: UserScalarFieldEnumSchema.array(),
    having: UserScalarWhereWithAggregatesInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
  })
  .strict();

export const UserFindUniqueArgsSchema: z.ZodType<Prisma.UserFindUniqueArgs> = z
  .object({
    select: UserSelectSchema.optional(),
    include: UserIncludeSchema.optional(),
    where: UserWhereUniqueInputSchema,
  })
  .strict();

export const UserFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UserFindUniqueOrThrowArgs> =
  z
    .object({
      select: UserSelectSchema.optional(),
      include: UserIncludeSchema.optional(),
      where: UserWhereUniqueInputSchema,
    })
    .strict();

export const VerificationTokenFindFirstArgsSchema: z.ZodType<Prisma.VerificationTokenFindFirstArgs> =
  z
    .object({
      select: VerificationTokenSelectSchema.optional(),
      where: VerificationTokenWhereInputSchema.optional(),
      orderBy: z
        .union([
          VerificationTokenOrderByWithRelationInputSchema.array(),
          VerificationTokenOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: VerificationTokenWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          VerificationTokenScalarFieldEnumSchema,
          VerificationTokenScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const VerificationTokenFindFirstOrThrowArgsSchema: z.ZodType<Prisma.VerificationTokenFindFirstOrThrowArgs> =
  z
    .object({
      select: VerificationTokenSelectSchema.optional(),
      where: VerificationTokenWhereInputSchema.optional(),
      orderBy: z
        .union([
          VerificationTokenOrderByWithRelationInputSchema.array(),
          VerificationTokenOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: VerificationTokenWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          VerificationTokenScalarFieldEnumSchema,
          VerificationTokenScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const VerificationTokenFindManyArgsSchema: z.ZodType<Prisma.VerificationTokenFindManyArgs> =
  z
    .object({
      select: VerificationTokenSelectSchema.optional(),
      where: VerificationTokenWhereInputSchema.optional(),
      orderBy: z
        .union([
          VerificationTokenOrderByWithRelationInputSchema.array(),
          VerificationTokenOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: VerificationTokenWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          VerificationTokenScalarFieldEnumSchema,
          VerificationTokenScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const VerificationTokenAggregateArgsSchema: z.ZodType<Prisma.VerificationTokenAggregateArgs> =
  z
    .object({
      where: VerificationTokenWhereInputSchema.optional(),
      orderBy: z
        .union([
          VerificationTokenOrderByWithRelationInputSchema.array(),
          VerificationTokenOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: VerificationTokenWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
    })
    .strict();

export const VerificationTokenGroupByArgsSchema: z.ZodType<Prisma.VerificationTokenGroupByArgs> =
  z
    .object({
      where: VerificationTokenWhereInputSchema.optional(),
      orderBy: z
        .union([
          VerificationTokenOrderByWithAggregationInputSchema.array(),
          VerificationTokenOrderByWithAggregationInputSchema,
        ])
        .optional(),
      by: VerificationTokenScalarFieldEnumSchema.array(),
      having: VerificationTokenScalarWhereWithAggregatesInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
    })
    .strict();

export const VerificationTokenFindUniqueArgsSchema: z.ZodType<Prisma.VerificationTokenFindUniqueArgs> =
  z
    .object({
      select: VerificationTokenSelectSchema.optional(),
      where: VerificationTokenWhereUniqueInputSchema,
    })
    .strict();

export const VerificationTokenFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.VerificationTokenFindUniqueOrThrowArgs> =
  z
    .object({
      select: VerificationTokenSelectSchema.optional(),
      where: VerificationTokenWhereUniqueInputSchema,
    })
    .strict();

export const CPUCoolerFindFirstArgsSchema: z.ZodType<Prisma.CPUCoolerFindFirstArgs> =
  z
    .object({
      select: CPUCoolerSelectSchema.optional(),
      include: CPUCoolerIncludeSchema.optional(),
      where: CPUCoolerWhereInputSchema.optional(),
      orderBy: z
        .union([
          CPUCoolerOrderByWithRelationInputSchema.array(),
          CPUCoolerOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: CPUCoolerWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          CPUCoolerScalarFieldEnumSchema,
          CPUCoolerScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const CPUCoolerFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CPUCoolerFindFirstOrThrowArgs> =
  z
    .object({
      select: CPUCoolerSelectSchema.optional(),
      include: CPUCoolerIncludeSchema.optional(),
      where: CPUCoolerWhereInputSchema.optional(),
      orderBy: z
        .union([
          CPUCoolerOrderByWithRelationInputSchema.array(),
          CPUCoolerOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: CPUCoolerWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          CPUCoolerScalarFieldEnumSchema,
          CPUCoolerScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const CPUCoolerFindManyArgsSchema: z.ZodType<Prisma.CPUCoolerFindManyArgs> =
  z
    .object({
      select: CPUCoolerSelectSchema.optional(),
      include: CPUCoolerIncludeSchema.optional(),
      where: CPUCoolerWhereInputSchema.optional(),
      orderBy: z
        .union([
          CPUCoolerOrderByWithRelationInputSchema.array(),
          CPUCoolerOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: CPUCoolerWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          CPUCoolerScalarFieldEnumSchema,
          CPUCoolerScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const CPUCoolerAggregateArgsSchema: z.ZodType<Prisma.CPUCoolerAggregateArgs> =
  z
    .object({
      where: CPUCoolerWhereInputSchema.optional(),
      orderBy: z
        .union([
          CPUCoolerOrderByWithRelationInputSchema.array(),
          CPUCoolerOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: CPUCoolerWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
    })
    .strict();

export const CPUCoolerGroupByArgsSchema: z.ZodType<Prisma.CPUCoolerGroupByArgs> =
  z
    .object({
      where: CPUCoolerWhereInputSchema.optional(),
      orderBy: z
        .union([
          CPUCoolerOrderByWithAggregationInputSchema.array(),
          CPUCoolerOrderByWithAggregationInputSchema,
        ])
        .optional(),
      by: CPUCoolerScalarFieldEnumSchema.array(),
      having: CPUCoolerScalarWhereWithAggregatesInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
    })
    .strict();

export const CPUCoolerFindUniqueArgsSchema: z.ZodType<Prisma.CPUCoolerFindUniqueArgs> =
  z
    .object({
      select: CPUCoolerSelectSchema.optional(),
      include: CPUCoolerIncludeSchema.optional(),
      where: CPUCoolerWhereUniqueInputSchema,
    })
    .strict();

export const CPUCoolerFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CPUCoolerFindUniqueOrThrowArgs> =
  z
    .object({
      select: CPUCoolerSelectSchema.optional(),
      include: CPUCoolerIncludeSchema.optional(),
      where: CPUCoolerWhereUniqueInputSchema,
    })
    .strict();

export const MotherboardFindFirstArgsSchema: z.ZodType<Prisma.MotherboardFindFirstArgs> =
  z
    .object({
      select: MotherboardSelectSchema.optional(),
      include: MotherboardIncludeSchema.optional(),
      where: MotherboardWhereInputSchema.optional(),
      orderBy: z
        .union([
          MotherboardOrderByWithRelationInputSchema.array(),
          MotherboardOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: MotherboardWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          MotherboardScalarFieldEnumSchema,
          MotherboardScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const MotherboardFindFirstOrThrowArgsSchema: z.ZodType<Prisma.MotherboardFindFirstOrThrowArgs> =
  z
    .object({
      select: MotherboardSelectSchema.optional(),
      include: MotherboardIncludeSchema.optional(),
      where: MotherboardWhereInputSchema.optional(),
      orderBy: z
        .union([
          MotherboardOrderByWithRelationInputSchema.array(),
          MotherboardOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: MotherboardWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          MotherboardScalarFieldEnumSchema,
          MotherboardScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const MotherboardFindManyArgsSchema: z.ZodType<Prisma.MotherboardFindManyArgs> =
  z
    .object({
      select: MotherboardSelectSchema.optional(),
      include: MotherboardIncludeSchema.optional(),
      where: MotherboardWhereInputSchema.optional(),
      orderBy: z
        .union([
          MotherboardOrderByWithRelationInputSchema.array(),
          MotherboardOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: MotherboardWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          MotherboardScalarFieldEnumSchema,
          MotherboardScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const MotherboardAggregateArgsSchema: z.ZodType<Prisma.MotherboardAggregateArgs> =
  z
    .object({
      where: MotherboardWhereInputSchema.optional(),
      orderBy: z
        .union([
          MotherboardOrderByWithRelationInputSchema.array(),
          MotherboardOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: MotherboardWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
    })
    .strict();

export const MotherboardGroupByArgsSchema: z.ZodType<Prisma.MotherboardGroupByArgs> =
  z
    .object({
      where: MotherboardWhereInputSchema.optional(),
      orderBy: z
        .union([
          MotherboardOrderByWithAggregationInputSchema.array(),
          MotherboardOrderByWithAggregationInputSchema,
        ])
        .optional(),
      by: MotherboardScalarFieldEnumSchema.array(),
      having: MotherboardScalarWhereWithAggregatesInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
    })
    .strict();

export const MotherboardFindUniqueArgsSchema: z.ZodType<Prisma.MotherboardFindUniqueArgs> =
  z
    .object({
      select: MotherboardSelectSchema.optional(),
      include: MotherboardIncludeSchema.optional(),
      where: MotherboardWhereUniqueInputSchema,
    })
    .strict();

export const MotherboardFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.MotherboardFindUniqueOrThrowArgs> =
  z
    .object({
      select: MotherboardSelectSchema.optional(),
      include: MotherboardIncludeSchema.optional(),
      where: MotherboardWhereUniqueInputSchema,
    })
    .strict();

export const RAMFindFirstArgsSchema: z.ZodType<Prisma.RAMFindFirstArgs> = z
  .object({
    select: RAMSelectSchema.optional(),
    include: RAMIncludeSchema.optional(),
    where: RAMWhereInputSchema.optional(),
    orderBy: z
      .union([
        RAMOrderByWithRelationInputSchema.array(),
        RAMOrderByWithRelationInputSchema,
      ])
      .optional(),
    cursor: RAMWhereUniqueInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
    distinct: z
      .union([RAMScalarFieldEnumSchema, RAMScalarFieldEnumSchema.array()])
      .optional(),
  })
  .strict();

export const RAMFindFirstOrThrowArgsSchema: z.ZodType<Prisma.RAMFindFirstOrThrowArgs> =
  z
    .object({
      select: RAMSelectSchema.optional(),
      include: RAMIncludeSchema.optional(),
      where: RAMWhereInputSchema.optional(),
      orderBy: z
        .union([
          RAMOrderByWithRelationInputSchema.array(),
          RAMOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: RAMWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([RAMScalarFieldEnumSchema, RAMScalarFieldEnumSchema.array()])
        .optional(),
    })
    .strict();

export const RAMFindManyArgsSchema: z.ZodType<Prisma.RAMFindManyArgs> = z
  .object({
    select: RAMSelectSchema.optional(),
    include: RAMIncludeSchema.optional(),
    where: RAMWhereInputSchema.optional(),
    orderBy: z
      .union([
        RAMOrderByWithRelationInputSchema.array(),
        RAMOrderByWithRelationInputSchema,
      ])
      .optional(),
    cursor: RAMWhereUniqueInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
    distinct: z
      .union([RAMScalarFieldEnumSchema, RAMScalarFieldEnumSchema.array()])
      .optional(),
  })
  .strict();

export const RAMAggregateArgsSchema: z.ZodType<Prisma.RAMAggregateArgs> = z
  .object({
    where: RAMWhereInputSchema.optional(),
    orderBy: z
      .union([
        RAMOrderByWithRelationInputSchema.array(),
        RAMOrderByWithRelationInputSchema,
      ])
      .optional(),
    cursor: RAMWhereUniqueInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
  })
  .strict();

export const RAMGroupByArgsSchema: z.ZodType<Prisma.RAMGroupByArgs> = z
  .object({
    where: RAMWhereInputSchema.optional(),
    orderBy: z
      .union([
        RAMOrderByWithAggregationInputSchema.array(),
        RAMOrderByWithAggregationInputSchema,
      ])
      .optional(),
    by: RAMScalarFieldEnumSchema.array(),
    having: RAMScalarWhereWithAggregatesInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
  })
  .strict();

export const RAMFindUniqueArgsSchema: z.ZodType<Prisma.RAMFindUniqueArgs> = z
  .object({
    select: RAMSelectSchema.optional(),
    include: RAMIncludeSchema.optional(),
    where: RAMWhereUniqueInputSchema,
  })
  .strict();

export const RAMFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.RAMFindUniqueOrThrowArgs> =
  z
    .object({
      select: RAMSelectSchema.optional(),
      include: RAMIncludeSchema.optional(),
      where: RAMWhereUniqueInputSchema,
    })
    .strict();

export const CPUFindFirstArgsSchema: z.ZodType<Prisma.CPUFindFirstArgs> = z
  .object({
    select: CPUSelectSchema.optional(),
    include: CPUIncludeSchema.optional(),
    where: CPUWhereInputSchema.optional(),
    orderBy: z
      .union([
        CPUOrderByWithRelationInputSchema.array(),
        CPUOrderByWithRelationInputSchema,
      ])
      .optional(),
    cursor: CPUWhereUniqueInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
    distinct: z
      .union([CPUScalarFieldEnumSchema, CPUScalarFieldEnumSchema.array()])
      .optional(),
  })
  .strict();

export const CPUFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CPUFindFirstOrThrowArgs> =
  z
    .object({
      select: CPUSelectSchema.optional(),
      include: CPUIncludeSchema.optional(),
      where: CPUWhereInputSchema.optional(),
      orderBy: z
        .union([
          CPUOrderByWithRelationInputSchema.array(),
          CPUOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: CPUWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([CPUScalarFieldEnumSchema, CPUScalarFieldEnumSchema.array()])
        .optional(),
    })
    .strict();

export const CPUFindManyArgsSchema: z.ZodType<Prisma.CPUFindManyArgs> = z
  .object({
    select: CPUSelectSchema.optional(),
    include: CPUIncludeSchema.optional(),
    where: CPUWhereInputSchema.optional(),
    orderBy: z
      .union([
        CPUOrderByWithRelationInputSchema.array(),
        CPUOrderByWithRelationInputSchema,
      ])
      .optional(),
    cursor: CPUWhereUniqueInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
    distinct: z
      .union([CPUScalarFieldEnumSchema, CPUScalarFieldEnumSchema.array()])
      .optional(),
  })
  .strict();

export const CPUAggregateArgsSchema: z.ZodType<Prisma.CPUAggregateArgs> = z
  .object({
    where: CPUWhereInputSchema.optional(),
    orderBy: z
      .union([
        CPUOrderByWithRelationInputSchema.array(),
        CPUOrderByWithRelationInputSchema,
      ])
      .optional(),
    cursor: CPUWhereUniqueInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
  })
  .strict();

export const CPUGroupByArgsSchema: z.ZodType<Prisma.CPUGroupByArgs> = z
  .object({
    where: CPUWhereInputSchema.optional(),
    orderBy: z
      .union([
        CPUOrderByWithAggregationInputSchema.array(),
        CPUOrderByWithAggregationInputSchema,
      ])
      .optional(),
    by: CPUScalarFieldEnumSchema.array(),
    having: CPUScalarWhereWithAggregatesInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
  })
  .strict();

export const CPUFindUniqueArgsSchema: z.ZodType<Prisma.CPUFindUniqueArgs> = z
  .object({
    select: CPUSelectSchema.optional(),
    include: CPUIncludeSchema.optional(),
    where: CPUWhereUniqueInputSchema,
  })
  .strict();

export const CPUFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CPUFindUniqueOrThrowArgs> =
  z
    .object({
      select: CPUSelectSchema.optional(),
      include: CPUIncludeSchema.optional(),
      where: CPUWhereUniqueInputSchema,
    })
    .strict();

export const HDDFindFirstArgsSchema: z.ZodType<Prisma.HDDFindFirstArgs> = z
  .object({
    select: HDDSelectSchema.optional(),
    include: HDDIncludeSchema.optional(),
    where: HDDWhereInputSchema.optional(),
    orderBy: z
      .union([
        HDDOrderByWithRelationInputSchema.array(),
        HDDOrderByWithRelationInputSchema,
      ])
      .optional(),
    cursor: HDDWhereUniqueInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
    distinct: z
      .union([HDDScalarFieldEnumSchema, HDDScalarFieldEnumSchema.array()])
      .optional(),
  })
  .strict();

export const HDDFindFirstOrThrowArgsSchema: z.ZodType<Prisma.HDDFindFirstOrThrowArgs> =
  z
    .object({
      select: HDDSelectSchema.optional(),
      include: HDDIncludeSchema.optional(),
      where: HDDWhereInputSchema.optional(),
      orderBy: z
        .union([
          HDDOrderByWithRelationInputSchema.array(),
          HDDOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: HDDWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([HDDScalarFieldEnumSchema, HDDScalarFieldEnumSchema.array()])
        .optional(),
    })
    .strict();

export const HDDFindManyArgsSchema: z.ZodType<Prisma.HDDFindManyArgs> = z
  .object({
    select: HDDSelectSchema.optional(),
    include: HDDIncludeSchema.optional(),
    where: HDDWhereInputSchema.optional(),
    orderBy: z
      .union([
        HDDOrderByWithRelationInputSchema.array(),
        HDDOrderByWithRelationInputSchema,
      ])
      .optional(),
    cursor: HDDWhereUniqueInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
    distinct: z
      .union([HDDScalarFieldEnumSchema, HDDScalarFieldEnumSchema.array()])
      .optional(),
  })
  .strict();

export const HDDAggregateArgsSchema: z.ZodType<Prisma.HDDAggregateArgs> = z
  .object({
    where: HDDWhereInputSchema.optional(),
    orderBy: z
      .union([
        HDDOrderByWithRelationInputSchema.array(),
        HDDOrderByWithRelationInputSchema,
      ])
      .optional(),
    cursor: HDDWhereUniqueInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
  })
  .strict();

export const HDDGroupByArgsSchema: z.ZodType<Prisma.HDDGroupByArgs> = z
  .object({
    where: HDDWhereInputSchema.optional(),
    orderBy: z
      .union([
        HDDOrderByWithAggregationInputSchema.array(),
        HDDOrderByWithAggregationInputSchema,
      ])
      .optional(),
    by: HDDScalarFieldEnumSchema.array(),
    having: HDDScalarWhereWithAggregatesInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
  })
  .strict();

export const HDDFindUniqueArgsSchema: z.ZodType<Prisma.HDDFindUniqueArgs> = z
  .object({
    select: HDDSelectSchema.optional(),
    include: HDDIncludeSchema.optional(),
    where: HDDWhereUniqueInputSchema,
  })
  .strict();

export const HDDFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.HDDFindUniqueOrThrowArgs> =
  z
    .object({
      select: HDDSelectSchema.optional(),
      include: HDDIncludeSchema.optional(),
      where: HDDWhereUniqueInputSchema,
    })
    .strict();

export const SSDFindFirstArgsSchema: z.ZodType<Prisma.SSDFindFirstArgs> = z
  .object({
    select: SSDSelectSchema.optional(),
    include: SSDIncludeSchema.optional(),
    where: SSDWhereInputSchema.optional(),
    orderBy: z
      .union([
        SSDOrderByWithRelationInputSchema.array(),
        SSDOrderByWithRelationInputSchema,
      ])
      .optional(),
    cursor: SSDWhereUniqueInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
    distinct: z
      .union([SSDScalarFieldEnumSchema, SSDScalarFieldEnumSchema.array()])
      .optional(),
  })
  .strict();

export const SSDFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SSDFindFirstOrThrowArgs> =
  z
    .object({
      select: SSDSelectSchema.optional(),
      include: SSDIncludeSchema.optional(),
      where: SSDWhereInputSchema.optional(),
      orderBy: z
        .union([
          SSDOrderByWithRelationInputSchema.array(),
          SSDOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: SSDWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([SSDScalarFieldEnumSchema, SSDScalarFieldEnumSchema.array()])
        .optional(),
    })
    .strict();

export const SSDFindManyArgsSchema: z.ZodType<Prisma.SSDFindManyArgs> = z
  .object({
    select: SSDSelectSchema.optional(),
    include: SSDIncludeSchema.optional(),
    where: SSDWhereInputSchema.optional(),
    orderBy: z
      .union([
        SSDOrderByWithRelationInputSchema.array(),
        SSDOrderByWithRelationInputSchema,
      ])
      .optional(),
    cursor: SSDWhereUniqueInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
    distinct: z
      .union([SSDScalarFieldEnumSchema, SSDScalarFieldEnumSchema.array()])
      .optional(),
  })
  .strict();

export const SSDAggregateArgsSchema: z.ZodType<Prisma.SSDAggregateArgs> = z
  .object({
    where: SSDWhereInputSchema.optional(),
    orderBy: z
      .union([
        SSDOrderByWithRelationInputSchema.array(),
        SSDOrderByWithRelationInputSchema,
      ])
      .optional(),
    cursor: SSDWhereUniqueInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
  })
  .strict();

export const SSDGroupByArgsSchema: z.ZodType<Prisma.SSDGroupByArgs> = z
  .object({
    where: SSDWhereInputSchema.optional(),
    orderBy: z
      .union([
        SSDOrderByWithAggregationInputSchema.array(),
        SSDOrderByWithAggregationInputSchema,
      ])
      .optional(),
    by: SSDScalarFieldEnumSchema.array(),
    having: SSDScalarWhereWithAggregatesInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
  })
  .strict();

export const SSDFindUniqueArgsSchema: z.ZodType<Prisma.SSDFindUniqueArgs> = z
  .object({
    select: SSDSelectSchema.optional(),
    include: SSDIncludeSchema.optional(),
    where: SSDWhereUniqueInputSchema,
  })
  .strict();

export const SSDFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SSDFindUniqueOrThrowArgs> =
  z
    .object({
      select: SSDSelectSchema.optional(),
      include: SSDIncludeSchema.optional(),
      where: SSDWhereUniqueInputSchema,
    })
    .strict();

export const GPUFindFirstArgsSchema: z.ZodType<Prisma.GPUFindFirstArgs> = z
  .object({
    select: GPUSelectSchema.optional(),
    include: GPUIncludeSchema.optional(),
    where: GPUWhereInputSchema.optional(),
    orderBy: z
      .union([
        GPUOrderByWithRelationInputSchema.array(),
        GPUOrderByWithRelationInputSchema,
      ])
      .optional(),
    cursor: GPUWhereUniqueInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
    distinct: z
      .union([GPUScalarFieldEnumSchema, GPUScalarFieldEnumSchema.array()])
      .optional(),
  })
  .strict();

export const GPUFindFirstOrThrowArgsSchema: z.ZodType<Prisma.GPUFindFirstOrThrowArgs> =
  z
    .object({
      select: GPUSelectSchema.optional(),
      include: GPUIncludeSchema.optional(),
      where: GPUWhereInputSchema.optional(),
      orderBy: z
        .union([
          GPUOrderByWithRelationInputSchema.array(),
          GPUOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: GPUWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([GPUScalarFieldEnumSchema, GPUScalarFieldEnumSchema.array()])
        .optional(),
    })
    .strict();

export const GPUFindManyArgsSchema: z.ZodType<Prisma.GPUFindManyArgs> = z
  .object({
    select: GPUSelectSchema.optional(),
    include: GPUIncludeSchema.optional(),
    where: GPUWhereInputSchema.optional(),
    orderBy: z
      .union([
        GPUOrderByWithRelationInputSchema.array(),
        GPUOrderByWithRelationInputSchema,
      ])
      .optional(),
    cursor: GPUWhereUniqueInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
    distinct: z
      .union([GPUScalarFieldEnumSchema, GPUScalarFieldEnumSchema.array()])
      .optional(),
  })
  .strict();

export const GPUAggregateArgsSchema: z.ZodType<Prisma.GPUAggregateArgs> = z
  .object({
    where: GPUWhereInputSchema.optional(),
    orderBy: z
      .union([
        GPUOrderByWithRelationInputSchema.array(),
        GPUOrderByWithRelationInputSchema,
      ])
      .optional(),
    cursor: GPUWhereUniqueInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
  })
  .strict();

export const GPUGroupByArgsSchema: z.ZodType<Prisma.GPUGroupByArgs> = z
  .object({
    where: GPUWhereInputSchema.optional(),
    orderBy: z
      .union([
        GPUOrderByWithAggregationInputSchema.array(),
        GPUOrderByWithAggregationInputSchema,
      ])
      .optional(),
    by: GPUScalarFieldEnumSchema.array(),
    having: GPUScalarWhereWithAggregatesInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
  })
  .strict();

export const GPUFindUniqueArgsSchema: z.ZodType<Prisma.GPUFindUniqueArgs> = z
  .object({
    select: GPUSelectSchema.optional(),
    include: GPUIncludeSchema.optional(),
    where: GPUWhereUniqueInputSchema,
  })
  .strict();

export const GPUFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.GPUFindUniqueOrThrowArgs> =
  z
    .object({
      select: GPUSelectSchema.optional(),
      include: GPUIncludeSchema.optional(),
      where: GPUWhereUniqueInputSchema,
    })
    .strict();

export const CaseFindFirstArgsSchema: z.ZodType<Prisma.CaseFindFirstArgs> = z
  .object({
    select: CaseSelectSchema.optional(),
    include: CaseIncludeSchema.optional(),
    where: CaseWhereInputSchema.optional(),
    orderBy: z
      .union([
        CaseOrderByWithRelationInputSchema.array(),
        CaseOrderByWithRelationInputSchema,
      ])
      .optional(),
    cursor: CaseWhereUniqueInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
    distinct: z
      .union([CaseScalarFieldEnumSchema, CaseScalarFieldEnumSchema.array()])
      .optional(),
  })
  .strict();

export const CaseFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CaseFindFirstOrThrowArgs> =
  z
    .object({
      select: CaseSelectSchema.optional(),
      include: CaseIncludeSchema.optional(),
      where: CaseWhereInputSchema.optional(),
      orderBy: z
        .union([
          CaseOrderByWithRelationInputSchema.array(),
          CaseOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: CaseWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([CaseScalarFieldEnumSchema, CaseScalarFieldEnumSchema.array()])
        .optional(),
    })
    .strict();

export const CaseFindManyArgsSchema: z.ZodType<Prisma.CaseFindManyArgs> = z
  .object({
    select: CaseSelectSchema.optional(),
    include: CaseIncludeSchema.optional(),
    where: CaseWhereInputSchema.optional(),
    orderBy: z
      .union([
        CaseOrderByWithRelationInputSchema.array(),
        CaseOrderByWithRelationInputSchema,
      ])
      .optional(),
    cursor: CaseWhereUniqueInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
    distinct: z
      .union([CaseScalarFieldEnumSchema, CaseScalarFieldEnumSchema.array()])
      .optional(),
  })
  .strict();

export const CaseAggregateArgsSchema: z.ZodType<Prisma.CaseAggregateArgs> = z
  .object({
    where: CaseWhereInputSchema.optional(),
    orderBy: z
      .union([
        CaseOrderByWithRelationInputSchema.array(),
        CaseOrderByWithRelationInputSchema,
      ])
      .optional(),
    cursor: CaseWhereUniqueInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
  })
  .strict();

export const CaseGroupByArgsSchema: z.ZodType<Prisma.CaseGroupByArgs> = z
  .object({
    where: CaseWhereInputSchema.optional(),
    orderBy: z
      .union([
        CaseOrderByWithAggregationInputSchema.array(),
        CaseOrderByWithAggregationInputSchema,
      ])
      .optional(),
    by: CaseScalarFieldEnumSchema.array(),
    having: CaseScalarWhereWithAggregatesInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
  })
  .strict();

export const CaseFindUniqueArgsSchema: z.ZodType<Prisma.CaseFindUniqueArgs> = z
  .object({
    select: CaseSelectSchema.optional(),
    include: CaseIncludeSchema.optional(),
    where: CaseWhereUniqueInputSchema,
  })
  .strict();

export const CaseFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CaseFindUniqueOrThrowArgs> =
  z
    .object({
      select: CaseSelectSchema.optional(),
      include: CaseIncludeSchema.optional(),
      where: CaseWhereUniqueInputSchema,
    })
    .strict();

export const PSUFindFirstArgsSchema: z.ZodType<Prisma.PSUFindFirstArgs> = z
  .object({
    select: PSUSelectSchema.optional(),
    include: PSUIncludeSchema.optional(),
    where: PSUWhereInputSchema.optional(),
    orderBy: z
      .union([
        PSUOrderByWithRelationInputSchema.array(),
        PSUOrderByWithRelationInputSchema,
      ])
      .optional(),
    cursor: PSUWhereUniqueInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
    distinct: z
      .union([PSUScalarFieldEnumSchema, PSUScalarFieldEnumSchema.array()])
      .optional(),
  })
  .strict();

export const PSUFindFirstOrThrowArgsSchema: z.ZodType<Prisma.PSUFindFirstOrThrowArgs> =
  z
    .object({
      select: PSUSelectSchema.optional(),
      include: PSUIncludeSchema.optional(),
      where: PSUWhereInputSchema.optional(),
      orderBy: z
        .union([
          PSUOrderByWithRelationInputSchema.array(),
          PSUOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: PSUWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([PSUScalarFieldEnumSchema, PSUScalarFieldEnumSchema.array()])
        .optional(),
    })
    .strict();

export const PSUFindManyArgsSchema: z.ZodType<Prisma.PSUFindManyArgs> = z
  .object({
    select: PSUSelectSchema.optional(),
    include: PSUIncludeSchema.optional(),
    where: PSUWhereInputSchema.optional(),
    orderBy: z
      .union([
        PSUOrderByWithRelationInputSchema.array(),
        PSUOrderByWithRelationInputSchema,
      ])
      .optional(),
    cursor: PSUWhereUniqueInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
    distinct: z
      .union([PSUScalarFieldEnumSchema, PSUScalarFieldEnumSchema.array()])
      .optional(),
  })
  .strict();

export const PSUAggregateArgsSchema: z.ZodType<Prisma.PSUAggregateArgs> = z
  .object({
    where: PSUWhereInputSchema.optional(),
    orderBy: z
      .union([
        PSUOrderByWithRelationInputSchema.array(),
        PSUOrderByWithRelationInputSchema,
      ])
      .optional(),
    cursor: PSUWhereUniqueInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
  })
  .strict();

export const PSUGroupByArgsSchema: z.ZodType<Prisma.PSUGroupByArgs> = z
  .object({
    where: PSUWhereInputSchema.optional(),
    orderBy: z
      .union([
        PSUOrderByWithAggregationInputSchema.array(),
        PSUOrderByWithAggregationInputSchema,
      ])
      .optional(),
    by: PSUScalarFieldEnumSchema.array(),
    having: PSUScalarWhereWithAggregatesInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
  })
  .strict();

export const PSUFindUniqueArgsSchema: z.ZodType<Prisma.PSUFindUniqueArgs> = z
  .object({
    select: PSUSelectSchema.optional(),
    include: PSUIncludeSchema.optional(),
    where: PSUWhereUniqueInputSchema,
  })
  .strict();

export const PSUFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.PSUFindUniqueOrThrowArgs> =
  z
    .object({
      select: PSUSelectSchema.optional(),
      include: PSUIncludeSchema.optional(),
      where: PSUWhereUniqueInputSchema,
    })
    .strict();

export const SetupFindFirstArgsSchema: z.ZodType<Prisma.SetupFindFirstArgs> = z
  .object({
    select: SetupSelectSchema.optional(),
    include: SetupIncludeSchema.optional(),
    where: SetupWhereInputSchema.optional(),
    orderBy: z
      .union([
        SetupOrderByWithRelationInputSchema.array(),
        SetupOrderByWithRelationInputSchema,
      ])
      .optional(),
    cursor: SetupWhereUniqueInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
    distinct: z
      .union([SetupScalarFieldEnumSchema, SetupScalarFieldEnumSchema.array()])
      .optional(),
  })
  .strict();

export const SetupFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SetupFindFirstOrThrowArgs> =
  z
    .object({
      select: SetupSelectSchema.optional(),
      include: SetupIncludeSchema.optional(),
      where: SetupWhereInputSchema.optional(),
      orderBy: z
        .union([
          SetupOrderByWithRelationInputSchema.array(),
          SetupOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: SetupWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([SetupScalarFieldEnumSchema, SetupScalarFieldEnumSchema.array()])
        .optional(),
    })
    .strict();

export const SetupFindManyArgsSchema: z.ZodType<Prisma.SetupFindManyArgs> = z
  .object({
    select: SetupSelectSchema.optional(),
    include: SetupIncludeSchema.optional(),
    where: SetupWhereInputSchema.optional(),
    orderBy: z
      .union([
        SetupOrderByWithRelationInputSchema.array(),
        SetupOrderByWithRelationInputSchema,
      ])
      .optional(),
    cursor: SetupWhereUniqueInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
    distinct: z
      .union([SetupScalarFieldEnumSchema, SetupScalarFieldEnumSchema.array()])
      .optional(),
  })
  .strict();

export const SetupAggregateArgsSchema: z.ZodType<Prisma.SetupAggregateArgs> = z
  .object({
    where: SetupWhereInputSchema.optional(),
    orderBy: z
      .union([
        SetupOrderByWithRelationInputSchema.array(),
        SetupOrderByWithRelationInputSchema,
      ])
      .optional(),
    cursor: SetupWhereUniqueInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
  })
  .strict();

export const SetupGroupByArgsSchema: z.ZodType<Prisma.SetupGroupByArgs> = z
  .object({
    where: SetupWhereInputSchema.optional(),
    orderBy: z
      .union([
        SetupOrderByWithAggregationInputSchema.array(),
        SetupOrderByWithAggregationInputSchema,
      ])
      .optional(),
    by: SetupScalarFieldEnumSchema.array(),
    having: SetupScalarWhereWithAggregatesInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
  })
  .strict();

export const SetupFindUniqueArgsSchema: z.ZodType<Prisma.SetupFindUniqueArgs> =
  z
    .object({
      select: SetupSelectSchema.optional(),
      include: SetupIncludeSchema.optional(),
      where: SetupWhereUniqueInputSchema,
    })
    .strict();

export const SetupFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SetupFindUniqueOrThrowArgs> =
  z
    .object({
      select: SetupSelectSchema.optional(),
      include: SetupIncludeSchema.optional(),
      where: SetupWhereUniqueInputSchema,
    })
    .strict();

export const SSDOfSetupFindFirstArgsSchema: z.ZodType<Prisma.SSDOfSetupFindFirstArgs> =
  z
    .object({
      select: SSDOfSetupSelectSchema.optional(),
      include: SSDOfSetupIncludeSchema.optional(),
      where: SSDOfSetupWhereInputSchema.optional(),
      orderBy: z
        .union([
          SSDOfSetupOrderByWithRelationInputSchema.array(),
          SSDOfSetupOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: SSDOfSetupWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          SSDOfSetupScalarFieldEnumSchema,
          SSDOfSetupScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const SSDOfSetupFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SSDOfSetupFindFirstOrThrowArgs> =
  z
    .object({
      select: SSDOfSetupSelectSchema.optional(),
      include: SSDOfSetupIncludeSchema.optional(),
      where: SSDOfSetupWhereInputSchema.optional(),
      orderBy: z
        .union([
          SSDOfSetupOrderByWithRelationInputSchema.array(),
          SSDOfSetupOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: SSDOfSetupWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          SSDOfSetupScalarFieldEnumSchema,
          SSDOfSetupScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const SSDOfSetupFindManyArgsSchema: z.ZodType<Prisma.SSDOfSetupFindManyArgs> =
  z
    .object({
      select: SSDOfSetupSelectSchema.optional(),
      include: SSDOfSetupIncludeSchema.optional(),
      where: SSDOfSetupWhereInputSchema.optional(),
      orderBy: z
        .union([
          SSDOfSetupOrderByWithRelationInputSchema.array(),
          SSDOfSetupOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: SSDOfSetupWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          SSDOfSetupScalarFieldEnumSchema,
          SSDOfSetupScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const SSDOfSetupAggregateArgsSchema: z.ZodType<Prisma.SSDOfSetupAggregateArgs> =
  z
    .object({
      where: SSDOfSetupWhereInputSchema.optional(),
      orderBy: z
        .union([
          SSDOfSetupOrderByWithRelationInputSchema.array(),
          SSDOfSetupOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: SSDOfSetupWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
    })
    .strict();

export const SSDOfSetupGroupByArgsSchema: z.ZodType<Prisma.SSDOfSetupGroupByArgs> =
  z
    .object({
      where: SSDOfSetupWhereInputSchema.optional(),
      orderBy: z
        .union([
          SSDOfSetupOrderByWithAggregationInputSchema.array(),
          SSDOfSetupOrderByWithAggregationInputSchema,
        ])
        .optional(),
      by: SSDOfSetupScalarFieldEnumSchema.array(),
      having: SSDOfSetupScalarWhereWithAggregatesInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
    })
    .strict();

export const SSDOfSetupFindUniqueArgsSchema: z.ZodType<Prisma.SSDOfSetupFindUniqueArgs> =
  z
    .object({
      select: SSDOfSetupSelectSchema.optional(),
      include: SSDOfSetupIncludeSchema.optional(),
      where: SSDOfSetupWhereUniqueInputSchema,
    })
    .strict();

export const SSDOfSetupFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SSDOfSetupFindUniqueOrThrowArgs> =
  z
    .object({
      select: SSDOfSetupSelectSchema.optional(),
      include: SSDOfSetupIncludeSchema.optional(),
      where: SSDOfSetupWhereUniqueInputSchema,
    })
    .strict();

export const CaseFanOfSetupFindFirstArgsSchema: z.ZodType<Prisma.CaseFanOfSetupFindFirstArgs> =
  z
    .object({
      select: CaseFanOfSetupSelectSchema.optional(),
      include: CaseFanOfSetupIncludeSchema.optional(),
      where: CaseFanOfSetupWhereInputSchema.optional(),
      orderBy: z
        .union([
          CaseFanOfSetupOrderByWithRelationInputSchema.array(),
          CaseFanOfSetupOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: CaseFanOfSetupWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          CaseFanOfSetupScalarFieldEnumSchema,
          CaseFanOfSetupScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const CaseFanOfSetupFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CaseFanOfSetupFindFirstOrThrowArgs> =
  z
    .object({
      select: CaseFanOfSetupSelectSchema.optional(),
      include: CaseFanOfSetupIncludeSchema.optional(),
      where: CaseFanOfSetupWhereInputSchema.optional(),
      orderBy: z
        .union([
          CaseFanOfSetupOrderByWithRelationInputSchema.array(),
          CaseFanOfSetupOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: CaseFanOfSetupWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          CaseFanOfSetupScalarFieldEnumSchema,
          CaseFanOfSetupScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const CaseFanOfSetupFindManyArgsSchema: z.ZodType<Prisma.CaseFanOfSetupFindManyArgs> =
  z
    .object({
      select: CaseFanOfSetupSelectSchema.optional(),
      include: CaseFanOfSetupIncludeSchema.optional(),
      where: CaseFanOfSetupWhereInputSchema.optional(),
      orderBy: z
        .union([
          CaseFanOfSetupOrderByWithRelationInputSchema.array(),
          CaseFanOfSetupOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: CaseFanOfSetupWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          CaseFanOfSetupScalarFieldEnumSchema,
          CaseFanOfSetupScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const CaseFanOfSetupAggregateArgsSchema: z.ZodType<Prisma.CaseFanOfSetupAggregateArgs> =
  z
    .object({
      where: CaseFanOfSetupWhereInputSchema.optional(),
      orderBy: z
        .union([
          CaseFanOfSetupOrderByWithRelationInputSchema.array(),
          CaseFanOfSetupOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: CaseFanOfSetupWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
    })
    .strict();

export const CaseFanOfSetupGroupByArgsSchema: z.ZodType<Prisma.CaseFanOfSetupGroupByArgs> =
  z
    .object({
      where: CaseFanOfSetupWhereInputSchema.optional(),
      orderBy: z
        .union([
          CaseFanOfSetupOrderByWithAggregationInputSchema.array(),
          CaseFanOfSetupOrderByWithAggregationInputSchema,
        ])
        .optional(),
      by: CaseFanOfSetupScalarFieldEnumSchema.array(),
      having: CaseFanOfSetupScalarWhereWithAggregatesInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
    })
    .strict();

export const CaseFanOfSetupFindUniqueArgsSchema: z.ZodType<Prisma.CaseFanOfSetupFindUniqueArgs> =
  z
    .object({
      select: CaseFanOfSetupSelectSchema.optional(),
      include: CaseFanOfSetupIncludeSchema.optional(),
      where: CaseFanOfSetupWhereUniqueInputSchema,
    })
    .strict();

export const CaseFanOfSetupFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CaseFanOfSetupFindUniqueOrThrowArgs> =
  z
    .object({
      select: CaseFanOfSetupSelectSchema.optional(),
      include: CaseFanOfSetupIncludeSchema.optional(),
      where: CaseFanOfSetupWhereUniqueInputSchema,
    })
    .strict();

export const SpeakersOfSetupFindFirstArgsSchema: z.ZodType<Prisma.SpeakersOfSetupFindFirstArgs> =
  z
    .object({
      select: SpeakersOfSetupSelectSchema.optional(),
      include: SpeakersOfSetupIncludeSchema.optional(),
      where: SpeakersOfSetupWhereInputSchema.optional(),
      orderBy: z
        .union([
          SpeakersOfSetupOrderByWithRelationInputSchema.array(),
          SpeakersOfSetupOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: SpeakersOfSetupWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          SpeakersOfSetupScalarFieldEnumSchema,
          SpeakersOfSetupScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const SpeakersOfSetupFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SpeakersOfSetupFindFirstOrThrowArgs> =
  z
    .object({
      select: SpeakersOfSetupSelectSchema.optional(),
      include: SpeakersOfSetupIncludeSchema.optional(),
      where: SpeakersOfSetupWhereInputSchema.optional(),
      orderBy: z
        .union([
          SpeakersOfSetupOrderByWithRelationInputSchema.array(),
          SpeakersOfSetupOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: SpeakersOfSetupWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          SpeakersOfSetupScalarFieldEnumSchema,
          SpeakersOfSetupScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const SpeakersOfSetupFindManyArgsSchema: z.ZodType<Prisma.SpeakersOfSetupFindManyArgs> =
  z
    .object({
      select: SpeakersOfSetupSelectSchema.optional(),
      include: SpeakersOfSetupIncludeSchema.optional(),
      where: SpeakersOfSetupWhereInputSchema.optional(),
      orderBy: z
        .union([
          SpeakersOfSetupOrderByWithRelationInputSchema.array(),
          SpeakersOfSetupOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: SpeakersOfSetupWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          SpeakersOfSetupScalarFieldEnumSchema,
          SpeakersOfSetupScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const SpeakersOfSetupAggregateArgsSchema: z.ZodType<Prisma.SpeakersOfSetupAggregateArgs> =
  z
    .object({
      where: SpeakersOfSetupWhereInputSchema.optional(),
      orderBy: z
        .union([
          SpeakersOfSetupOrderByWithRelationInputSchema.array(),
          SpeakersOfSetupOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: SpeakersOfSetupWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
    })
    .strict();

export const SpeakersOfSetupGroupByArgsSchema: z.ZodType<Prisma.SpeakersOfSetupGroupByArgs> =
  z
    .object({
      where: SpeakersOfSetupWhereInputSchema.optional(),
      orderBy: z
        .union([
          SpeakersOfSetupOrderByWithAggregationInputSchema.array(),
          SpeakersOfSetupOrderByWithAggregationInputSchema,
        ])
        .optional(),
      by: SpeakersOfSetupScalarFieldEnumSchema.array(),
      having: SpeakersOfSetupScalarWhereWithAggregatesInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
    })
    .strict();

export const SpeakersOfSetupFindUniqueArgsSchema: z.ZodType<Prisma.SpeakersOfSetupFindUniqueArgs> =
  z
    .object({
      select: SpeakersOfSetupSelectSchema.optional(),
      include: SpeakersOfSetupIncludeSchema.optional(),
      where: SpeakersOfSetupWhereUniqueInputSchema,
    })
    .strict();

export const SpeakersOfSetupFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SpeakersOfSetupFindUniqueOrThrowArgs> =
  z
    .object({
      select: SpeakersOfSetupSelectSchema.optional(),
      include: SpeakersOfSetupIncludeSchema.optional(),
      where: SpeakersOfSetupWhereUniqueInputSchema,
    })
    .strict();

export const MonitorsOfSetupFindFirstArgsSchema: z.ZodType<Prisma.MonitorsOfSetupFindFirstArgs> =
  z
    .object({
      select: MonitorsOfSetupSelectSchema.optional(),
      include: MonitorsOfSetupIncludeSchema.optional(),
      where: MonitorsOfSetupWhereInputSchema.optional(),
      orderBy: z
        .union([
          MonitorsOfSetupOrderByWithRelationInputSchema.array(),
          MonitorsOfSetupOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: MonitorsOfSetupWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          MonitorsOfSetupScalarFieldEnumSchema,
          MonitorsOfSetupScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const MonitorsOfSetupFindFirstOrThrowArgsSchema: z.ZodType<Prisma.MonitorsOfSetupFindFirstOrThrowArgs> =
  z
    .object({
      select: MonitorsOfSetupSelectSchema.optional(),
      include: MonitorsOfSetupIncludeSchema.optional(),
      where: MonitorsOfSetupWhereInputSchema.optional(),
      orderBy: z
        .union([
          MonitorsOfSetupOrderByWithRelationInputSchema.array(),
          MonitorsOfSetupOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: MonitorsOfSetupWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          MonitorsOfSetupScalarFieldEnumSchema,
          MonitorsOfSetupScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const MonitorsOfSetupFindManyArgsSchema: z.ZodType<Prisma.MonitorsOfSetupFindManyArgs> =
  z
    .object({
      select: MonitorsOfSetupSelectSchema.optional(),
      include: MonitorsOfSetupIncludeSchema.optional(),
      where: MonitorsOfSetupWhereInputSchema.optional(),
      orderBy: z
        .union([
          MonitorsOfSetupOrderByWithRelationInputSchema.array(),
          MonitorsOfSetupOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: MonitorsOfSetupWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          MonitorsOfSetupScalarFieldEnumSchema,
          MonitorsOfSetupScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const MonitorsOfSetupAggregateArgsSchema: z.ZodType<Prisma.MonitorsOfSetupAggregateArgs> =
  z
    .object({
      where: MonitorsOfSetupWhereInputSchema.optional(),
      orderBy: z
        .union([
          MonitorsOfSetupOrderByWithRelationInputSchema.array(),
          MonitorsOfSetupOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: MonitorsOfSetupWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
    })
    .strict();

export const MonitorsOfSetupGroupByArgsSchema: z.ZodType<Prisma.MonitorsOfSetupGroupByArgs> =
  z
    .object({
      where: MonitorsOfSetupWhereInputSchema.optional(),
      orderBy: z
        .union([
          MonitorsOfSetupOrderByWithAggregationInputSchema.array(),
          MonitorsOfSetupOrderByWithAggregationInputSchema,
        ])
        .optional(),
      by: MonitorsOfSetupScalarFieldEnumSchema.array(),
      having: MonitorsOfSetupScalarWhereWithAggregatesInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
    })
    .strict();

export const MonitorsOfSetupFindUniqueArgsSchema: z.ZodType<Prisma.MonitorsOfSetupFindUniqueArgs> =
  z
    .object({
      select: MonitorsOfSetupSelectSchema.optional(),
      include: MonitorsOfSetupIncludeSchema.optional(),
      where: MonitorsOfSetupWhereUniqueInputSchema,
    })
    .strict();

export const MonitorsOfSetupFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.MonitorsOfSetupFindUniqueOrThrowArgs> =
  z
    .object({
      select: MonitorsOfSetupSelectSchema.optional(),
      include: MonitorsOfSetupIncludeSchema.optional(),
      where: MonitorsOfSetupWhereUniqueInputSchema,
    })
    .strict();

export const MonitorFindFirstArgsSchema: z.ZodType<Prisma.MonitorFindFirstArgs> =
  z
    .object({
      select: MonitorSelectSchema.optional(),
      include: MonitorIncludeSchema.optional(),
      where: MonitorWhereInputSchema.optional(),
      orderBy: z
        .union([
          MonitorOrderByWithRelationInputSchema.array(),
          MonitorOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: MonitorWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          MonitorScalarFieldEnumSchema,
          MonitorScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const MonitorFindFirstOrThrowArgsSchema: z.ZodType<Prisma.MonitorFindFirstOrThrowArgs> =
  z
    .object({
      select: MonitorSelectSchema.optional(),
      include: MonitorIncludeSchema.optional(),
      where: MonitorWhereInputSchema.optional(),
      orderBy: z
        .union([
          MonitorOrderByWithRelationInputSchema.array(),
          MonitorOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: MonitorWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          MonitorScalarFieldEnumSchema,
          MonitorScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const MonitorFindManyArgsSchema: z.ZodType<Prisma.MonitorFindManyArgs> =
  z
    .object({
      select: MonitorSelectSchema.optional(),
      include: MonitorIncludeSchema.optional(),
      where: MonitorWhereInputSchema.optional(),
      orderBy: z
        .union([
          MonitorOrderByWithRelationInputSchema.array(),
          MonitorOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: MonitorWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          MonitorScalarFieldEnumSchema,
          MonitorScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const MonitorAggregateArgsSchema: z.ZodType<Prisma.MonitorAggregateArgs> =
  z
    .object({
      where: MonitorWhereInputSchema.optional(),
      orderBy: z
        .union([
          MonitorOrderByWithRelationInputSchema.array(),
          MonitorOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: MonitorWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
    })
    .strict();

export const MonitorGroupByArgsSchema: z.ZodType<Prisma.MonitorGroupByArgs> = z
  .object({
    where: MonitorWhereInputSchema.optional(),
    orderBy: z
      .union([
        MonitorOrderByWithAggregationInputSchema.array(),
        MonitorOrderByWithAggregationInputSchema,
      ])
      .optional(),
    by: MonitorScalarFieldEnumSchema.array(),
    having: MonitorScalarWhereWithAggregatesInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
  })
  .strict();

export const MonitorFindUniqueArgsSchema: z.ZodType<Prisma.MonitorFindUniqueArgs> =
  z
    .object({
      select: MonitorSelectSchema.optional(),
      include: MonitorIncludeSchema.optional(),
      where: MonitorWhereUniqueInputSchema,
    })
    .strict();

export const MonitorFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.MonitorFindUniqueOrThrowArgs> =
  z
    .object({
      select: MonitorSelectSchema.optional(),
      include: MonitorIncludeSchema.optional(),
      where: MonitorWhereUniqueInputSchema,
    })
    .strict();

export const SoundCardFindFirstArgsSchema: z.ZodType<Prisma.SoundCardFindFirstArgs> =
  z
    .object({
      select: SoundCardSelectSchema.optional(),
      include: SoundCardIncludeSchema.optional(),
      where: SoundCardWhereInputSchema.optional(),
      orderBy: z
        .union([
          SoundCardOrderByWithRelationInputSchema.array(),
          SoundCardOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: SoundCardWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          SoundCardScalarFieldEnumSchema,
          SoundCardScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const SoundCardFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SoundCardFindFirstOrThrowArgs> =
  z
    .object({
      select: SoundCardSelectSchema.optional(),
      include: SoundCardIncludeSchema.optional(),
      where: SoundCardWhereInputSchema.optional(),
      orderBy: z
        .union([
          SoundCardOrderByWithRelationInputSchema.array(),
          SoundCardOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: SoundCardWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          SoundCardScalarFieldEnumSchema,
          SoundCardScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const SoundCardFindManyArgsSchema: z.ZodType<Prisma.SoundCardFindManyArgs> =
  z
    .object({
      select: SoundCardSelectSchema.optional(),
      include: SoundCardIncludeSchema.optional(),
      where: SoundCardWhereInputSchema.optional(),
      orderBy: z
        .union([
          SoundCardOrderByWithRelationInputSchema.array(),
          SoundCardOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: SoundCardWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          SoundCardScalarFieldEnumSchema,
          SoundCardScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const SoundCardAggregateArgsSchema: z.ZodType<Prisma.SoundCardAggregateArgs> =
  z
    .object({
      where: SoundCardWhereInputSchema.optional(),
      orderBy: z
        .union([
          SoundCardOrderByWithRelationInputSchema.array(),
          SoundCardOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: SoundCardWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
    })
    .strict();

export const SoundCardGroupByArgsSchema: z.ZodType<Prisma.SoundCardGroupByArgs> =
  z
    .object({
      where: SoundCardWhereInputSchema.optional(),
      orderBy: z
        .union([
          SoundCardOrderByWithAggregationInputSchema.array(),
          SoundCardOrderByWithAggregationInputSchema,
        ])
        .optional(),
      by: SoundCardScalarFieldEnumSchema.array(),
      having: SoundCardScalarWhereWithAggregatesInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
    })
    .strict();

export const SoundCardFindUniqueArgsSchema: z.ZodType<Prisma.SoundCardFindUniqueArgs> =
  z
    .object({
      select: SoundCardSelectSchema.optional(),
      include: SoundCardIncludeSchema.optional(),
      where: SoundCardWhereUniqueInputSchema,
    })
    .strict();

export const SoundCardFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SoundCardFindUniqueOrThrowArgs> =
  z
    .object({
      select: SoundCardSelectSchema.optional(),
      include: SoundCardIncludeSchema.optional(),
      where: SoundCardWhereUniqueInputSchema,
    })
    .strict();

export const HeadphonesFindFirstArgsSchema: z.ZodType<Prisma.HeadphonesFindFirstArgs> =
  z
    .object({
      select: HeadphonesSelectSchema.optional(),
      include: HeadphonesIncludeSchema.optional(),
      where: HeadphonesWhereInputSchema.optional(),
      orderBy: z
        .union([
          HeadphonesOrderByWithRelationInputSchema.array(),
          HeadphonesOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: HeadphonesWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          HeadphonesScalarFieldEnumSchema,
          HeadphonesScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const HeadphonesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.HeadphonesFindFirstOrThrowArgs> =
  z
    .object({
      select: HeadphonesSelectSchema.optional(),
      include: HeadphonesIncludeSchema.optional(),
      where: HeadphonesWhereInputSchema.optional(),
      orderBy: z
        .union([
          HeadphonesOrderByWithRelationInputSchema.array(),
          HeadphonesOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: HeadphonesWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          HeadphonesScalarFieldEnumSchema,
          HeadphonesScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const HeadphonesFindManyArgsSchema: z.ZodType<Prisma.HeadphonesFindManyArgs> =
  z
    .object({
      select: HeadphonesSelectSchema.optional(),
      include: HeadphonesIncludeSchema.optional(),
      where: HeadphonesWhereInputSchema.optional(),
      orderBy: z
        .union([
          HeadphonesOrderByWithRelationInputSchema.array(),
          HeadphonesOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: HeadphonesWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          HeadphonesScalarFieldEnumSchema,
          HeadphonesScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const HeadphonesAggregateArgsSchema: z.ZodType<Prisma.HeadphonesAggregateArgs> =
  z
    .object({
      where: HeadphonesWhereInputSchema.optional(),
      orderBy: z
        .union([
          HeadphonesOrderByWithRelationInputSchema.array(),
          HeadphonesOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: HeadphonesWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
    })
    .strict();

export const HeadphonesGroupByArgsSchema: z.ZodType<Prisma.HeadphonesGroupByArgs> =
  z
    .object({
      where: HeadphonesWhereInputSchema.optional(),
      orderBy: z
        .union([
          HeadphonesOrderByWithAggregationInputSchema.array(),
          HeadphonesOrderByWithAggregationInputSchema,
        ])
        .optional(),
      by: HeadphonesScalarFieldEnumSchema.array(),
      having: HeadphonesScalarWhereWithAggregatesInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
    })
    .strict();

export const HeadphonesFindUniqueArgsSchema: z.ZodType<Prisma.HeadphonesFindUniqueArgs> =
  z
    .object({
      select: HeadphonesSelectSchema.optional(),
      include: HeadphonesIncludeSchema.optional(),
      where: HeadphonesWhereUniqueInputSchema,
    })
    .strict();

export const HeadphonesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.HeadphonesFindUniqueOrThrowArgs> =
  z
    .object({
      select: HeadphonesSelectSchema.optional(),
      include: HeadphonesIncludeSchema.optional(),
      where: HeadphonesWhereUniqueInputSchema,
    })
    .strict();

export const KeyboardFindFirstArgsSchema: z.ZodType<Prisma.KeyboardFindFirstArgs> =
  z
    .object({
      select: KeyboardSelectSchema.optional(),
      include: KeyboardIncludeSchema.optional(),
      where: KeyboardWhereInputSchema.optional(),
      orderBy: z
        .union([
          KeyboardOrderByWithRelationInputSchema.array(),
          KeyboardOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: KeyboardWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          KeyboardScalarFieldEnumSchema,
          KeyboardScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const KeyboardFindFirstOrThrowArgsSchema: z.ZodType<Prisma.KeyboardFindFirstOrThrowArgs> =
  z
    .object({
      select: KeyboardSelectSchema.optional(),
      include: KeyboardIncludeSchema.optional(),
      where: KeyboardWhereInputSchema.optional(),
      orderBy: z
        .union([
          KeyboardOrderByWithRelationInputSchema.array(),
          KeyboardOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: KeyboardWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          KeyboardScalarFieldEnumSchema,
          KeyboardScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const KeyboardFindManyArgsSchema: z.ZodType<Prisma.KeyboardFindManyArgs> =
  z
    .object({
      select: KeyboardSelectSchema.optional(),
      include: KeyboardIncludeSchema.optional(),
      where: KeyboardWhereInputSchema.optional(),
      orderBy: z
        .union([
          KeyboardOrderByWithRelationInputSchema.array(),
          KeyboardOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: KeyboardWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          KeyboardScalarFieldEnumSchema,
          KeyboardScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const KeyboardAggregateArgsSchema: z.ZodType<Prisma.KeyboardAggregateArgs> =
  z
    .object({
      where: KeyboardWhereInputSchema.optional(),
      orderBy: z
        .union([
          KeyboardOrderByWithRelationInputSchema.array(),
          KeyboardOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: KeyboardWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
    })
    .strict();

export const KeyboardGroupByArgsSchema: z.ZodType<Prisma.KeyboardGroupByArgs> =
  z
    .object({
      where: KeyboardWhereInputSchema.optional(),
      orderBy: z
        .union([
          KeyboardOrderByWithAggregationInputSchema.array(),
          KeyboardOrderByWithAggregationInputSchema,
        ])
        .optional(),
      by: KeyboardScalarFieldEnumSchema.array(),
      having: KeyboardScalarWhereWithAggregatesInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
    })
    .strict();

export const KeyboardFindUniqueArgsSchema: z.ZodType<Prisma.KeyboardFindUniqueArgs> =
  z
    .object({
      select: KeyboardSelectSchema.optional(),
      include: KeyboardIncludeSchema.optional(),
      where: KeyboardWhereUniqueInputSchema,
    })
    .strict();

export const KeyboardFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.KeyboardFindUniqueOrThrowArgs> =
  z
    .object({
      select: KeyboardSelectSchema.optional(),
      include: KeyboardIncludeSchema.optional(),
      where: KeyboardWhereUniqueInputSchema,
    })
    .strict();

export const MouseFindFirstArgsSchema: z.ZodType<Prisma.MouseFindFirstArgs> = z
  .object({
    select: MouseSelectSchema.optional(),
    include: MouseIncludeSchema.optional(),
    where: MouseWhereInputSchema.optional(),
    orderBy: z
      .union([
        MouseOrderByWithRelationInputSchema.array(),
        MouseOrderByWithRelationInputSchema,
      ])
      .optional(),
    cursor: MouseWhereUniqueInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
    distinct: z
      .union([MouseScalarFieldEnumSchema, MouseScalarFieldEnumSchema.array()])
      .optional(),
  })
  .strict();

export const MouseFindFirstOrThrowArgsSchema: z.ZodType<Prisma.MouseFindFirstOrThrowArgs> =
  z
    .object({
      select: MouseSelectSchema.optional(),
      include: MouseIncludeSchema.optional(),
      where: MouseWhereInputSchema.optional(),
      orderBy: z
        .union([
          MouseOrderByWithRelationInputSchema.array(),
          MouseOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: MouseWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([MouseScalarFieldEnumSchema, MouseScalarFieldEnumSchema.array()])
        .optional(),
    })
    .strict();

export const MouseFindManyArgsSchema: z.ZodType<Prisma.MouseFindManyArgs> = z
  .object({
    select: MouseSelectSchema.optional(),
    include: MouseIncludeSchema.optional(),
    where: MouseWhereInputSchema.optional(),
    orderBy: z
      .union([
        MouseOrderByWithRelationInputSchema.array(),
        MouseOrderByWithRelationInputSchema,
      ])
      .optional(),
    cursor: MouseWhereUniqueInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
    distinct: z
      .union([MouseScalarFieldEnumSchema, MouseScalarFieldEnumSchema.array()])
      .optional(),
  })
  .strict();

export const MouseAggregateArgsSchema: z.ZodType<Prisma.MouseAggregateArgs> = z
  .object({
    where: MouseWhereInputSchema.optional(),
    orderBy: z
      .union([
        MouseOrderByWithRelationInputSchema.array(),
        MouseOrderByWithRelationInputSchema,
      ])
      .optional(),
    cursor: MouseWhereUniqueInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
  })
  .strict();

export const MouseGroupByArgsSchema: z.ZodType<Prisma.MouseGroupByArgs> = z
  .object({
    where: MouseWhereInputSchema.optional(),
    orderBy: z
      .union([
        MouseOrderByWithAggregationInputSchema.array(),
        MouseOrderByWithAggregationInputSchema,
      ])
      .optional(),
    by: MouseScalarFieldEnumSchema.array(),
    having: MouseScalarWhereWithAggregatesInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
  })
  .strict();

export const MouseFindUniqueArgsSchema: z.ZodType<Prisma.MouseFindUniqueArgs> =
  z
    .object({
      select: MouseSelectSchema.optional(),
      include: MouseIncludeSchema.optional(),
      where: MouseWhereUniqueInputSchema,
    })
    .strict();

export const MouseFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.MouseFindUniqueOrThrowArgs> =
  z
    .object({
      select: MouseSelectSchema.optional(),
      include: MouseIncludeSchema.optional(),
      where: MouseWhereUniqueInputSchema,
    })
    .strict();

export const SpeakersFindFirstArgsSchema: z.ZodType<Prisma.SpeakersFindFirstArgs> =
  z
    .object({
      select: SpeakersSelectSchema.optional(),
      include: SpeakersIncludeSchema.optional(),
      where: SpeakersWhereInputSchema.optional(),
      orderBy: z
        .union([
          SpeakersOrderByWithRelationInputSchema.array(),
          SpeakersOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: SpeakersWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          SpeakersScalarFieldEnumSchema,
          SpeakersScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const SpeakersFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SpeakersFindFirstOrThrowArgs> =
  z
    .object({
      select: SpeakersSelectSchema.optional(),
      include: SpeakersIncludeSchema.optional(),
      where: SpeakersWhereInputSchema.optional(),
      orderBy: z
        .union([
          SpeakersOrderByWithRelationInputSchema.array(),
          SpeakersOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: SpeakersWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          SpeakersScalarFieldEnumSchema,
          SpeakersScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const SpeakersFindManyArgsSchema: z.ZodType<Prisma.SpeakersFindManyArgs> =
  z
    .object({
      select: SpeakersSelectSchema.optional(),
      include: SpeakersIncludeSchema.optional(),
      where: SpeakersWhereInputSchema.optional(),
      orderBy: z
        .union([
          SpeakersOrderByWithRelationInputSchema.array(),
          SpeakersOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: SpeakersWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          SpeakersScalarFieldEnumSchema,
          SpeakersScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const SpeakersAggregateArgsSchema: z.ZodType<Prisma.SpeakersAggregateArgs> =
  z
    .object({
      where: SpeakersWhereInputSchema.optional(),
      orderBy: z
        .union([
          SpeakersOrderByWithRelationInputSchema.array(),
          SpeakersOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: SpeakersWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
    })
    .strict();

export const SpeakersGroupByArgsSchema: z.ZodType<Prisma.SpeakersGroupByArgs> =
  z
    .object({
      where: SpeakersWhereInputSchema.optional(),
      orderBy: z
        .union([
          SpeakersOrderByWithAggregationInputSchema.array(),
          SpeakersOrderByWithAggregationInputSchema,
        ])
        .optional(),
      by: SpeakersScalarFieldEnumSchema.array(),
      having: SpeakersScalarWhereWithAggregatesInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
    })
    .strict();

export const SpeakersFindUniqueArgsSchema: z.ZodType<Prisma.SpeakersFindUniqueArgs> =
  z
    .object({
      select: SpeakersSelectSchema.optional(),
      include: SpeakersIncludeSchema.optional(),
      where: SpeakersWhereUniqueInputSchema,
    })
    .strict();

export const SpeakersFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SpeakersFindUniqueOrThrowArgs> =
  z
    .object({
      select: SpeakersSelectSchema.optional(),
      include: SpeakersIncludeSchema.optional(),
      where: SpeakersWhereUniqueInputSchema,
    })
    .strict();

export const WebcamFindFirstArgsSchema: z.ZodType<Prisma.WebcamFindFirstArgs> =
  z
    .object({
      select: WebcamSelectSchema.optional(),
      include: WebcamIncludeSchema.optional(),
      where: WebcamWhereInputSchema.optional(),
      orderBy: z
        .union([
          WebcamOrderByWithRelationInputSchema.array(),
          WebcamOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: WebcamWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          WebcamScalarFieldEnumSchema,
          WebcamScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const WebcamFindFirstOrThrowArgsSchema: z.ZodType<Prisma.WebcamFindFirstOrThrowArgs> =
  z
    .object({
      select: WebcamSelectSchema.optional(),
      include: WebcamIncludeSchema.optional(),
      where: WebcamWhereInputSchema.optional(),
      orderBy: z
        .union([
          WebcamOrderByWithRelationInputSchema.array(),
          WebcamOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: WebcamWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          WebcamScalarFieldEnumSchema,
          WebcamScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const WebcamFindManyArgsSchema: z.ZodType<Prisma.WebcamFindManyArgs> = z
  .object({
    select: WebcamSelectSchema.optional(),
    include: WebcamIncludeSchema.optional(),
    where: WebcamWhereInputSchema.optional(),
    orderBy: z
      .union([
        WebcamOrderByWithRelationInputSchema.array(),
        WebcamOrderByWithRelationInputSchema,
      ])
      .optional(),
    cursor: WebcamWhereUniqueInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
    distinct: z
      .union([WebcamScalarFieldEnumSchema, WebcamScalarFieldEnumSchema.array()])
      .optional(),
  })
  .strict();

export const WebcamAggregateArgsSchema: z.ZodType<Prisma.WebcamAggregateArgs> =
  z
    .object({
      where: WebcamWhereInputSchema.optional(),
      orderBy: z
        .union([
          WebcamOrderByWithRelationInputSchema.array(),
          WebcamOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: WebcamWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
    })
    .strict();

export const WebcamGroupByArgsSchema: z.ZodType<Prisma.WebcamGroupByArgs> = z
  .object({
    where: WebcamWhereInputSchema.optional(),
    orderBy: z
      .union([
        WebcamOrderByWithAggregationInputSchema.array(),
        WebcamOrderByWithAggregationInputSchema,
      ])
      .optional(),
    by: WebcamScalarFieldEnumSchema.array(),
    having: WebcamScalarWhereWithAggregatesInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
  })
  .strict();

export const WebcamFindUniqueArgsSchema: z.ZodType<Prisma.WebcamFindUniqueArgs> =
  z
    .object({
      select: WebcamSelectSchema.optional(),
      include: WebcamIncludeSchema.optional(),
      where: WebcamWhereUniqueInputSchema,
    })
    .strict();

export const WebcamFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.WebcamFindUniqueOrThrowArgs> =
  z
    .object({
      select: WebcamSelectSchema.optional(),
      include: WebcamIncludeSchema.optional(),
      where: WebcamWhereUniqueInputSchema,
    })
    .strict();

export const CaseFanFindFirstArgsSchema: z.ZodType<Prisma.CaseFanFindFirstArgs> =
  z
    .object({
      select: CaseFanSelectSchema.optional(),
      include: CaseFanIncludeSchema.optional(),
      where: CaseFanWhereInputSchema.optional(),
      orderBy: z
        .union([
          CaseFanOrderByWithRelationInputSchema.array(),
          CaseFanOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: CaseFanWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          CaseFanScalarFieldEnumSchema,
          CaseFanScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const CaseFanFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CaseFanFindFirstOrThrowArgs> =
  z
    .object({
      select: CaseFanSelectSchema.optional(),
      include: CaseFanIncludeSchema.optional(),
      where: CaseFanWhereInputSchema.optional(),
      orderBy: z
        .union([
          CaseFanOrderByWithRelationInputSchema.array(),
          CaseFanOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: CaseFanWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          CaseFanScalarFieldEnumSchema,
          CaseFanScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const CaseFanFindManyArgsSchema: z.ZodType<Prisma.CaseFanFindManyArgs> =
  z
    .object({
      select: CaseFanSelectSchema.optional(),
      include: CaseFanIncludeSchema.optional(),
      where: CaseFanWhereInputSchema.optional(),
      orderBy: z
        .union([
          CaseFanOrderByWithRelationInputSchema.array(),
          CaseFanOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: CaseFanWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
      distinct: z
        .union([
          CaseFanScalarFieldEnumSchema,
          CaseFanScalarFieldEnumSchema.array(),
        ])
        .optional(),
    })
    .strict();

export const CaseFanAggregateArgsSchema: z.ZodType<Prisma.CaseFanAggregateArgs> =
  z
    .object({
      where: CaseFanWhereInputSchema.optional(),
      orderBy: z
        .union([
          CaseFanOrderByWithRelationInputSchema.array(),
          CaseFanOrderByWithRelationInputSchema,
        ])
        .optional(),
      cursor: CaseFanWhereUniqueInputSchema.optional(),
      take: z.number().optional(),
      skip: z.number().optional(),
    })
    .strict();

export const CaseFanGroupByArgsSchema: z.ZodType<Prisma.CaseFanGroupByArgs> = z
  .object({
    where: CaseFanWhereInputSchema.optional(),
    orderBy: z
      .union([
        CaseFanOrderByWithAggregationInputSchema.array(),
        CaseFanOrderByWithAggregationInputSchema,
      ])
      .optional(),
    by: CaseFanScalarFieldEnumSchema.array(),
    having: CaseFanScalarWhereWithAggregatesInputSchema.optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
  })
  .strict();

export const CaseFanFindUniqueArgsSchema: z.ZodType<Prisma.CaseFanFindUniqueArgs> =
  z
    .object({
      select: CaseFanSelectSchema.optional(),
      include: CaseFanIncludeSchema.optional(),
      where: CaseFanWhereUniqueInputSchema,
    })
    .strict();

export const CaseFanFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CaseFanFindUniqueOrThrowArgs> =
  z
    .object({
      select: CaseFanSelectSchema.optional(),
      include: CaseFanIncludeSchema.optional(),
      where: CaseFanWhereUniqueInputSchema,
    })
    .strict();

export const AccountCreateArgsSchema: z.ZodType<Prisma.AccountCreateArgs> = z
  .object({
    select: AccountSelectSchema.optional(),
    include: AccountIncludeSchema.optional(),
    data: z.union([
      AccountCreateInputSchema,
      AccountUncheckedCreateInputSchema,
    ]),
  })
  .strict();

export const AccountUpsertArgsSchema: z.ZodType<Prisma.AccountUpsertArgs> = z
  .object({
    select: AccountSelectSchema.optional(),
    include: AccountIncludeSchema.optional(),
    where: AccountWhereUniqueInputSchema,
    create: z.union([
      AccountCreateInputSchema,
      AccountUncheckedCreateInputSchema,
    ]),
    update: z.union([
      AccountUpdateInputSchema,
      AccountUncheckedUpdateInputSchema,
    ]),
  })
  .strict();

export const AccountCreateManyArgsSchema: z.ZodType<Prisma.AccountCreateManyArgs> =
  z
    .object({
      data: z.union([
        AccountCreateManyInputSchema,
        AccountCreateManyInputSchema.array(),
      ]),
      skipDuplicates: z.boolean().optional(),
    })
    .strict();

export const AccountDeleteArgsSchema: z.ZodType<Prisma.AccountDeleteArgs> = z
  .object({
    select: AccountSelectSchema.optional(),
    include: AccountIncludeSchema.optional(),
    where: AccountWhereUniqueInputSchema,
  })
  .strict();

export const AccountUpdateArgsSchema: z.ZodType<Prisma.AccountUpdateArgs> = z
  .object({
    select: AccountSelectSchema.optional(),
    include: AccountIncludeSchema.optional(),
    data: z.union([
      AccountUpdateInputSchema,
      AccountUncheckedUpdateInputSchema,
    ]),
    where: AccountWhereUniqueInputSchema,
  })
  .strict();

export const AccountUpdateManyArgsSchema: z.ZodType<Prisma.AccountUpdateManyArgs> =
  z
    .object({
      data: z.union([
        AccountUpdateManyMutationInputSchema,
        AccountUncheckedUpdateManyInputSchema,
      ]),
      where: AccountWhereInputSchema.optional(),
    })
    .strict();

export const AccountDeleteManyArgsSchema: z.ZodType<Prisma.AccountDeleteManyArgs> =
  z
    .object({
      where: AccountWhereInputSchema.optional(),
    })
    .strict();

export const SessionCreateArgsSchema: z.ZodType<Prisma.SessionCreateArgs> = z
  .object({
    select: SessionSelectSchema.optional(),
    include: SessionIncludeSchema.optional(),
    data: z.union([
      SessionCreateInputSchema,
      SessionUncheckedCreateInputSchema,
    ]),
  })
  .strict();

export const SessionUpsertArgsSchema: z.ZodType<Prisma.SessionUpsertArgs> = z
  .object({
    select: SessionSelectSchema.optional(),
    include: SessionIncludeSchema.optional(),
    where: SessionWhereUniqueInputSchema,
    create: z.union([
      SessionCreateInputSchema,
      SessionUncheckedCreateInputSchema,
    ]),
    update: z.union([
      SessionUpdateInputSchema,
      SessionUncheckedUpdateInputSchema,
    ]),
  })
  .strict();

export const SessionCreateManyArgsSchema: z.ZodType<Prisma.SessionCreateManyArgs> =
  z
    .object({
      data: z.union([
        SessionCreateManyInputSchema,
        SessionCreateManyInputSchema.array(),
      ]),
      skipDuplicates: z.boolean().optional(),
    })
    .strict();

export const SessionDeleteArgsSchema: z.ZodType<Prisma.SessionDeleteArgs> = z
  .object({
    select: SessionSelectSchema.optional(),
    include: SessionIncludeSchema.optional(),
    where: SessionWhereUniqueInputSchema,
  })
  .strict();

export const SessionUpdateArgsSchema: z.ZodType<Prisma.SessionUpdateArgs> = z
  .object({
    select: SessionSelectSchema.optional(),
    include: SessionIncludeSchema.optional(),
    data: z.union([
      SessionUpdateInputSchema,
      SessionUncheckedUpdateInputSchema,
    ]),
    where: SessionWhereUniqueInputSchema,
  })
  .strict();

export const SessionUpdateManyArgsSchema: z.ZodType<Prisma.SessionUpdateManyArgs> =
  z
    .object({
      data: z.union([
        SessionUpdateManyMutationInputSchema,
        SessionUncheckedUpdateManyInputSchema,
      ]),
      where: SessionWhereInputSchema.optional(),
    })
    .strict();

export const SessionDeleteManyArgsSchema: z.ZodType<Prisma.SessionDeleteManyArgs> =
  z
    .object({
      where: SessionWhereInputSchema.optional(),
    })
    .strict();

export const UserCreateArgsSchema: z.ZodType<Prisma.UserCreateArgs> = z
  .object({
    select: UserSelectSchema.optional(),
    include: UserIncludeSchema.optional(),
    data: z
      .union([UserCreateInputSchema, UserUncheckedCreateInputSchema])
      .optional(),
  })
  .strict();

export const UserUpsertArgsSchema: z.ZodType<Prisma.UserUpsertArgs> = z
  .object({
    select: UserSelectSchema.optional(),
    include: UserIncludeSchema.optional(),
    where: UserWhereUniqueInputSchema,
    create: z.union([UserCreateInputSchema, UserUncheckedCreateInputSchema]),
    update: z.union([UserUpdateInputSchema, UserUncheckedUpdateInputSchema]),
  })
  .strict();

export const UserCreateManyArgsSchema: z.ZodType<Prisma.UserCreateManyArgs> = z
  .object({
    data: z.union([
      UserCreateManyInputSchema,
      UserCreateManyInputSchema.array(),
    ]),
    skipDuplicates: z.boolean().optional(),
  })
  .strict();

export const UserDeleteArgsSchema: z.ZodType<Prisma.UserDeleteArgs> = z
  .object({
    select: UserSelectSchema.optional(),
    include: UserIncludeSchema.optional(),
    where: UserWhereUniqueInputSchema,
  })
  .strict();

export const UserUpdateArgsSchema: z.ZodType<Prisma.UserUpdateArgs> = z
  .object({
    select: UserSelectSchema.optional(),
    include: UserIncludeSchema.optional(),
    data: z.union([UserUpdateInputSchema, UserUncheckedUpdateInputSchema]),
    where: UserWhereUniqueInputSchema,
  })
  .strict();

export const UserUpdateManyArgsSchema: z.ZodType<Prisma.UserUpdateManyArgs> = z
  .object({
    data: z.union([
      UserUpdateManyMutationInputSchema,
      UserUncheckedUpdateManyInputSchema,
    ]),
    where: UserWhereInputSchema.optional(),
  })
  .strict();

export const UserDeleteManyArgsSchema: z.ZodType<Prisma.UserDeleteManyArgs> = z
  .object({
    where: UserWhereInputSchema.optional(),
  })
  .strict();

export const VerificationTokenCreateArgsSchema: z.ZodType<Prisma.VerificationTokenCreateArgs> =
  z
    .object({
      select: VerificationTokenSelectSchema.optional(),
      data: z.union([
        VerificationTokenCreateInputSchema,
        VerificationTokenUncheckedCreateInputSchema,
      ]),
    })
    .strict();

export const VerificationTokenUpsertArgsSchema: z.ZodType<Prisma.VerificationTokenUpsertArgs> =
  z
    .object({
      select: VerificationTokenSelectSchema.optional(),
      where: VerificationTokenWhereUniqueInputSchema,
      create: z.union([
        VerificationTokenCreateInputSchema,
        VerificationTokenUncheckedCreateInputSchema,
      ]),
      update: z.union([
        VerificationTokenUpdateInputSchema,
        VerificationTokenUncheckedUpdateInputSchema,
      ]),
    })
    .strict();

export const VerificationTokenCreateManyArgsSchema: z.ZodType<Prisma.VerificationTokenCreateManyArgs> =
  z
    .object({
      data: z.union([
        VerificationTokenCreateManyInputSchema,
        VerificationTokenCreateManyInputSchema.array(),
      ]),
      skipDuplicates: z.boolean().optional(),
    })
    .strict();

export const VerificationTokenDeleteArgsSchema: z.ZodType<Prisma.VerificationTokenDeleteArgs> =
  z
    .object({
      select: VerificationTokenSelectSchema.optional(),
      where: VerificationTokenWhereUniqueInputSchema,
    })
    .strict();

export const VerificationTokenUpdateArgsSchema: z.ZodType<Prisma.VerificationTokenUpdateArgs> =
  z
    .object({
      select: VerificationTokenSelectSchema.optional(),
      data: z.union([
        VerificationTokenUpdateInputSchema,
        VerificationTokenUncheckedUpdateInputSchema,
      ]),
      where: VerificationTokenWhereUniqueInputSchema,
    })
    .strict();

export const VerificationTokenUpdateManyArgsSchema: z.ZodType<Prisma.VerificationTokenUpdateManyArgs> =
  z
    .object({
      data: z.union([
        VerificationTokenUpdateManyMutationInputSchema,
        VerificationTokenUncheckedUpdateManyInputSchema,
      ]),
      where: VerificationTokenWhereInputSchema.optional(),
    })
    .strict();

export const VerificationTokenDeleteManyArgsSchema: z.ZodType<Prisma.VerificationTokenDeleteManyArgs> =
  z
    .object({
      where: VerificationTokenWhereInputSchema.optional(),
    })
    .strict();

export const CPUCoolerCreateArgsSchema: z.ZodType<Prisma.CPUCoolerCreateArgs> =
  z
    .object({
      select: CPUCoolerSelectSchema.optional(),
      include: CPUCoolerIncludeSchema.optional(),
      data: z.union([
        CPUCoolerCreateInputSchema,
        CPUCoolerUncheckedCreateInputSchema,
      ]),
    })
    .strict();

export const CPUCoolerUpsertArgsSchema: z.ZodType<Prisma.CPUCoolerUpsertArgs> =
  z
    .object({
      select: CPUCoolerSelectSchema.optional(),
      include: CPUCoolerIncludeSchema.optional(),
      where: CPUCoolerWhereUniqueInputSchema,
      create: z.union([
        CPUCoolerCreateInputSchema,
        CPUCoolerUncheckedCreateInputSchema,
      ]),
      update: z.union([
        CPUCoolerUpdateInputSchema,
        CPUCoolerUncheckedUpdateInputSchema,
      ]),
    })
    .strict();

export const CPUCoolerCreateManyArgsSchema: z.ZodType<Prisma.CPUCoolerCreateManyArgs> =
  z
    .object({
      data: z.union([
        CPUCoolerCreateManyInputSchema,
        CPUCoolerCreateManyInputSchema.array(),
      ]),
      skipDuplicates: z.boolean().optional(),
    })
    .strict();

export const CPUCoolerDeleteArgsSchema: z.ZodType<Prisma.CPUCoolerDeleteArgs> =
  z
    .object({
      select: CPUCoolerSelectSchema.optional(),
      include: CPUCoolerIncludeSchema.optional(),
      where: CPUCoolerWhereUniqueInputSchema,
    })
    .strict();

export const CPUCoolerUpdateArgsSchema: z.ZodType<Prisma.CPUCoolerUpdateArgs> =
  z
    .object({
      select: CPUCoolerSelectSchema.optional(),
      include: CPUCoolerIncludeSchema.optional(),
      data: z.union([
        CPUCoolerUpdateInputSchema,
        CPUCoolerUncheckedUpdateInputSchema,
      ]),
      where: CPUCoolerWhereUniqueInputSchema,
    })
    .strict();

export const CPUCoolerUpdateManyArgsSchema: z.ZodType<Prisma.CPUCoolerUpdateManyArgs> =
  z
    .object({
      data: z.union([
        CPUCoolerUpdateManyMutationInputSchema,
        CPUCoolerUncheckedUpdateManyInputSchema,
      ]),
      where: CPUCoolerWhereInputSchema.optional(),
    })
    .strict();

export const CPUCoolerDeleteManyArgsSchema: z.ZodType<Prisma.CPUCoolerDeleteManyArgs> =
  z
    .object({
      where: CPUCoolerWhereInputSchema.optional(),
    })
    .strict();

export const MotherboardCreateArgsSchema: z.ZodType<Prisma.MotherboardCreateArgs> =
  z
    .object({
      select: MotherboardSelectSchema.optional(),
      include: MotherboardIncludeSchema.optional(),
      data: z.union([
        MotherboardCreateInputSchema,
        MotherboardUncheckedCreateInputSchema,
      ]),
    })
    .strict();

export const MotherboardUpsertArgsSchema: z.ZodType<Prisma.MotherboardUpsertArgs> =
  z
    .object({
      select: MotherboardSelectSchema.optional(),
      include: MotherboardIncludeSchema.optional(),
      where: MotherboardWhereUniqueInputSchema,
      create: z.union([
        MotherboardCreateInputSchema,
        MotherboardUncheckedCreateInputSchema,
      ]),
      update: z.union([
        MotherboardUpdateInputSchema,
        MotherboardUncheckedUpdateInputSchema,
      ]),
    })
    .strict();

export const MotherboardCreateManyArgsSchema: z.ZodType<Prisma.MotherboardCreateManyArgs> =
  z
    .object({
      data: z.union([
        MotherboardCreateManyInputSchema,
        MotherboardCreateManyInputSchema.array(),
      ]),
      skipDuplicates: z.boolean().optional(),
    })
    .strict();

export const MotherboardDeleteArgsSchema: z.ZodType<Prisma.MotherboardDeleteArgs> =
  z
    .object({
      select: MotherboardSelectSchema.optional(),
      include: MotherboardIncludeSchema.optional(),
      where: MotherboardWhereUniqueInputSchema,
    })
    .strict();

export const MotherboardUpdateArgsSchema: z.ZodType<Prisma.MotherboardUpdateArgs> =
  z
    .object({
      select: MotherboardSelectSchema.optional(),
      include: MotherboardIncludeSchema.optional(),
      data: z.union([
        MotherboardUpdateInputSchema,
        MotherboardUncheckedUpdateInputSchema,
      ]),
      where: MotherboardWhereUniqueInputSchema,
    })
    .strict();

export const MotherboardUpdateManyArgsSchema: z.ZodType<Prisma.MotherboardUpdateManyArgs> =
  z
    .object({
      data: z.union([
        MotherboardUpdateManyMutationInputSchema,
        MotherboardUncheckedUpdateManyInputSchema,
      ]),
      where: MotherboardWhereInputSchema.optional(),
    })
    .strict();

export const MotherboardDeleteManyArgsSchema: z.ZodType<Prisma.MotherboardDeleteManyArgs> =
  z
    .object({
      where: MotherboardWhereInputSchema.optional(),
    })
    .strict();

export const RAMCreateArgsSchema: z.ZodType<Prisma.RAMCreateArgs> = z
  .object({
    select: RAMSelectSchema.optional(),
    include: RAMIncludeSchema.optional(),
    data: z.union([RAMCreateInputSchema, RAMUncheckedCreateInputSchema]),
  })
  .strict();

export const RAMUpsertArgsSchema: z.ZodType<Prisma.RAMUpsertArgs> = z
  .object({
    select: RAMSelectSchema.optional(),
    include: RAMIncludeSchema.optional(),
    where: RAMWhereUniqueInputSchema,
    create: z.union([RAMCreateInputSchema, RAMUncheckedCreateInputSchema]),
    update: z.union([RAMUpdateInputSchema, RAMUncheckedUpdateInputSchema]),
  })
  .strict();

export const RAMCreateManyArgsSchema: z.ZodType<Prisma.RAMCreateManyArgs> = z
  .object({
    data: z.union([RAMCreateManyInputSchema, RAMCreateManyInputSchema.array()]),
    skipDuplicates: z.boolean().optional(),
  })
  .strict();

export const RAMDeleteArgsSchema: z.ZodType<Prisma.RAMDeleteArgs> = z
  .object({
    select: RAMSelectSchema.optional(),
    include: RAMIncludeSchema.optional(),
    where: RAMWhereUniqueInputSchema,
  })
  .strict();

export const RAMUpdateArgsSchema: z.ZodType<Prisma.RAMUpdateArgs> = z
  .object({
    select: RAMSelectSchema.optional(),
    include: RAMIncludeSchema.optional(),
    data: z.union([RAMUpdateInputSchema, RAMUncheckedUpdateInputSchema]),
    where: RAMWhereUniqueInputSchema,
  })
  .strict();

export const RAMUpdateManyArgsSchema: z.ZodType<Prisma.RAMUpdateManyArgs> = z
  .object({
    data: z.union([
      RAMUpdateManyMutationInputSchema,
      RAMUncheckedUpdateManyInputSchema,
    ]),
    where: RAMWhereInputSchema.optional(),
  })
  .strict();

export const RAMDeleteManyArgsSchema: z.ZodType<Prisma.RAMDeleteManyArgs> = z
  .object({
    where: RAMWhereInputSchema.optional(),
  })
  .strict();

export const CPUCreateArgsSchema: z.ZodType<Prisma.CPUCreateArgs> = z
  .object({
    select: CPUSelectSchema.optional(),
    include: CPUIncludeSchema.optional(),
    data: z.union([CPUCreateInputSchema, CPUUncheckedCreateInputSchema]),
  })
  .strict();

export const CPUUpsertArgsSchema: z.ZodType<Prisma.CPUUpsertArgs> = z
  .object({
    select: CPUSelectSchema.optional(),
    include: CPUIncludeSchema.optional(),
    where: CPUWhereUniqueInputSchema,
    create: z.union([CPUCreateInputSchema, CPUUncheckedCreateInputSchema]),
    update: z.union([CPUUpdateInputSchema, CPUUncheckedUpdateInputSchema]),
  })
  .strict();

export const CPUCreateManyArgsSchema: z.ZodType<Prisma.CPUCreateManyArgs> = z
  .object({
    data: z.union([CPUCreateManyInputSchema, CPUCreateManyInputSchema.array()]),
    skipDuplicates: z.boolean().optional(),
  })
  .strict();

export const CPUDeleteArgsSchema: z.ZodType<Prisma.CPUDeleteArgs> = z
  .object({
    select: CPUSelectSchema.optional(),
    include: CPUIncludeSchema.optional(),
    where: CPUWhereUniqueInputSchema,
  })
  .strict();

export const CPUUpdateArgsSchema: z.ZodType<Prisma.CPUUpdateArgs> = z
  .object({
    select: CPUSelectSchema.optional(),
    include: CPUIncludeSchema.optional(),
    data: z.union([CPUUpdateInputSchema, CPUUncheckedUpdateInputSchema]),
    where: CPUWhereUniqueInputSchema,
  })
  .strict();

export const CPUUpdateManyArgsSchema: z.ZodType<Prisma.CPUUpdateManyArgs> = z
  .object({
    data: z.union([
      CPUUpdateManyMutationInputSchema,
      CPUUncheckedUpdateManyInputSchema,
    ]),
    where: CPUWhereInputSchema.optional(),
  })
  .strict();

export const CPUDeleteManyArgsSchema: z.ZodType<Prisma.CPUDeleteManyArgs> = z
  .object({
    where: CPUWhereInputSchema.optional(),
  })
  .strict();

export const HDDCreateArgsSchema: z.ZodType<Prisma.HDDCreateArgs> = z
  .object({
    select: HDDSelectSchema.optional(),
    include: HDDIncludeSchema.optional(),
    data: z.union([HDDCreateInputSchema, HDDUncheckedCreateInputSchema]),
  })
  .strict();

export const HDDUpsertArgsSchema: z.ZodType<Prisma.HDDUpsertArgs> = z
  .object({
    select: HDDSelectSchema.optional(),
    include: HDDIncludeSchema.optional(),
    where: HDDWhereUniqueInputSchema,
    create: z.union([HDDCreateInputSchema, HDDUncheckedCreateInputSchema]),
    update: z.union([HDDUpdateInputSchema, HDDUncheckedUpdateInputSchema]),
  })
  .strict();

export const HDDCreateManyArgsSchema: z.ZodType<Prisma.HDDCreateManyArgs> = z
  .object({
    data: z.union([HDDCreateManyInputSchema, HDDCreateManyInputSchema.array()]),
    skipDuplicates: z.boolean().optional(),
  })
  .strict();

export const HDDDeleteArgsSchema: z.ZodType<Prisma.HDDDeleteArgs> = z
  .object({
    select: HDDSelectSchema.optional(),
    include: HDDIncludeSchema.optional(),
    where: HDDWhereUniqueInputSchema,
  })
  .strict();

export const HDDUpdateArgsSchema: z.ZodType<Prisma.HDDUpdateArgs> = z
  .object({
    select: HDDSelectSchema.optional(),
    include: HDDIncludeSchema.optional(),
    data: z.union([HDDUpdateInputSchema, HDDUncheckedUpdateInputSchema]),
    where: HDDWhereUniqueInputSchema,
  })
  .strict();

export const HDDUpdateManyArgsSchema: z.ZodType<Prisma.HDDUpdateManyArgs> = z
  .object({
    data: z.union([
      HDDUpdateManyMutationInputSchema,
      HDDUncheckedUpdateManyInputSchema,
    ]),
    where: HDDWhereInputSchema.optional(),
  })
  .strict();

export const HDDDeleteManyArgsSchema: z.ZodType<Prisma.HDDDeleteManyArgs> = z
  .object({
    where: HDDWhereInputSchema.optional(),
  })
  .strict();

export const SSDCreateArgsSchema: z.ZodType<Prisma.SSDCreateArgs> = z
  .object({
    select: SSDSelectSchema.optional(),
    include: SSDIncludeSchema.optional(),
    data: z.union([SSDCreateInputSchema, SSDUncheckedCreateInputSchema]),
  })
  .strict();

export const SSDUpsertArgsSchema: z.ZodType<Prisma.SSDUpsertArgs> = z
  .object({
    select: SSDSelectSchema.optional(),
    include: SSDIncludeSchema.optional(),
    where: SSDWhereUniqueInputSchema,
    create: z.union([SSDCreateInputSchema, SSDUncheckedCreateInputSchema]),
    update: z.union([SSDUpdateInputSchema, SSDUncheckedUpdateInputSchema]),
  })
  .strict();

export const SSDCreateManyArgsSchema: z.ZodType<Prisma.SSDCreateManyArgs> = z
  .object({
    data: z.union([SSDCreateManyInputSchema, SSDCreateManyInputSchema.array()]),
    skipDuplicates: z.boolean().optional(),
  })
  .strict();

export const SSDDeleteArgsSchema: z.ZodType<Prisma.SSDDeleteArgs> = z
  .object({
    select: SSDSelectSchema.optional(),
    include: SSDIncludeSchema.optional(),
    where: SSDWhereUniqueInputSchema,
  })
  .strict();

export const SSDUpdateArgsSchema: z.ZodType<Prisma.SSDUpdateArgs> = z
  .object({
    select: SSDSelectSchema.optional(),
    include: SSDIncludeSchema.optional(),
    data: z.union([SSDUpdateInputSchema, SSDUncheckedUpdateInputSchema]),
    where: SSDWhereUniqueInputSchema,
  })
  .strict();

export const SSDUpdateManyArgsSchema: z.ZodType<Prisma.SSDUpdateManyArgs> = z
  .object({
    data: z.union([
      SSDUpdateManyMutationInputSchema,
      SSDUncheckedUpdateManyInputSchema,
    ]),
    where: SSDWhereInputSchema.optional(),
  })
  .strict();

export const SSDDeleteManyArgsSchema: z.ZodType<Prisma.SSDDeleteManyArgs> = z
  .object({
    where: SSDWhereInputSchema.optional(),
  })
  .strict();

export const GPUCreateArgsSchema: z.ZodType<Prisma.GPUCreateArgs> = z
  .object({
    select: GPUSelectSchema.optional(),
    include: GPUIncludeSchema.optional(),
    data: z.union([GPUCreateInputSchema, GPUUncheckedCreateInputSchema]),
  })
  .strict();

export const GPUUpsertArgsSchema: z.ZodType<Prisma.GPUUpsertArgs> = z
  .object({
    select: GPUSelectSchema.optional(),
    include: GPUIncludeSchema.optional(),
    where: GPUWhereUniqueInputSchema,
    create: z.union([GPUCreateInputSchema, GPUUncheckedCreateInputSchema]),
    update: z.union([GPUUpdateInputSchema, GPUUncheckedUpdateInputSchema]),
  })
  .strict();

export const GPUCreateManyArgsSchema: z.ZodType<Prisma.GPUCreateManyArgs> = z
  .object({
    data: z.union([GPUCreateManyInputSchema, GPUCreateManyInputSchema.array()]),
    skipDuplicates: z.boolean().optional(),
  })
  .strict();

export const GPUDeleteArgsSchema: z.ZodType<Prisma.GPUDeleteArgs> = z
  .object({
    select: GPUSelectSchema.optional(),
    include: GPUIncludeSchema.optional(),
    where: GPUWhereUniqueInputSchema,
  })
  .strict();

export const GPUUpdateArgsSchema: z.ZodType<Prisma.GPUUpdateArgs> = z
  .object({
    select: GPUSelectSchema.optional(),
    include: GPUIncludeSchema.optional(),
    data: z.union([GPUUpdateInputSchema, GPUUncheckedUpdateInputSchema]),
    where: GPUWhereUniqueInputSchema,
  })
  .strict();

export const GPUUpdateManyArgsSchema: z.ZodType<Prisma.GPUUpdateManyArgs> = z
  .object({
    data: z.union([
      GPUUpdateManyMutationInputSchema,
      GPUUncheckedUpdateManyInputSchema,
    ]),
    where: GPUWhereInputSchema.optional(),
  })
  .strict();

export const GPUDeleteManyArgsSchema: z.ZodType<Prisma.GPUDeleteManyArgs> = z
  .object({
    where: GPUWhereInputSchema.optional(),
  })
  .strict();

export const CaseCreateArgsSchema: z.ZodType<Prisma.CaseCreateArgs> = z
  .object({
    select: CaseSelectSchema.optional(),
    include: CaseIncludeSchema.optional(),
    data: z.union([CaseCreateInputSchema, CaseUncheckedCreateInputSchema]),
  })
  .strict();

export const CaseUpsertArgsSchema: z.ZodType<Prisma.CaseUpsertArgs> = z
  .object({
    select: CaseSelectSchema.optional(),
    include: CaseIncludeSchema.optional(),
    where: CaseWhereUniqueInputSchema,
    create: z.union([CaseCreateInputSchema, CaseUncheckedCreateInputSchema]),
    update: z.union([CaseUpdateInputSchema, CaseUncheckedUpdateInputSchema]),
  })
  .strict();

export const CaseCreateManyArgsSchema: z.ZodType<Prisma.CaseCreateManyArgs> = z
  .object({
    data: z.union([
      CaseCreateManyInputSchema,
      CaseCreateManyInputSchema.array(),
    ]),
    skipDuplicates: z.boolean().optional(),
  })
  .strict();

export const CaseDeleteArgsSchema: z.ZodType<Prisma.CaseDeleteArgs> = z
  .object({
    select: CaseSelectSchema.optional(),
    include: CaseIncludeSchema.optional(),
    where: CaseWhereUniqueInputSchema,
  })
  .strict();

export const CaseUpdateArgsSchema: z.ZodType<Prisma.CaseUpdateArgs> = z
  .object({
    select: CaseSelectSchema.optional(),
    include: CaseIncludeSchema.optional(),
    data: z.union([CaseUpdateInputSchema, CaseUncheckedUpdateInputSchema]),
    where: CaseWhereUniqueInputSchema,
  })
  .strict();

export const CaseUpdateManyArgsSchema: z.ZodType<Prisma.CaseUpdateManyArgs> = z
  .object({
    data: z.union([
      CaseUpdateManyMutationInputSchema,
      CaseUncheckedUpdateManyInputSchema,
    ]),
    where: CaseWhereInputSchema.optional(),
  })
  .strict();

export const CaseDeleteManyArgsSchema: z.ZodType<Prisma.CaseDeleteManyArgs> = z
  .object({
    where: CaseWhereInputSchema.optional(),
  })
  .strict();

export const PSUCreateArgsSchema: z.ZodType<Prisma.PSUCreateArgs> = z
  .object({
    select: PSUSelectSchema.optional(),
    include: PSUIncludeSchema.optional(),
    data: z.union([PSUCreateInputSchema, PSUUncheckedCreateInputSchema]),
  })
  .strict();

export const PSUUpsertArgsSchema: z.ZodType<Prisma.PSUUpsertArgs> = z
  .object({
    select: PSUSelectSchema.optional(),
    include: PSUIncludeSchema.optional(),
    where: PSUWhereUniqueInputSchema,
    create: z.union([PSUCreateInputSchema, PSUUncheckedCreateInputSchema]),
    update: z.union([PSUUpdateInputSchema, PSUUncheckedUpdateInputSchema]),
  })
  .strict();

export const PSUCreateManyArgsSchema: z.ZodType<Prisma.PSUCreateManyArgs> = z
  .object({
    data: z.union([PSUCreateManyInputSchema, PSUCreateManyInputSchema.array()]),
    skipDuplicates: z.boolean().optional(),
  })
  .strict();

export const PSUDeleteArgsSchema: z.ZodType<Prisma.PSUDeleteArgs> = z
  .object({
    select: PSUSelectSchema.optional(),
    include: PSUIncludeSchema.optional(),
    where: PSUWhereUniqueInputSchema,
  })
  .strict();

export const PSUUpdateArgsSchema: z.ZodType<Prisma.PSUUpdateArgs> = z
  .object({
    select: PSUSelectSchema.optional(),
    include: PSUIncludeSchema.optional(),
    data: z.union([PSUUpdateInputSchema, PSUUncheckedUpdateInputSchema]),
    where: PSUWhereUniqueInputSchema,
  })
  .strict();

export const PSUUpdateManyArgsSchema: z.ZodType<Prisma.PSUUpdateManyArgs> = z
  .object({
    data: z.union([
      PSUUpdateManyMutationInputSchema,
      PSUUncheckedUpdateManyInputSchema,
    ]),
    where: PSUWhereInputSchema.optional(),
  })
  .strict();

export const PSUDeleteManyArgsSchema: z.ZodType<Prisma.PSUDeleteManyArgs> = z
  .object({
    where: PSUWhereInputSchema.optional(),
  })
  .strict();

export const SetupCreateArgsSchema: z.ZodType<Prisma.SetupCreateArgs> = z
  .object({
    select: SetupSelectSchema.optional(),
    include: SetupIncludeSchema.optional(),
    data: z.union([SetupCreateInputSchema, SetupUncheckedCreateInputSchema]),
  })
  .strict();

export const SetupUpsertArgsSchema: z.ZodType<Prisma.SetupUpsertArgs> = z
  .object({
    select: SetupSelectSchema.optional(),
    include: SetupIncludeSchema.optional(),
    where: SetupWhereUniqueInputSchema,
    create: z.union([SetupCreateInputSchema, SetupUncheckedCreateInputSchema]),
    update: z.union([SetupUpdateInputSchema, SetupUncheckedUpdateInputSchema]),
  })
  .strict();

export const SetupCreateManyArgsSchema: z.ZodType<Prisma.SetupCreateManyArgs> =
  z
    .object({
      data: z.union([
        SetupCreateManyInputSchema,
        SetupCreateManyInputSchema.array(),
      ]),
      skipDuplicates: z.boolean().optional(),
    })
    .strict();

export const SetupDeleteArgsSchema: z.ZodType<Prisma.SetupDeleteArgs> = z
  .object({
    select: SetupSelectSchema.optional(),
    include: SetupIncludeSchema.optional(),
    where: SetupWhereUniqueInputSchema,
  })
  .strict();

export const SetupUpdateArgsSchema: z.ZodType<Prisma.SetupUpdateArgs> = z
  .object({
    select: SetupSelectSchema.optional(),
    include: SetupIncludeSchema.optional(),
    data: z.union([SetupUpdateInputSchema, SetupUncheckedUpdateInputSchema]),
    where: SetupWhereUniqueInputSchema,
  })
  .strict();

export const SetupUpdateManyArgsSchema: z.ZodType<Prisma.SetupUpdateManyArgs> =
  z
    .object({
      data: z.union([
        SetupUpdateManyMutationInputSchema,
        SetupUncheckedUpdateManyInputSchema,
      ]),
      where: SetupWhereInputSchema.optional(),
    })
    .strict();

export const SetupDeleteManyArgsSchema: z.ZodType<Prisma.SetupDeleteManyArgs> =
  z
    .object({
      where: SetupWhereInputSchema.optional(),
    })
    .strict();

export const SSDOfSetupCreateArgsSchema: z.ZodType<Prisma.SSDOfSetupCreateArgs> =
  z
    .object({
      select: SSDOfSetupSelectSchema.optional(),
      include: SSDOfSetupIncludeSchema.optional(),
      data: z.union([
        SSDOfSetupCreateInputSchema,
        SSDOfSetupUncheckedCreateInputSchema,
      ]),
    })
    .strict();

export const SSDOfSetupUpsertArgsSchema: z.ZodType<Prisma.SSDOfSetupUpsertArgs> =
  z
    .object({
      select: SSDOfSetupSelectSchema.optional(),
      include: SSDOfSetupIncludeSchema.optional(),
      where: SSDOfSetupWhereUniqueInputSchema,
      create: z.union([
        SSDOfSetupCreateInputSchema,
        SSDOfSetupUncheckedCreateInputSchema,
      ]),
      update: z.union([
        SSDOfSetupUpdateInputSchema,
        SSDOfSetupUncheckedUpdateInputSchema,
      ]),
    })
    .strict();

export const SSDOfSetupCreateManyArgsSchema: z.ZodType<Prisma.SSDOfSetupCreateManyArgs> =
  z
    .object({
      data: z.union([
        SSDOfSetupCreateManyInputSchema,
        SSDOfSetupCreateManyInputSchema.array(),
      ]),
      skipDuplicates: z.boolean().optional(),
    })
    .strict();

export const SSDOfSetupDeleteArgsSchema: z.ZodType<Prisma.SSDOfSetupDeleteArgs> =
  z
    .object({
      select: SSDOfSetupSelectSchema.optional(),
      include: SSDOfSetupIncludeSchema.optional(),
      where: SSDOfSetupWhereUniqueInputSchema,
    })
    .strict();

export const SSDOfSetupUpdateArgsSchema: z.ZodType<Prisma.SSDOfSetupUpdateArgs> =
  z
    .object({
      select: SSDOfSetupSelectSchema.optional(),
      include: SSDOfSetupIncludeSchema.optional(),
      data: z.union([
        SSDOfSetupUpdateInputSchema,
        SSDOfSetupUncheckedUpdateInputSchema,
      ]),
      where: SSDOfSetupWhereUniqueInputSchema,
    })
    .strict();

export const SSDOfSetupUpdateManyArgsSchema: z.ZodType<Prisma.SSDOfSetupUpdateManyArgs> =
  z
    .object({
      data: z.union([
        SSDOfSetupUpdateManyMutationInputSchema,
        SSDOfSetupUncheckedUpdateManyInputSchema,
      ]),
      where: SSDOfSetupWhereInputSchema.optional(),
    })
    .strict();

export const SSDOfSetupDeleteManyArgsSchema: z.ZodType<Prisma.SSDOfSetupDeleteManyArgs> =
  z
    .object({
      where: SSDOfSetupWhereInputSchema.optional(),
    })
    .strict();

export const CaseFanOfSetupCreateArgsSchema: z.ZodType<Prisma.CaseFanOfSetupCreateArgs> =
  z
    .object({
      select: CaseFanOfSetupSelectSchema.optional(),
      include: CaseFanOfSetupIncludeSchema.optional(),
      data: z.union([
        CaseFanOfSetupCreateInputSchema,
        CaseFanOfSetupUncheckedCreateInputSchema,
      ]),
    })
    .strict();

export const CaseFanOfSetupUpsertArgsSchema: z.ZodType<Prisma.CaseFanOfSetupUpsertArgs> =
  z
    .object({
      select: CaseFanOfSetupSelectSchema.optional(),
      include: CaseFanOfSetupIncludeSchema.optional(),
      where: CaseFanOfSetupWhereUniqueInputSchema,
      create: z.union([
        CaseFanOfSetupCreateInputSchema,
        CaseFanOfSetupUncheckedCreateInputSchema,
      ]),
      update: z.union([
        CaseFanOfSetupUpdateInputSchema,
        CaseFanOfSetupUncheckedUpdateInputSchema,
      ]),
    })
    .strict();

export const CaseFanOfSetupCreateManyArgsSchema: z.ZodType<Prisma.CaseFanOfSetupCreateManyArgs> =
  z
    .object({
      data: z.union([
        CaseFanOfSetupCreateManyInputSchema,
        CaseFanOfSetupCreateManyInputSchema.array(),
      ]),
      skipDuplicates: z.boolean().optional(),
    })
    .strict();

export const CaseFanOfSetupDeleteArgsSchema: z.ZodType<Prisma.CaseFanOfSetupDeleteArgs> =
  z
    .object({
      select: CaseFanOfSetupSelectSchema.optional(),
      include: CaseFanOfSetupIncludeSchema.optional(),
      where: CaseFanOfSetupWhereUniqueInputSchema,
    })
    .strict();

export const CaseFanOfSetupUpdateArgsSchema: z.ZodType<Prisma.CaseFanOfSetupUpdateArgs> =
  z
    .object({
      select: CaseFanOfSetupSelectSchema.optional(),
      include: CaseFanOfSetupIncludeSchema.optional(),
      data: z.union([
        CaseFanOfSetupUpdateInputSchema,
        CaseFanOfSetupUncheckedUpdateInputSchema,
      ]),
      where: CaseFanOfSetupWhereUniqueInputSchema,
    })
    .strict();

export const CaseFanOfSetupUpdateManyArgsSchema: z.ZodType<Prisma.CaseFanOfSetupUpdateManyArgs> =
  z
    .object({
      data: z.union([
        CaseFanOfSetupUpdateManyMutationInputSchema,
        CaseFanOfSetupUncheckedUpdateManyInputSchema,
      ]),
      where: CaseFanOfSetupWhereInputSchema.optional(),
    })
    .strict();

export const CaseFanOfSetupDeleteManyArgsSchema: z.ZodType<Prisma.CaseFanOfSetupDeleteManyArgs> =
  z
    .object({
      where: CaseFanOfSetupWhereInputSchema.optional(),
    })
    .strict();

export const SpeakersOfSetupCreateArgsSchema: z.ZodType<Prisma.SpeakersOfSetupCreateArgs> =
  z
    .object({
      select: SpeakersOfSetupSelectSchema.optional(),
      include: SpeakersOfSetupIncludeSchema.optional(),
      data: z.union([
        SpeakersOfSetupCreateInputSchema,
        SpeakersOfSetupUncheckedCreateInputSchema,
      ]),
    })
    .strict();

export const SpeakersOfSetupUpsertArgsSchema: z.ZodType<Prisma.SpeakersOfSetupUpsertArgs> =
  z
    .object({
      select: SpeakersOfSetupSelectSchema.optional(),
      include: SpeakersOfSetupIncludeSchema.optional(),
      where: SpeakersOfSetupWhereUniqueInputSchema,
      create: z.union([
        SpeakersOfSetupCreateInputSchema,
        SpeakersOfSetupUncheckedCreateInputSchema,
      ]),
      update: z.union([
        SpeakersOfSetupUpdateInputSchema,
        SpeakersOfSetupUncheckedUpdateInputSchema,
      ]),
    })
    .strict();

export const SpeakersOfSetupCreateManyArgsSchema: z.ZodType<Prisma.SpeakersOfSetupCreateManyArgs> =
  z
    .object({
      data: z.union([
        SpeakersOfSetupCreateManyInputSchema,
        SpeakersOfSetupCreateManyInputSchema.array(),
      ]),
      skipDuplicates: z.boolean().optional(),
    })
    .strict();

export const SpeakersOfSetupDeleteArgsSchema: z.ZodType<Prisma.SpeakersOfSetupDeleteArgs> =
  z
    .object({
      select: SpeakersOfSetupSelectSchema.optional(),
      include: SpeakersOfSetupIncludeSchema.optional(),
      where: SpeakersOfSetupWhereUniqueInputSchema,
    })
    .strict();

export const SpeakersOfSetupUpdateArgsSchema: z.ZodType<Prisma.SpeakersOfSetupUpdateArgs> =
  z
    .object({
      select: SpeakersOfSetupSelectSchema.optional(),
      include: SpeakersOfSetupIncludeSchema.optional(),
      data: z.union([
        SpeakersOfSetupUpdateInputSchema,
        SpeakersOfSetupUncheckedUpdateInputSchema,
      ]),
      where: SpeakersOfSetupWhereUniqueInputSchema,
    })
    .strict();

export const SpeakersOfSetupUpdateManyArgsSchema: z.ZodType<Prisma.SpeakersOfSetupUpdateManyArgs> =
  z
    .object({
      data: z.union([
        SpeakersOfSetupUpdateManyMutationInputSchema,
        SpeakersOfSetupUncheckedUpdateManyInputSchema,
      ]),
      where: SpeakersOfSetupWhereInputSchema.optional(),
    })
    .strict();

export const SpeakersOfSetupDeleteManyArgsSchema: z.ZodType<Prisma.SpeakersOfSetupDeleteManyArgs> =
  z
    .object({
      where: SpeakersOfSetupWhereInputSchema.optional(),
    })
    .strict();

export const MonitorsOfSetupCreateArgsSchema: z.ZodType<Prisma.MonitorsOfSetupCreateArgs> =
  z
    .object({
      select: MonitorsOfSetupSelectSchema.optional(),
      include: MonitorsOfSetupIncludeSchema.optional(),
      data: z.union([
        MonitorsOfSetupCreateInputSchema,
        MonitorsOfSetupUncheckedCreateInputSchema,
      ]),
    })
    .strict();

export const MonitorsOfSetupUpsertArgsSchema: z.ZodType<Prisma.MonitorsOfSetupUpsertArgs> =
  z
    .object({
      select: MonitorsOfSetupSelectSchema.optional(),
      include: MonitorsOfSetupIncludeSchema.optional(),
      where: MonitorsOfSetupWhereUniqueInputSchema,
      create: z.union([
        MonitorsOfSetupCreateInputSchema,
        MonitorsOfSetupUncheckedCreateInputSchema,
      ]),
      update: z.union([
        MonitorsOfSetupUpdateInputSchema,
        MonitorsOfSetupUncheckedUpdateInputSchema,
      ]),
    })
    .strict();

export const MonitorsOfSetupCreateManyArgsSchema: z.ZodType<Prisma.MonitorsOfSetupCreateManyArgs> =
  z
    .object({
      data: z.union([
        MonitorsOfSetupCreateManyInputSchema,
        MonitorsOfSetupCreateManyInputSchema.array(),
      ]),
      skipDuplicates: z.boolean().optional(),
    })
    .strict();

export const MonitorsOfSetupDeleteArgsSchema: z.ZodType<Prisma.MonitorsOfSetupDeleteArgs> =
  z
    .object({
      select: MonitorsOfSetupSelectSchema.optional(),
      include: MonitorsOfSetupIncludeSchema.optional(),
      where: MonitorsOfSetupWhereUniqueInputSchema,
    })
    .strict();

export const MonitorsOfSetupUpdateArgsSchema: z.ZodType<Prisma.MonitorsOfSetupUpdateArgs> =
  z
    .object({
      select: MonitorsOfSetupSelectSchema.optional(),
      include: MonitorsOfSetupIncludeSchema.optional(),
      data: z.union([
        MonitorsOfSetupUpdateInputSchema,
        MonitorsOfSetupUncheckedUpdateInputSchema,
      ]),
      where: MonitorsOfSetupWhereUniqueInputSchema,
    })
    .strict();

export const MonitorsOfSetupUpdateManyArgsSchema: z.ZodType<Prisma.MonitorsOfSetupUpdateManyArgs> =
  z
    .object({
      data: z.union([
        MonitorsOfSetupUpdateManyMutationInputSchema,
        MonitorsOfSetupUncheckedUpdateManyInputSchema,
      ]),
      where: MonitorsOfSetupWhereInputSchema.optional(),
    })
    .strict();

export const MonitorsOfSetupDeleteManyArgsSchema: z.ZodType<Prisma.MonitorsOfSetupDeleteManyArgs> =
  z
    .object({
      where: MonitorsOfSetupWhereInputSchema.optional(),
    })
    .strict();

export const MonitorCreateArgsSchema: z.ZodType<Prisma.MonitorCreateArgs> = z
  .object({
    select: MonitorSelectSchema.optional(),
    include: MonitorIncludeSchema.optional(),
    data: z.union([
      MonitorCreateInputSchema,
      MonitorUncheckedCreateInputSchema,
    ]),
  })
  .strict();

export const MonitorUpsertArgsSchema: z.ZodType<Prisma.MonitorUpsertArgs> = z
  .object({
    select: MonitorSelectSchema.optional(),
    include: MonitorIncludeSchema.optional(),
    where: MonitorWhereUniqueInputSchema,
    create: z.union([
      MonitorCreateInputSchema,
      MonitorUncheckedCreateInputSchema,
    ]),
    update: z.union([
      MonitorUpdateInputSchema,
      MonitorUncheckedUpdateInputSchema,
    ]),
  })
  .strict();

export const MonitorCreateManyArgsSchema: z.ZodType<Prisma.MonitorCreateManyArgs> =
  z
    .object({
      data: z.union([
        MonitorCreateManyInputSchema,
        MonitorCreateManyInputSchema.array(),
      ]),
      skipDuplicates: z.boolean().optional(),
    })
    .strict();

export const MonitorDeleteArgsSchema: z.ZodType<Prisma.MonitorDeleteArgs> = z
  .object({
    select: MonitorSelectSchema.optional(),
    include: MonitorIncludeSchema.optional(),
    where: MonitorWhereUniqueInputSchema,
  })
  .strict();

export const MonitorUpdateArgsSchema: z.ZodType<Prisma.MonitorUpdateArgs> = z
  .object({
    select: MonitorSelectSchema.optional(),
    include: MonitorIncludeSchema.optional(),
    data: z.union([
      MonitorUpdateInputSchema,
      MonitorUncheckedUpdateInputSchema,
    ]),
    where: MonitorWhereUniqueInputSchema,
  })
  .strict();

export const MonitorUpdateManyArgsSchema: z.ZodType<Prisma.MonitorUpdateManyArgs> =
  z
    .object({
      data: z.union([
        MonitorUpdateManyMutationInputSchema,
        MonitorUncheckedUpdateManyInputSchema,
      ]),
      where: MonitorWhereInputSchema.optional(),
    })
    .strict();

export const MonitorDeleteManyArgsSchema: z.ZodType<Prisma.MonitorDeleteManyArgs> =
  z
    .object({
      where: MonitorWhereInputSchema.optional(),
    })
    .strict();

export const SoundCardCreateArgsSchema: z.ZodType<Prisma.SoundCardCreateArgs> =
  z
    .object({
      select: SoundCardSelectSchema.optional(),
      include: SoundCardIncludeSchema.optional(),
      data: z.union([
        SoundCardCreateInputSchema,
        SoundCardUncheckedCreateInputSchema,
      ]),
    })
    .strict();

export const SoundCardUpsertArgsSchema: z.ZodType<Prisma.SoundCardUpsertArgs> =
  z
    .object({
      select: SoundCardSelectSchema.optional(),
      include: SoundCardIncludeSchema.optional(),
      where: SoundCardWhereUniqueInputSchema,
      create: z.union([
        SoundCardCreateInputSchema,
        SoundCardUncheckedCreateInputSchema,
      ]),
      update: z.union([
        SoundCardUpdateInputSchema,
        SoundCardUncheckedUpdateInputSchema,
      ]),
    })
    .strict();

export const SoundCardCreateManyArgsSchema: z.ZodType<Prisma.SoundCardCreateManyArgs> =
  z
    .object({
      data: z.union([
        SoundCardCreateManyInputSchema,
        SoundCardCreateManyInputSchema.array(),
      ]),
      skipDuplicates: z.boolean().optional(),
    })
    .strict();

export const SoundCardDeleteArgsSchema: z.ZodType<Prisma.SoundCardDeleteArgs> =
  z
    .object({
      select: SoundCardSelectSchema.optional(),
      include: SoundCardIncludeSchema.optional(),
      where: SoundCardWhereUniqueInputSchema,
    })
    .strict();

export const SoundCardUpdateArgsSchema: z.ZodType<Prisma.SoundCardUpdateArgs> =
  z
    .object({
      select: SoundCardSelectSchema.optional(),
      include: SoundCardIncludeSchema.optional(),
      data: z.union([
        SoundCardUpdateInputSchema,
        SoundCardUncheckedUpdateInputSchema,
      ]),
      where: SoundCardWhereUniqueInputSchema,
    })
    .strict();

export const SoundCardUpdateManyArgsSchema: z.ZodType<Prisma.SoundCardUpdateManyArgs> =
  z
    .object({
      data: z.union([
        SoundCardUpdateManyMutationInputSchema,
        SoundCardUncheckedUpdateManyInputSchema,
      ]),
      where: SoundCardWhereInputSchema.optional(),
    })
    .strict();

export const SoundCardDeleteManyArgsSchema: z.ZodType<Prisma.SoundCardDeleteManyArgs> =
  z
    .object({
      where: SoundCardWhereInputSchema.optional(),
    })
    .strict();

export const HeadphonesCreateArgsSchema: z.ZodType<Prisma.HeadphonesCreateArgs> =
  z
    .object({
      select: HeadphonesSelectSchema.optional(),
      include: HeadphonesIncludeSchema.optional(),
      data: z.union([
        HeadphonesCreateInputSchema,
        HeadphonesUncheckedCreateInputSchema,
      ]),
    })
    .strict();

export const HeadphonesUpsertArgsSchema: z.ZodType<Prisma.HeadphonesUpsertArgs> =
  z
    .object({
      select: HeadphonesSelectSchema.optional(),
      include: HeadphonesIncludeSchema.optional(),
      where: HeadphonesWhereUniqueInputSchema,
      create: z.union([
        HeadphonesCreateInputSchema,
        HeadphonesUncheckedCreateInputSchema,
      ]),
      update: z.union([
        HeadphonesUpdateInputSchema,
        HeadphonesUncheckedUpdateInputSchema,
      ]),
    })
    .strict();

export const HeadphonesCreateManyArgsSchema: z.ZodType<Prisma.HeadphonesCreateManyArgs> =
  z
    .object({
      data: z.union([
        HeadphonesCreateManyInputSchema,
        HeadphonesCreateManyInputSchema.array(),
      ]),
      skipDuplicates: z.boolean().optional(),
    })
    .strict();

export const HeadphonesDeleteArgsSchema: z.ZodType<Prisma.HeadphonesDeleteArgs> =
  z
    .object({
      select: HeadphonesSelectSchema.optional(),
      include: HeadphonesIncludeSchema.optional(),
      where: HeadphonesWhereUniqueInputSchema,
    })
    .strict();

export const HeadphonesUpdateArgsSchema: z.ZodType<Prisma.HeadphonesUpdateArgs> =
  z
    .object({
      select: HeadphonesSelectSchema.optional(),
      include: HeadphonesIncludeSchema.optional(),
      data: z.union([
        HeadphonesUpdateInputSchema,
        HeadphonesUncheckedUpdateInputSchema,
      ]),
      where: HeadphonesWhereUniqueInputSchema,
    })
    .strict();

export const HeadphonesUpdateManyArgsSchema: z.ZodType<Prisma.HeadphonesUpdateManyArgs> =
  z
    .object({
      data: z.union([
        HeadphonesUpdateManyMutationInputSchema,
        HeadphonesUncheckedUpdateManyInputSchema,
      ]),
      where: HeadphonesWhereInputSchema.optional(),
    })
    .strict();

export const HeadphonesDeleteManyArgsSchema: z.ZodType<Prisma.HeadphonesDeleteManyArgs> =
  z
    .object({
      where: HeadphonesWhereInputSchema.optional(),
    })
    .strict();

export const KeyboardCreateArgsSchema: z.ZodType<Prisma.KeyboardCreateArgs> = z
  .object({
    select: KeyboardSelectSchema.optional(),
    include: KeyboardIncludeSchema.optional(),
    data: z.union([
      KeyboardCreateInputSchema,
      KeyboardUncheckedCreateInputSchema,
    ]),
  })
  .strict();

export const KeyboardUpsertArgsSchema: z.ZodType<Prisma.KeyboardUpsertArgs> = z
  .object({
    select: KeyboardSelectSchema.optional(),
    include: KeyboardIncludeSchema.optional(),
    where: KeyboardWhereUniqueInputSchema,
    create: z.union([
      KeyboardCreateInputSchema,
      KeyboardUncheckedCreateInputSchema,
    ]),
    update: z.union([
      KeyboardUpdateInputSchema,
      KeyboardUncheckedUpdateInputSchema,
    ]),
  })
  .strict();

export const KeyboardCreateManyArgsSchema: z.ZodType<Prisma.KeyboardCreateManyArgs> =
  z
    .object({
      data: z.union([
        KeyboardCreateManyInputSchema,
        KeyboardCreateManyInputSchema.array(),
      ]),
      skipDuplicates: z.boolean().optional(),
    })
    .strict();

export const KeyboardDeleteArgsSchema: z.ZodType<Prisma.KeyboardDeleteArgs> = z
  .object({
    select: KeyboardSelectSchema.optional(),
    include: KeyboardIncludeSchema.optional(),
    where: KeyboardWhereUniqueInputSchema,
  })
  .strict();

export const KeyboardUpdateArgsSchema: z.ZodType<Prisma.KeyboardUpdateArgs> = z
  .object({
    select: KeyboardSelectSchema.optional(),
    include: KeyboardIncludeSchema.optional(),
    data: z.union([
      KeyboardUpdateInputSchema,
      KeyboardUncheckedUpdateInputSchema,
    ]),
    where: KeyboardWhereUniqueInputSchema,
  })
  .strict();

export const KeyboardUpdateManyArgsSchema: z.ZodType<Prisma.KeyboardUpdateManyArgs> =
  z
    .object({
      data: z.union([
        KeyboardUpdateManyMutationInputSchema,
        KeyboardUncheckedUpdateManyInputSchema,
      ]),
      where: KeyboardWhereInputSchema.optional(),
    })
    .strict();

export const KeyboardDeleteManyArgsSchema: z.ZodType<Prisma.KeyboardDeleteManyArgs> =
  z
    .object({
      where: KeyboardWhereInputSchema.optional(),
    })
    .strict();

export const MouseCreateArgsSchema: z.ZodType<Prisma.MouseCreateArgs> = z
  .object({
    select: MouseSelectSchema.optional(),
    include: MouseIncludeSchema.optional(),
    data: z.union([MouseCreateInputSchema, MouseUncheckedCreateInputSchema]),
  })
  .strict();

export const MouseUpsertArgsSchema: z.ZodType<Prisma.MouseUpsertArgs> = z
  .object({
    select: MouseSelectSchema.optional(),
    include: MouseIncludeSchema.optional(),
    where: MouseWhereUniqueInputSchema,
    create: z.union([MouseCreateInputSchema, MouseUncheckedCreateInputSchema]),
    update: z.union([MouseUpdateInputSchema, MouseUncheckedUpdateInputSchema]),
  })
  .strict();

export const MouseCreateManyArgsSchema: z.ZodType<Prisma.MouseCreateManyArgs> =
  z
    .object({
      data: z.union([
        MouseCreateManyInputSchema,
        MouseCreateManyInputSchema.array(),
      ]),
      skipDuplicates: z.boolean().optional(),
    })
    .strict();

export const MouseDeleteArgsSchema: z.ZodType<Prisma.MouseDeleteArgs> = z
  .object({
    select: MouseSelectSchema.optional(),
    include: MouseIncludeSchema.optional(),
    where: MouseWhereUniqueInputSchema,
  })
  .strict();

export const MouseUpdateArgsSchema: z.ZodType<Prisma.MouseUpdateArgs> = z
  .object({
    select: MouseSelectSchema.optional(),
    include: MouseIncludeSchema.optional(),
    data: z.union([MouseUpdateInputSchema, MouseUncheckedUpdateInputSchema]),
    where: MouseWhereUniqueInputSchema,
  })
  .strict();

export const MouseUpdateManyArgsSchema: z.ZodType<Prisma.MouseUpdateManyArgs> =
  z
    .object({
      data: z.union([
        MouseUpdateManyMutationInputSchema,
        MouseUncheckedUpdateManyInputSchema,
      ]),
      where: MouseWhereInputSchema.optional(),
    })
    .strict();

export const MouseDeleteManyArgsSchema: z.ZodType<Prisma.MouseDeleteManyArgs> =
  z
    .object({
      where: MouseWhereInputSchema.optional(),
    })
    .strict();

export const SpeakersCreateArgsSchema: z.ZodType<Prisma.SpeakersCreateArgs> = z
  .object({
    select: SpeakersSelectSchema.optional(),
    include: SpeakersIncludeSchema.optional(),
    data: z.union([
      SpeakersCreateInputSchema,
      SpeakersUncheckedCreateInputSchema,
    ]),
  })
  .strict();

export const SpeakersUpsertArgsSchema: z.ZodType<Prisma.SpeakersUpsertArgs> = z
  .object({
    select: SpeakersSelectSchema.optional(),
    include: SpeakersIncludeSchema.optional(),
    where: SpeakersWhereUniqueInputSchema,
    create: z.union([
      SpeakersCreateInputSchema,
      SpeakersUncheckedCreateInputSchema,
    ]),
    update: z.union([
      SpeakersUpdateInputSchema,
      SpeakersUncheckedUpdateInputSchema,
    ]),
  })
  .strict();

export const SpeakersCreateManyArgsSchema: z.ZodType<Prisma.SpeakersCreateManyArgs> =
  z
    .object({
      data: z.union([
        SpeakersCreateManyInputSchema,
        SpeakersCreateManyInputSchema.array(),
      ]),
      skipDuplicates: z.boolean().optional(),
    })
    .strict();

export const SpeakersDeleteArgsSchema: z.ZodType<Prisma.SpeakersDeleteArgs> = z
  .object({
    select: SpeakersSelectSchema.optional(),
    include: SpeakersIncludeSchema.optional(),
    where: SpeakersWhereUniqueInputSchema,
  })
  .strict();

export const SpeakersUpdateArgsSchema: z.ZodType<Prisma.SpeakersUpdateArgs> = z
  .object({
    select: SpeakersSelectSchema.optional(),
    include: SpeakersIncludeSchema.optional(),
    data: z.union([
      SpeakersUpdateInputSchema,
      SpeakersUncheckedUpdateInputSchema,
    ]),
    where: SpeakersWhereUniqueInputSchema,
  })
  .strict();

export const SpeakersUpdateManyArgsSchema: z.ZodType<Prisma.SpeakersUpdateManyArgs> =
  z
    .object({
      data: z.union([
        SpeakersUpdateManyMutationInputSchema,
        SpeakersUncheckedUpdateManyInputSchema,
      ]),
      where: SpeakersWhereInputSchema.optional(),
    })
    .strict();

export const SpeakersDeleteManyArgsSchema: z.ZodType<Prisma.SpeakersDeleteManyArgs> =
  z
    .object({
      where: SpeakersWhereInputSchema.optional(),
    })
    .strict();

export const WebcamCreateArgsSchema: z.ZodType<Prisma.WebcamCreateArgs> = z
  .object({
    select: WebcamSelectSchema.optional(),
    include: WebcamIncludeSchema.optional(),
    data: z.union([WebcamCreateInputSchema, WebcamUncheckedCreateInputSchema]),
  })
  .strict();

export const WebcamUpsertArgsSchema: z.ZodType<Prisma.WebcamUpsertArgs> = z
  .object({
    select: WebcamSelectSchema.optional(),
    include: WebcamIncludeSchema.optional(),
    where: WebcamWhereUniqueInputSchema,
    create: z.union([
      WebcamCreateInputSchema,
      WebcamUncheckedCreateInputSchema,
    ]),
    update: z.union([
      WebcamUpdateInputSchema,
      WebcamUncheckedUpdateInputSchema,
    ]),
  })
  .strict();

export const WebcamCreateManyArgsSchema: z.ZodType<Prisma.WebcamCreateManyArgs> =
  z
    .object({
      data: z.union([
        WebcamCreateManyInputSchema,
        WebcamCreateManyInputSchema.array(),
      ]),
      skipDuplicates: z.boolean().optional(),
    })
    .strict();

export const WebcamDeleteArgsSchema: z.ZodType<Prisma.WebcamDeleteArgs> = z
  .object({
    select: WebcamSelectSchema.optional(),
    include: WebcamIncludeSchema.optional(),
    where: WebcamWhereUniqueInputSchema,
  })
  .strict();

export const WebcamUpdateArgsSchema: z.ZodType<Prisma.WebcamUpdateArgs> = z
  .object({
    select: WebcamSelectSchema.optional(),
    include: WebcamIncludeSchema.optional(),
    data: z.union([WebcamUpdateInputSchema, WebcamUncheckedUpdateInputSchema]),
    where: WebcamWhereUniqueInputSchema,
  })
  .strict();

export const WebcamUpdateManyArgsSchema: z.ZodType<Prisma.WebcamUpdateManyArgs> =
  z
    .object({
      data: z.union([
        WebcamUpdateManyMutationInputSchema,
        WebcamUncheckedUpdateManyInputSchema,
      ]),
      where: WebcamWhereInputSchema.optional(),
    })
    .strict();

export const WebcamDeleteManyArgsSchema: z.ZodType<Prisma.WebcamDeleteManyArgs> =
  z
    .object({
      where: WebcamWhereInputSchema.optional(),
    })
    .strict();

export const CaseFanCreateArgsSchema: z.ZodType<Prisma.CaseFanCreateArgs> = z
  .object({
    select: CaseFanSelectSchema.optional(),
    include: CaseFanIncludeSchema.optional(),
    data: z.union([
      CaseFanCreateInputSchema,
      CaseFanUncheckedCreateInputSchema,
    ]),
  })
  .strict();

export const CaseFanUpsertArgsSchema: z.ZodType<Prisma.CaseFanUpsertArgs> = z
  .object({
    select: CaseFanSelectSchema.optional(),
    include: CaseFanIncludeSchema.optional(),
    where: CaseFanWhereUniqueInputSchema,
    create: z.union([
      CaseFanCreateInputSchema,
      CaseFanUncheckedCreateInputSchema,
    ]),
    update: z.union([
      CaseFanUpdateInputSchema,
      CaseFanUncheckedUpdateInputSchema,
    ]),
  })
  .strict();

export const CaseFanCreateManyArgsSchema: z.ZodType<Prisma.CaseFanCreateManyArgs> =
  z
    .object({
      data: z.union([
        CaseFanCreateManyInputSchema,
        CaseFanCreateManyInputSchema.array(),
      ]),
      skipDuplicates: z.boolean().optional(),
    })
    .strict();

export const CaseFanDeleteArgsSchema: z.ZodType<Prisma.CaseFanDeleteArgs> = z
  .object({
    select: CaseFanSelectSchema.optional(),
    include: CaseFanIncludeSchema.optional(),
    where: CaseFanWhereUniqueInputSchema,
  })
  .strict();

export const CaseFanUpdateArgsSchema: z.ZodType<Prisma.CaseFanUpdateArgs> = z
  .object({
    select: CaseFanSelectSchema.optional(),
    include: CaseFanIncludeSchema.optional(),
    data: z.union([
      CaseFanUpdateInputSchema,
      CaseFanUncheckedUpdateInputSchema,
    ]),
    where: CaseFanWhereUniqueInputSchema,
  })
  .strict();

export const CaseFanUpdateManyArgsSchema: z.ZodType<Prisma.CaseFanUpdateManyArgs> =
  z
    .object({
      data: z.union([
        CaseFanUpdateManyMutationInputSchema,
        CaseFanUncheckedUpdateManyInputSchema,
      ]),
      where: CaseFanWhereInputSchema.optional(),
    })
    .strict();

export const CaseFanDeleteManyArgsSchema: z.ZodType<Prisma.CaseFanDeleteManyArgs> =
  z
    .object({
      where: CaseFanWhereInputSchema.optional(),
    })
    .strict();
