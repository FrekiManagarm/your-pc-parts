// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMINISTRATOR
  CLIENT
  MODERATOR
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole @default(CLIENT)
  setups        Setup[]
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CPUCooler {
  id  String @default(cuid()) @id
  rpm Int? @default(0)
  proc_support String[] @default([])
  led Boolean? @default(false)
  tdp_max Int? @default(0)
  type String? @default("")
  pressure String? @default("")
  rpm_min Int? @default(0)
  rpm_max Int? @default(0)
  name String
  imageUrl String? @default("")
  amazonLink String? @default("")
  noise_level Int? @default(0)
  color String?
  size Int?
  setups Setup[]
}

model Motherboard {
  id  String @default(cuid()) @id
  socket String[] @default([])
  form_factor String
  chipset String? @default("")
  support MemorySupport? @default(DDR4)
  max_memory Int @default(0)
  memory_slots Int @default(0)
  audio Boolean? @default(true)
  bluetooth Boolean? @default(false)
  wifi Boolean? @default(false)
  name String
  imageUrl String? @default("")
  amazonLink String? @default("")
  color String?
  setups Setup[]
}

enum MemorySupport {
  DDR5
  DDR4
  DDR3
}

model RAM {
  id String @default(cuid()) @id
  speed Int[] @default([0, 0])
  modules Int[] @default([])
  price_per_gb Int @default(0)
  color String?
  imageUrl String? @default("")
  amazonLink String? @default("")
  name String
  first_word_latency String? @default("")
  cas_latency String? @default("")
  setups Setup[]
}

model CPU {
  id String @default(cuid()) @id
  core_count Int @default(0)
  threads_count Int @default(0)
  name String
  imageUrl String? @default("")
  core_clock Float @default(0.0)
  boost_clock Float @default(0.0)
  amazonLink String? @default("")
  socket String? @default("")
  cpu_type CPUType?
  cache Int? @default(0)
  tdp Int? @default(0)
  graphics Boolean? @default(false)
  smt Boolean? @default(false)
  setups Setup[]
}

enum CPUType {
  AMD
  Intel
}

model HDD {
  id String @default(cuid()) @id
  capacity Int @default(0)
  price_per_gb Int @default(0)
  amazonLink String? @default("")
  name String
  imageUrl String? @default("")
  type String? @default("")
  cache Int? @default(0)
  rpm Int? @default(0)
  form_factor String?
  interface String?
  setups Setup[]
}

model SSD {
  id String @id @default(cuid())
  capacity Int @default(0)
  write_speed Int? @default(0)
  read_speed Int? @default(0)
  price_per_gb Int @default(0)
  name String
  imageUrl String? @default("")
  amazonLink String? @default("")
  type String?
  cache Int? @default(0)
  form_factor String?
  interface String?
  setups SSDOfSetup[]
}

model GPU {
  id String @default(cuid()) @id
  chipset String? @default("")
  memory Int? @default(0)
  name String
  imageUrl String? @default("")
  amazonLink String? @default("")
  core_clock Int? @default(0)
  power Int? @default(0)
  proc_unit Int? @default(0)
  brand String? @default("")
  led Boolean? @default(false)
  boost_clock Int? @default(0)
  color String? @default("")
  length Int? @default(0)
  setups Setup[]
}

model Case {
  id String @default(cuid()) @id
  type CaseType @default(ATX)
  color String? @default("")
  name String
  imageUrl String? @default("")
  included_PSU_W Int? @default(0)
  amazonLink String? @default("")
  side_panel String?
  external_volume String?
  internal_35_bays Int? @default(0)
  setups Setup[]
}

model PSU {
  id String @id @default(cuid())
  type PSUType @default(ATX)
  name String
  imageUrl String? @default("")
  efficiency PSUEff @default(bronze)
  amazonLink String? @default("")
  wattage Int? @default(0)
  modular PSUModul @default(none)
  setups Setup[]
  color String?
}

enum PSUModul {
  Full
  Semi
  none
}

enum PSUEff {
  bronze
  silver
  gold
  platinium
  titanium
}

enum PSUType {
  ATX
  mATX
  SFX
}

enum CaseType {
  EATX
  ATX
  mATX
  mITX
}

model Setup {
  id String @default(cuid()) @id
  cpu CPU @relation(fields: [cpu_id], references: [id])
  cpu_id String
  gpu GPU @relation(fields: [gpu_id], references: [id])
  gpu_id String
  hdd HDD @relation(fields: [hdd_id], references: [id])
  hdd_id String
  case Case @relation(fields: [case_id], references: [id])
  case_id String
  ram RAM @relation(fields: [ram_id], references: [id])
  psu_id String
  psu PSU @relation(fields: [psu_id], references: [id])
  ram_id String
  monitors MonitorsOfSetup[]
  name String? @default("")
  sdds SSDOfSetup[]
  sound_card SoundCard @relation(fields: [sound_card_id], references: [id])
  sound_card_id String
  cpu_cooler CPUCooler @relation(fields: [cpu_cooler_id], references: [id])
  cpu_cooler_id String
  motherboard Motherboard @relation(fields: [motherboard_id], references: [id])
  motherboard_id String
  headphones Headphones @relation(fields: [headphones_id], references: [id])
  headphones_id String
  keyboard Keyboard @relation(fields: [keyboard_id], references: [id])
  keyboard_id String
  mouse Mouse @relation(fields: [mouse_id], references: [id])
  mouse_id String
  speakers SpeakersOfSetup[]
  webcam Webcam @relation(fields: [webcam_id], references: [id])
  webcam_id String
  case_fans CaseFanOfSetup[]
  user User @relation(fields: [user_id], references: [id])
  user_id String
}

model SSDOfSetup {
  ssd SSD @relation(fields: [ssd_id], references: [id])
  ssd_id String
  setup Setup @relation(fields: [setup_id], references: [id])
  setup_id String

  @@id([ssd_id, setup_id])
}

model CaseFanOfSetup {
  case_fan CaseFan @relation(fields: [case_fan_id], references: [id])
  case_fan_id String
  setup Setup @relation(fields: [setup_id], references: [id])
  setup_id String
  quantity Int

  @@id([case_fan_id, setup_id])
}

model SpeakersOfSetup {
  speakers Speakers @relation(fields: [speakers_id], references: [id])
  speakers_id String
  setup Setup @relation(fields: [setup_id], references: [id])
  setup_id String
  quantity Int

  @@id([speakers_id, setup_id])
}

model MonitorsOfSetup {
  monitor Monitor @relation(fields: [monitor_id], references: [id])
  monitor_id String
  setup Setup @relation(fields: [setup_id], references: [id])
  setup_id String
  quantity Int

  @@id([monitor_id, setup_id])
}

model Monitor {
  id  String @default(cuid()) @id
  screen_size Int? @default(0) // inches
  resolution Int[] @default([0, 0])
  amazonLink String? @default("")
  name String
  imageUrl String? @default("")
  refresh_rate Int? @default(60)
  response_time Int? @default(1)
  panel_type MonitorPanelType @default(TN)
  aspect_ratio String?
  setups MonitorsOfSetup[]
}

model SoundCard {
  id String @id @default(cuid())
  channels String?
  digital_audio String?
  name String
  imageUrl String? @default("")
  amazonLink String? @default("")
  snr Int? @default(0)
  sample_rate Int? @default(0)
  chipset String?
  interface String?
  setups Setup[]
}



model Headphones {
  id String @id @default(cuid())
  type HeadphoneTypes @default(Circumaural)
  frequency_response Int[] @default([0, 0])
  microphone Boolean? @default(false)
  wireless Boolean? @default(false)
  amazonLink String? @default("")
  name String
  imageUrl String? @default("")
  noise_cancellation Boolean? @default(false)
  enclosure_type EnclosureType @default(Closed)
  color String?
  setups Setup[]
}

model Keyboard {
  id String @id @default(cuid())
  style KeyboardStyle @default(Gaming)
  switches String?
  backlit String?
  name String
  amazonLink String? @default("")
  imageUrl String? @default("")
  tenkeyless Boolean? @default(true)
  connection_type ConnectionType @default(Wired)
  color String?
  setups Setup[]
}

model Mouse {
  id String @id @default(cuid())
  tracking_method MouseTrackMethod @default(Laser)
  connection_type ConnectionType @default(Wired)
  max_dpi Int? @default(0)
  amazonLink String? @default("")
  name String
  imageUrl String? @default("")
  hand_orientation MouseOrientation @default(Right)
  color String?
  setups Setup[]
}

model Speakers {
  id String @id @default(cuid())
  configuration String?
  name String
  imageUrl String? @default("")
  wattage Int? @default(0)
  frequency_response Int? @default(0)
  amazonLink String? @default("")
  color String?
  setups SpeakersOfSetup[]
}

model Webcam {
  id String @id @default(cuid())
  resolutions String[] @default([])
  name String
  imageUrl String? @default("")
  connection ConnectionType @default(Wired)
  focus_type FocusType @default(Auto)
  os String[] @default([])
  amazonLink String? @default("")
  fov Int? @default(0)
  setups Setup[]
}

model CaseFan {
  id String @id @default(cuid())
  size Int @default(0)
  name String
  imageUrl String? @default("")
  color String?
  amazonLink String? @default("")
  rpm Int[] @default([0, 0])
  airflow Int[] @default([0, 0])
  setups CaseFanOfSetup[]
}

enum FocusType {
  Auto
  Manual
  Fixed
}

enum MouseOrientation {
  Right
  Left
  Both
}

enum MouseTrackMethod {
  Optical
  Laser
}

enum KeyboardStyle {
  Gaming
  Mini
  Office
}

enum ConnectionType {
  Wired
  Wireless
  Bluetooth
  Both
}

enum HeadphoneTypes {
  Circumaural
  Supra_aural
  Earbuds
  Waterproof
  DJ
}

enum EnclosureType {
  Closed
  Open
}

enum MonitorPanelType {
  IPS
  TN
  VA
  OLED
}